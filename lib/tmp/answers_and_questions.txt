S: Boas práticas de programação em Ruby
Q: Qual é a convenção de nomenclatura para constantes em Ruby?
A: CONSTANT_CASE
A: camelCase
A: snake_case
CA: UPPER_CASE

S: Boas práticas de programação em Ruby
Q: Qual é a forma recomendada de comentar blocos de código em Ruby?
A: // Este é um comentário
A: /* Este é um comentário */
A: # Este é um comentário
CA: =begin Este é um comentário =end

S: Boas práticas de programação em Ruby
Q: Qual é a maneira correta de declarar uma variável local em Ruby?
A: @variavel
A: $variavel
A: variavel
CA: variavel = valor

S: Boas práticas de programação em Ruby
Q: Como é recomendado separar palavras em nomes de métodos em Ruby?
A: method_name
A: methodName
A: MethodName
CA: method_name

S: Boas práticas de programação em Ruby
Q: Qual é a forma adequada de comparar o conteúdo de duas strings em Ruby?
A: str1 == str2
A: str1.equals(str2)
A: str1.equal(str2)
CA: str1.eql?(str2)

S: Boas práticas de programação em Ruby
Q: Para que serve o método "each" em Ruby?
A: Para converter um objeto para uma string.
A: Para iterar sobre elementos de uma coleção.
A: Para verificar se um número é par ou ímpar.
CA: Para realizar a iteração de elementos em um objeto Enumerable.

S: Boas práticas de programação em Ruby
Q: O que é um símbolo em Ruby e quando é mais apropriado usá-lo?
A: Um símbolo é uma string mutável usada para representar nomes de variáveis.
A: Um símbolo é uma constante usada para definir valores fixos em uma classe.
A: Um símbolo é um tipo de dado numérico usado para cálculos matemáticos.
CA: Um símbolo é uma cadeia de caracteres imutável usada para representar identificadores de forma eficiente.

S: Boas práticas de programação em Ruby
Q: Qual é a diferença entre os métodos "include" e "extend" em Ruby?
A: Ambos os métodos são usados para herança em Ruby.
A: "Include" é usado para adicionar métodos de módulos a uma classe, enquanto "extend" é usado para adicionar métodos de módulos a um objeto.
A: "Include" é usado para adicionar métodos de classes pai a uma classe, enquanto "extend" é usado para adicionar métodos de classes filhas a uma classe.
CA: "Include" é usado para adicionar métodos de módulos a uma classe, enquanto "extend" é usado para adicionar métodos de módulos a um objeto.

S: Boas práticas de programação em Ruby
Q: Qual é a maneira recomendada de lidar com exceções em Ruby?
A: Utilizar estruturas de repetição para tratar possíveis exceções.
A: Capturar todas as exceções e não fazer nada em relação a elas.
A: Utilizar blocos "try-catch" para cada trecho de código suscetível a erros.
CA: Utilizar blocos "begin-rescue" para capturar e tratar exceções de forma apropriada.

S: Boas práticas de programação em Ruby
Q: Como podemos incluir um arquivo externo em um programa Ruby?
A: Usando o método "add_file" do Ruby.
A: Usando a diretiva "#include" para importar o arquivo.
A: Não é possível incluir arquivos externos em Ruby.
CA: Usando o método "require" ou "require_relative" para importar o arquivo necessário.

S: Introdução à Ruby e sua história
Q: Quem é o criador da linguagem de programação Ruby?
A: Yukihiro Matsumoto
A: Guido van Rossum
A: Linus Torvalds
CA: Yukihiro Matsumoto

S: Introdução à Ruby e sua história
Q: Em que ano a linguagem de programação Ruby foi criada?
A: 1995
A: 2001
A: 1983
CA: 1995

S: Introdução à Ruby e sua história
Q: Qual dos seguintes termos é frequentemente associado à filosofia de design da linguagem Ruby?
A: "Sempre use parênteses para chamar funções."
A: "Mantenha a simplicidade e a elegância."
A: "Evite o uso de estruturas de controle de fluxo."
CA: "Opte por múltiplos padrões de herança."

S: Introdução à Ruby e sua história
Q: Quais são os dois principais objetivos do criador de Ruby ao desenvolver a linguagem?
A: Torná-la rápida e leve.
A: Torná-la altamente segura e imutável.
A: Torná-la complexa e desafiadora.
CA: Torná-la fácil de usar e produtiva para os programadores.

S: Introdução à Ruby e sua história
Q: Ruby é uma linguagem de programação orientada a objetos. O que isso significa?
A: Que ela não suporta a criação de classes e objetos.
A: Que ela não permite o uso de herança e polimorfismo.
A: Que tudo em Ruby é um objeto, incluindo números e strings.
CA: Que o paradigma de programação utilizado é baseado na interação entre objetos.

S: Introdução à Ruby e sua história
Q: Em qual país a linguagem de programação Ruby foi criada?
A: Estados Unidos
A: Japão
A: Alemanha
CA: Japão

S: Introdução à Ruby e sua história
Q: Qual é o significado do nome "Ruby" para a linguagem de programação?
A: É uma homenagem ao famoso músico de jazz Django Reinhardt.
A: É uma referência à pedra preciosa, simbolizando a raridade e a beleza da linguagem.
A: É um acrônimo para "Real-time Utility and Binding for You."
CA: É uma homenagem ao computador "Ruby" usado por Yukihiro Matsumoto quando era criança.

S: Introdução à Ruby e sua história
Q: Ruby é influenciada por quais outras linguagens de programação?
A: Apenas Python.
A: Apenas C++.
A: Apenas Java.
CA: Perl, Smalltalk, Eiffel, Ada e Lisp.

S: Introdução à Ruby e sua história
Q: Qual é o lema da linguagem Ruby, frequentemente citado por seu criador?
A: "Menos é mais."
A: "Embrace, extend, and extinguish."
A: "Com grandes poderes vêm grandes responsabilidades."
CA: "A linguagem da simplicidade e da diversão."

S: Introdução à Ruby e sua história
Q: Qual é a extensão de arquivos Ruby comumente usada para scripts?
A: .rtf
A: .xml
A: .rb
CA: .rb

S: Instalação do ambiente Ruby
Q: Qual é o sistema operacional recomendado para a instalação do ambiente Ruby?
A: Windows 10
A: Fedora Linux
A: macOS Big Sur
CA: Qualquer sistema operacional que suporte a instalação do Ruby.

S: Instalação do ambiente Ruby
Q: Qual é a ferramenta mais comum para gerenciar as diferentes versões do Ruby em um ambiente de desenvolvimento?
A: RVV (Ruby Version Virtual)
A: rbenv
A: RubyGems
CA: RVM (Ruby Version Manager)

S: Instalação do ambiente Ruby
Q: Como podemos verificar se o Ruby está instalado corretamente em nosso sistema?
A: Executando o comando "ruby --version" no terminal.
A: Verificando a presença do arquivo "ruby.exe" na pasta de instalação.
A: Digitando "ruby -check" no prompt de comando.
CA: Executando o comando "ruby -v" no terminal.

S: Instalação do ambiente Ruby
Q: Além do Ruby, quais outras ferramentas são recomendadas para instalar como parte do ambiente de desenvolvimento Ruby?
A: Node.js e npm
A: Apache e MySQL
A: Visual Studio Code
CA: RubyGems e Bundler

S: Instalação do ambiente Ruby
Q: Qual é a maneira mais comum de instalar o Ruby em sistemas operacionais baseados em Unix, como Linux e macOS?
A: Usando o gerenciador de pacotes "apt-get" no Linux e o Homebrew no macOS.
A: Baixando o instalador do site oficial do Ruby e executando-o manualmente.
A: Utilizando o gerenciador de pacotes "yum" no Linux e o MacPorts no macOS.
CA: Usando o gerenciador de versões Ruby, como RVM ou rbenv.

S: Instalação do ambiente Ruby
Q: O que é o RubyGems?
A: É uma biblioteca do Ruby para trabalhar com matemática avançada.
A: É uma estrutura de testes automatizados para Ruby.
A: É um gerenciador de pacotes para instalar bibliotecas e gemas em Ruby.
CA: É um sistema de gerenciamento de bibliotecas e pacotes para a linguagem de programação Ruby.

S: Instalação do ambiente Ruby
Q: O que é o Bundler em Ruby?
A: É uma gem usada para criar interfaces gráficas para aplicações Ruby.
A: É uma ferramenta para compilar código Ruby em código de máquina.
A: É uma biblioteca que oferece suporte a testes de unidade e integração em Ruby.
CA: É uma gem usada para gerenciar as dependências de um projeto Ruby e garantir que as gemas corretas sejam instaladas.

S: Instalação do ambiente Ruby
Q: Qual é a versão mínima do Ruby recomendada para a maioria dos projetos atualmente?
A: Ruby 1.9
A: Ruby 2.0
A: Ruby 2.5
CA: Ruby 2.7

S: Instalação do ambiente Ruby
Q: O que é um interpretador Ruby?
A: É um software que permite executar comandos e scripts escritos em Ruby.
A: É uma ferramenta usada para analisar a sintaxe de código Ruby em busca de erros.
A: É um programa que compila código Ruby em código de máquina para melhor desempenho.
CA: É um componente do ambiente Ruby que traduz o código fonte Ruby para instruções que o computador pode entender e executar.

S: Instalação do ambiente Ruby
Q: Além do RubyGems, quais outras fontes são comuns para encontrar gemas (gems) de terceiros para uso em projetos Ruby?
A: GitHub e Bitbucket
A: RubyForge e RubyCentral
A: SourceForge e GitLab
CA: RubyGems.org e GitHub

S: Variáveis e tipos de dados em Ruby
Q: Em Ruby, como declaramos uma variável?
A: utilizando a palavra-chave "var"
A: utilizando a palavra-chave "let"
A: utilizando a palavra-chave "variable"
CA: utilizando a palavra-chave "def"

S: Variáveis e tipos de dados em Ruby
Q: Ruby é uma linguagem de tipagem estática ou dinâmica?
A: Tipagem estática
A: Tipagem dinâmica
A: Tipagem forte
CA: Tipagem dinâmica

S: Variáveis e tipos de dados em Ruby
Q: Qual é o símbolo usado para iniciar um comentário de uma linha em Ruby?
A: //
A: /*
A: #
CA: #

S: Variáveis e tipos de dados em Ruby
Q: Em Ruby, todas as variáveis precisam ser declaradas antes de serem utilizadas?
A: Sim, sempre.
A: Sim, é necessário declará-las antes de utilizá-las.
A: Apenas se forem variáveis globais.
CA: Não, elas são criadas automaticamente quando utilizadas.

S: Variáveis e tipos de dados em Ruby
Q: Qual é a diferença entre uma variável local e uma variável de instância em Ruby?
A: Não há diferença, ambos os tipos de variáveis são usados da mesma forma.
A: Variáveis locais são acessíveis apenas em métodos, enquanto variáveis de instância são acessíveis em toda a classe.
A: Variáveis locais têm nomes curtos, enquanto variáveis de instância têm nomes longos.
CA: Variáveis locais têm escopo dentro de um bloco ou método, enquanto variáveis de instância têm escopo dentro de uma classe.

S: Variáveis e tipos de dados em Ruby
Q: Ruby é uma linguagem sensível a maiúsculas e minúsculas. Isso significa que...
A: Não é possível usar letras maiúsculas em nomes de variáveis.
A: Nomes de variáveis são tratados como palavras-chave e não podem começar com letra maiúscula.
A: Nomes de variáveis são case-insensitive, ou seja, tanto maiúsculas quanto minúsculas são tratadas como iguais.
CA: Nomes de variáveis são case-sensitive, ou seja, maiúsculas e minúsculas são distintas.

S: Variáveis e tipos de dados em Ruby
Q: Qual é a maneira correta de concatenar uma variável em uma string em Ruby?
A: Utilizando a função "concat" para unir a variável e a string.
A: Utilizando o operador "+" entre a variável e a string.
A: Utilizando o método "join" para combinar a variável e a string.
CA: Utilizando o operador de interpolação "#{}" dentro da string.

S: Variáveis e tipos de dados em Ruby
Q: Em Ruby, como verificamos o tipo de uma variável?
A: Utilizando o método "typeof"
A: Utilizando o método "type"
A: Utilizando a palavra-chave "var_type"
CA: Utilizando o método "class"

S: Variáveis e tipos de dados em Ruby
Q: Quais são os tipos básicos de dados em Ruby?
A: Inteiro, Decimal, e Texto
A: Integer, Float e Boolean
A: Numérico, Ponto flutuante e Caractere
CA: Integer, Float, String e Boolean

S: Variáveis e tipos de dados em Ruby
Q: Como podemos criar uma constante em Ruby?
A: Utilizando a palavra-chave "let"
A: Utilizando a palavra-chave "const"
A: Colocando o símbolo ":" antes do nome da variável
CA: Colocando o símbolo "const" antes do nome da variável

S: Variáveis e tipos de dados em Ruby
Q: O que é uma variável de classe em Ruby?
A: É uma variável que só pode ser acessada em uma classe filha.
A: É uma variável que só pode ser usada em métodos de classe.
A: É uma variável que só pode ser criada em tempo de execução.
CA: É uma variável que é compartilhada entre todas as instâncias de uma classe.

S: Operadores e expressões em Ruby
Q: Quais são os operadores aritméticos em Ruby?
A: +, *, /, %
A: &, |, !
A: <, >, <=, >=
CA: +, -, *, /, %

S: Operadores e expressões em Ruby
Q: Qual é o resultado da expressão em Ruby: 5 + 3 * 2?
A: 10
A: 16
A: 26
CA: 11

S: Operadores e expressões em Ruby
Q: Quais são os operadores de atribuição em Ruby?
A: =, ==, ===
A: =>, <=, >=
A: + =, - =, * =
CA: =, +=, -=, *=, /=, %=

S: Operadores e expressões em Ruby
Q: O que o operador % faz em Ruby quando usado com números?
A: Realiza a multiplicação dos números.
A: Calcula o resto da divisão entre os números.
A: Eleva o primeiro número à potência do segundo número.
CA: Calcula o resto da divisão entre os números.

S: Operadores e expressões em Ruby
Q: Qual é o resultado da expressão em Ruby: (8 + 4) / 2 - 3 * 2?
A: 2
A: 4
A: 8
CA: 0

S: Operadores e expressões em Ruby
Q: Quais são os operadores de comparação em Ruby?
A: <>, !=, ==
A: &&, ||, !
A: <, >, <=, >=
CA: ==, !=, <, >, <=, >=

S: Operadores e expressões em Ruby
Q: O que o operador "==" faz em Ruby?
A: Verifica se duas variáveis são iguais.
A: Verifica se uma variável é maior que outra.
A: Verifica se uma variável é menor que outra.
CA: Verifica se duas variáveis são iguais.

S: Operadores e expressões em Ruby
Q: Quais são os operadores lógicos em Ruby?
A: AND, OR, NOT
A: &&, ||, !
A: &, |, !
CA: &&, ||, !

S: Operadores e expressões em Ruby
Q: Qual é o resultado da expressão em Ruby: (10 > 5) && (3 < 2) || (4 == 4)?
A: true
A: false
A: nil
CA: true

S: Operadores e expressões em Ruby
Q: O que o operador "&&" faz em Ruby?
A: Realiza a multiplicação lógica de duas expressões.
A: Realiza a divisão lógica de duas expressões.
A: Verifica se pelo menos uma das expressões é verdadeira.
CA: Realiza a conjunção lógica de duas expressões (ambas devem ser verdadeiras).

S: Estruturas condicionais em Ruby
Q: Como podemos criar uma estrutura condicional simples (if) em Ruby?
A: Utilizando a palavra-chave "when"
A: Utilizando a palavra-chave "unless"
A: Utilizando a palavra-chave "case"
CA: Utilizando a palavra-chave "if"

S: Estruturas condicionais em Ruby
Q: Qual é a sintaxe para criar uma estrutura condicional com múltiplas condições em Ruby?
A: if (condição1); (condição2); end
A: if (condição1) || (condição2); end
A: if (condição1) and (condição2) then; end
CA: if (condição1) && (condição2); end

S: Estruturas condicionais em Ruby
Q: Em Ruby, como podemos executar um bloco de código alternativo caso a condição de uma estrutura condicional não seja atendida?
A: Utilizando a palavra-chave "alt"
A: Utilizando a palavra-chave "else"
A: Utilizando a palavra-chave "otherwise"
CA: Utilizando a palavra-chave "else"

S: Estruturas condicionais em Ruby
Q: Qual é a sintaxe para criar uma estrutura condicional com múltiplas condições e blocos alternativos em Ruby?
A: if (condição1); elsif (condição2); else; end
A: if (condição1); else if (condição2); else; end
A: if (condição1); elif (condição2); else; end
CA: if (condição1); elsif (condição2); else; end

S: Estruturas condicionais em Ruby
Q: Ruby possui uma estrutura condicional específica para testar múltiplas condições de forma concisa. Qual é essa estrutura?
A: if...else
A: when...case
A: unless...else
CA: case...when

S: Estruturas condicionais em Ruby
Q: Qual é a sintaxe correta para utilizar a estrutura condicional "case...when" em Ruby?
A: case (variável); when valor1; when valor2; else; end
A: case (variável); when (valor1); when (valor2); else; end
A: case (variável); when: valor1, valor2, else, end
CA: case (variável); when valor1 then; when valor2 then; else; end

S: Estruturas condicionais em Ruby
Q: Em Ruby, o que a estrutura condicional "unless" verifica?
A: Se a condição é verdadeira.
A: Se a condição é falsa.
A: Se a variável foi declarada.
CA: Se a condição é falsa.

S: Estruturas condicionais em Ruby
Q: Qual é a diferença entre a estrutura condicional "if" e "unless" em Ruby?
A: Não há diferença, ambas funcionam da mesma maneira.
A: "If" verifica se a condição é verdadeira e "unless" verifica se a condição é falsa.
A: "If" é usado para checar múltiplas condições, enquanto "unless" é usado apenas para uma única condição.
CA: "If" verifica se a condição é verdadeira e "unless" verifica se a condição é falsa, ou seja, são opostos.

S: Estruturas condicionais em Ruby
Q: Em Ruby, como podemos combinar múltiplas condições usando operadores lógicos em uma estrutura condicional?
A: Utilizando os operadores "||" e "&&"
A: Utilizando os operadores "or" e "and"
A: Utilizando os operadores "||" e "and"
CA: Utilizando os operadores "||" e "&&"

S: Estruturas condicionais em Ruby
Q: É possível aninhar estruturas condicionais em Ruby?
A: Sim, mas é uma má prática de programação.
A: Sim, apenas usando a estrutura "if...else".
A: Não, Ruby não suporta aninhamento de estruturas condicionais.
CA: Sim, é possível aninhar estruturas condicionais usando "if", "elsif" e "else" dentro de outro bloco condicional.

S: Estruturas condicionais em Ruby
Q: Quando devemos usar a estrutura condicional "case...when" em vez da estrutura "if...else" em Ruby?
A: Quando temos apenas uma condição para verificar.
A: Quando precisamos de múltiplas condições para testar, mas não necessariamente com blocos de código diferentes.
A: Quando temos várias condições com blocos de código diferentes para cada caso.
CA: Quando temos várias condições com blocos de código diferentes para cada caso, pois torna o código mais legível e conciso.

S: Estruturas de repetição em Ruby
Q: Como podemos criar um loop que se repete até que uma determinada condição seja falsa em Ruby?
A: Utilizando a estrutura "while"
A: Utilizando a estrutura "until"
A: Utilizando a estrutura "loop"
CA: Utilizando a estrutura "while"

S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar um loop "while" em Ruby?
A: while (condição) { código a ser executado }
A: while { código a ser executado } (condição)
A: (condição) { código a ser executado } while
CA: while (condição) do; código a ser executado; end

S: Estruturas de repetição em Ruby
Q: Como podemos criar um loop que se repete um número específico de vezes em Ruby?
A: Utilizando a estrutura "for"
A: Utilizando a estrutura "repeat"
A: Utilizando a estrutura "each"
CA: Utilizando a estrutura "for"

S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar um loop "for" em Ruby?
A: for (variável in coleção) { código a ser executado }
A: (variável in coleção) { código a ser executado } for
A: for { código a ser executado } (variável in coleção)
CA: for variável in coleção do; código a ser executado; end

S: Estruturas de repetição em Ruby
Q: Qual é a diferença entre "while" e "until" em Ruby?
A: Não há diferença, ambos funcionam da mesma maneira.
A: "While" verifica se a condição é verdadeira para executar o loop, enquanto "until" verifica se a condição é falsa.
A: "While" é usado para loops com um número específico de repetições, enquanto "until" é usado para loops com condições abertas.
CA: "While" verifica se a condição é verdadeira para executar o loop, enquanto "until" verifica se a condição é falsa para executar o loop.

S: Estruturas de repetição em Ruby
Q: Como podemos parar a execução de um loop antes que a condição seja falsa em Ruby?
A: Utilizando a instrução "continue"
A: Utilizando a instrução "exit"
A: Utilizando a instrução "break"
CA: Utilizando a instrução "break"

S: Estruturas de repetição em Ruby
Q: Em Ruby, como podemos executar uma iteração sobre uma coleção de elementos?
A: Utilizando a estrutura "each"
A: Utilizando a estrutura "foreach"
A: Utilizando a estrutura "do"
CA: Utilizando a estrutura "each"

S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar uma iteração "each" em Ruby?
A: each (elemento) { código a ser executado }
A: each { código a ser executado } (elemento)
A: (elemento) { código a ser executado } each
CA: coleção.each do |elemento|; código a ser executado; end

S: Estruturas de repetição em Ruby
Q: Podemos utilizar "while" e "until" dentro de uma iteração "each" em Ruby?
A: Sim, mas somente "while".
A: Sim, mas somente "until".
A: Sim, ambos podem ser usados.
CA: Sim, ambos "while" e "until" podem ser usados dentro de uma iteração "each".

S: Estruturas de repetição em Ruby
Q: Em Ruby, como podemos pular uma iteração e continuar com a próxima em um loop?
A: Utilizando a instrução "skip"
A: Utilizando a instrução "next"
A: Utilizando a instrução "pass"
CA: Utilizando a instrução "next"

S: Estruturas de repetição em Ruby
Q: Como podemos criar um loop que executa pelo menos uma vez, mesmo se a condição inicial for falsa?
A: Utilizando a estrutura "do...while"
A: Utilizando a estrutura "repeat...until"
A: Utilizando a estrutura "loop"
CA: Utilizando a estrutura "begin...end while"

S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar um loop "loop" em Ruby?
A: loop { código a ser executado }
A: { código a ser executado } loop
A: loop (condição) { código a ser executado }
CA: loop do; código a ser executado; end

S: Estruturas de repetição em Ruby
Q: Em Ruby, como podemos sair de um loop imediatamente e pular o restante das iterações quando uma condição for atendida?
A: Utilizando a instrução "continue"
A: Utilizando a instrução "jump"
A: Utilizando a instrução "next"
CA: Utilizando a instrução "next"

S: Estruturas de repetição em Ruby
Q: Como podemos criar um loop que executa até que o usuário interrompa a execução?
A: Utilizando a instrução "halt"
A: Utilizando a instrução "break"
A: Utilizando a instrução "terminate"
CA: Utilizando a instrução "break" e verificando uma condição de saída dentro do loop.

S: Estruturas de repetição em Ruby
Q: Em Ruby, como podemos criar um loop que repete uma sequência específica de vezes?
A: Utilizando a estrutura "times"
A: Utilizando a estrutura "count"
A: Utilizando a estrutura "sequence"
CA: Utilizando a estrutura "times"

S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar um loop "times" em Ruby?
A: (número).times { código a ser executado }
A: (número) { código a ser executado } .times
A: times (número) { código a ser executado }
CA: (número).times do; código a ser executado; end

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Como podemos criar um array vazio em Ruby?
A: array = []
A: array = {}
A: array = ()
CA: array = []

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Qual é a diferença entre um array e um hash em Ruby?
A: Não há diferença, ambos são usados para armazenar coleções de dados.
A: Arrays são ordenados numericamente, enquanto hashes são ordenados alfabeticamente.
A: Arrays são coleções de elementos únicos, enquanto hashes são coleções de pares chave-valor.
CA: Arrays são coleções ordenadas e indexadas por índices inteiros, enquanto hashes são coleções não ordenadas e indexadas por chaves únicas.

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Como podemos acessar o elemento de um array em uma determinada posição?
A: Utilizando a sintaxe array{"posição"}
A: Utilizando a sintaxe array["posição"]
A: Utilizando a sintaxe array(posição)
CA: Utilizando a sintaxe array[posição]

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Em Ruby, como podemos adicionar um elemento ao final de um array existente?
A: Utilizando o método "add"
A: Utilizando o método "push"
A: Utilizando o método "insert"
CA: Utilizando o método "push"

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Como podemos criar um hash vazio em Ruby?
A: hash = []
A: hash = {}
A: hash = ()
CA: hash = {}

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Qual é a sintaxe correta para adicionar um par chave-valor a um hash em Ruby?
A: hash << "chave" => "valor"
A: hash.add("chave", "valor")
A: hash["chave"] = "valor"
CA: hash["chave"] = "valor"

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Em Ruby, como podemos verificar se uma chave específica existe em um hash?
A: Utilizando o método "exist?"
A: Utilizando o método "contains?"
A: Utilizando o método "has_key?"
CA: Utilizando o método "has_key?"

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Em Ruby, como podemos iterar sobre os elementos de um array?
A: Utilizando a estrutura "each"
A: Utilizando a estrutura "for"
A: Utilizando a estrutura "loop"
CA: Utilizando a estrutura "each"

S: Coleções de dados: Arrays e Hashes em Ruby
Q: Qual é a sintaxe correta para criar um array em Ruby com alguns elementos pré-definidos?
A: array = [elemento1, elemento2, elemento3]
A: array = {elemento1, elemento2, elemento3}
A: array = (elemento1, elemento2, elemento3)
CA: array = [elemento1, elemento2, elemento3]

S: Funções e métodos em Ruby
Q: Como podemos definir uma função em Ruby?
A: Utilizando a palavra-chave "def"
A: Utilizando a palavra-chave "function"
A: Utilizando a palavra-chave "method"
CA: Utilizando a palavra-chave "def"

S: Funções e métodos em Ruby
Q: Qual é a sintaxe correta para definir uma função em Ruby com parâmetros?
A: def nome_da_funcao(parametro1, parametro2)
A: def nome_da_funcao(parametro1; parametro2)
A: def nome_da_funcao(parametro1, parametro2);
CA: def nome_da_funcao(parametro1, parametro2)

S: Funções e métodos em Ruby
Q: Em Ruby, como podemos retornar um valor de uma função?
A: Utilizando a palavra-chave "output"
A: Utilizando a palavra-chave "result"
A: Utilizando a palavra-chave "return"
CA: Utilizando a palavra-chave "return"

S: Funções e métodos em Ruby
Q: Em Ruby, como podemos chamar (ou invocar) uma função definida anteriormente?
A: Utilizando a palavra-chave "exec"
A: Utilizando a palavra-chave "run"
A: Utilizando o nome da função seguido de parênteses ()
CA: Utilizando o nome da função seguido de parênteses ()

S: Funções e métodos em Ruby
Q: Ruby permite que uma função retorne mais de um valor de uma vez. Como isso é chamado?
A: Retorno múltiplo
A: Retorno estendido
A: Retorno composto
CA: Retorno múltiplo

S: Funções e métodos em Ruby
Q: Em Ruby, é possível definir um valor padrão para um parâmetro de função. Isso é conhecido como...
A: Parâmetro opcional
A: Parâmetro flexível
A: Parâmetro padrão
CA: Parâmetro padrão

S: Funções e métodos em Ruby
Q: Em Ruby, como podemos passar um número variável de argumentos para uma função?
A: Utilizando a palavra-chave "variable_args"
A: Utilizando a palavra-chave "args"
A: Utilizando um asterisco () antes do nome do parâmetro na definição da função.
CA: Utilizando um asterisco () antes do nome do parâmetro na definição da função.

S: Funções e métodos em Ruby
Q: Qual é a sintaxe correta para criar um método de classe (método estático) em Ruby?
A: def self.nome_do_metodo
A: def class.nome_do_metodo
A: def nome_da_classe.nome_do_metodo
CA: def self.nome_do_metodo

S: Funções e métodos em Ruby
Q: Em Ruby, como podemos chamar um método de uma classe sem criar uma instância da classe?
A: Não é possível chamar um método sem criar uma instância da classe.
A: Utilizando a palavra-chave "class"
A: Utilizando a palavra-chave "new"
CA: Utilizando a palavra-chave "new"

S: Funções e métodos em Ruby
Q: Em Ruby, o que é um método de instância?
A: Um método que pertence à classe e não requer uma instância da classe para ser chamado.
A: Um método que pertence a uma instância específica da classe e pode ser chamado apenas nessa instância.
A: Um método que é definido fora da classe e pode ser usado em várias classes.
CA: Um método que pertence a uma instância específica da classe e pode ser chamado apenas nessa instância.

S: Funções e métodos em Ruby
Q: Como podemos verificar se um objeto tem um determinado método em Ruby?
A: Utilizando o método "check_method"
A: Utilizando o método "has_method?"
A: Utilizando o método "respond_to?"
CA: Utilizando o método "respond_to?"

S: Funções e métodos em Ruby
Q: Em Ruby, é possível definir funções anônimas, também conhecidas como blocos. Como isso é feito?
A: Utilizando a palavra-chave "function"
A: Utilizando a palavra-chave "def"
A: Utilizando chaves { } para definir o bloco.
CA: Utilizando chaves { } para definir o bloco.

S: Scoping de variáveis em Ruby
Q: O que é o escopo de uma variável em Ruby?
A: O escopo de uma variável refere-se à área do programa onde a variável é válida e pode ser acessada.
A: O escopo de uma variável indica quantas vezes ela pode ser modificada em um programa.
A: O escopo de uma variável define o tipo de dado que pode ser armazenado nela.
CA: O escopo de uma variável refere-se à área do programa onde a variável é válida e pode ser acessada.

S: Scoping de variáveis em Ruby
Q: Em Ruby, quais são os principais tipos de escopo de variáveis?
A: Escopo local e escopo global
A: Escopo público e escopo privado
A: Escopo interno e escopo externo
CA: Escopo local e escopo global

S: Scoping de variáveis em Ruby
Q: O que é uma variável de escopo local em Ruby?
A: É uma variável acessível apenas dentro de um método ou bloco específico.
A: É uma variável que pode ser acessada em qualquer lugar do programa.
A: É uma variável que só pode ser declarada em classes, não em métodos.
CA: É uma variável acessível apenas dentro de um método ou bloco específico.

S: Scoping de variáveis em Ruby
Q: Em Ruby, qual é o símbolo utilizado para denotar uma variável de escopo local?
A: $
A: @
A: #
CA: Nenhum prefixo é necessário para denotar uma variável de escopo local em Ruby.

S: Scoping de variáveis em Ruby
Q: O que é uma variável de escopo global em Ruby?
A: É uma variável acessível apenas dentro de um método ou bloco específico.
A: É uma variável que pode ser acessada em qualquer lugar do programa.
A: É uma variável que só pode ser declarada em classes, não em métodos.
CA: É uma variável que pode ser acessada em qualquer lugar do programa e é precedida pelo símbolo "$".

S: Scoping de variáveis em Ruby
Q: O que acontece se uma variável local e uma variável global tiverem o mesmo nome em Ruby?
A: A variável local substitui a variável global em todos os lugares do programa.
A: A variável global substitui a variável local em todos os lugares do programa.
A: Será gerado um erro de ambiguidade e o programa não será executado.
CA: A variável local tem precedência sobre a variável global dentro do escopo onde foi definida. Fora desse escopo, a variável global será acessada.

S: Scoping de variáveis em Ruby
Q: Em Ruby, o que é uma variável de instância?
A: É uma variável que pertence a uma instância específica de uma classe e pode ser acessada apenas por métodos dessa instância.
A: É uma variável que pode ser acessada em qualquer lugar do programa, independentemente da classe ou método.
A: É uma variável que é compartilhada por todas as instâncias de uma classe e pode ser acessada por qualquer método dessa classe.
CA: É uma variável que pertence a uma instância específica de uma classe e pode ser acessada apenas por métodos dessa instância, sendo denotada pelo prefixo "@".

S: Classes e Objetos em Ruby
Q: O que é uma classe em Ruby?
A: Uma classe é uma estrutura de programação que define um novo tipo de dado, contendo atributos e métodos.
A: Uma classe é um conjunto de variáveis e funções agrupadas em um único objeto.
A: Uma classe é um arquivo de código Ruby que contém várias instâncias de objetos.
CA: Uma classe é uma estrutura de programação que define um novo tipo de dado, contendo atributos e métodos.

S: Classes e Objetos em Ruby
Q: O que é um objeto em Ruby?
A: Um objeto é uma instância de uma classe que contém dados e comportamentos específicos.
A: Um objeto é uma variável global que pode ser acessada em qualquer lugar do programa.
A: Um objeto é uma função especial em Ruby que pode ser chamada diretamente, sem criar objetos.
CA: Um objeto é uma instância de uma classe que contém dados e comportamentos específicos.

S: Classes e Objetos em Ruby
Q: Como podemos criar uma nova instância de uma classe em Ruby?
A: Utilizando o método "new" seguido do nome da classe.
A: Utilizando o método "create" seguido do nome da classe.
A: Utilizando o método "instantiate" seguido do nome da classe.
CA: Utilizando o método "new" seguido do nome da classe.

S: Classes e Objetos em Ruby
Q: Em Ruby, como podemos definir um construtor para uma classe?
A: Utilizando o método "constructor" na definição da classe.
A: Utilizando o método "initialize" na definição da classe.
A: Utilizando o método "init" na definição da classe.
CA: Utilizando o método "initialize" na definição da classe.

S: Classes e Objetos em Ruby
Q: Em Ruby, como podemos definir métodos de instância em uma classe?
A: Utilizando a palavra-chave "method" seguida do nome do método.
A: Utilizando a palavra-chave "def" seguida do nome do método.
A: Utilizando a palavra-chave "func" seguida do nome do método.
CA: Utilizando a palavra-chave "def" seguida do nome do método.

S: Classes e Objetos em Ruby
Q: O que é um método de classe (ou método estático) em Ruby?
A: Um método de classe é um método que pertence à classe em si e pode ser chamado diretamente na classe, sem criar objetos.
A: Um método de classe é um método que só pode ser acessado a partir de instâncias da classe.
A: Um método de classe é um método que pode ser acessado apenas por outras classes.
CA: Um método de classe é um método que pertence à classe em si e pode ser chamado diretamente na classe, sem criar objetos.

S: Classes e Objetos em Ruby
Q: Em Ruby, como podemos acessar os atributos (variáveis de instância) de um objeto?
A: Utilizando a palavra-chave "self" seguida do nome do atributo.
A: Utilizando a palavra-chave "attribute" seguida do nome do atributo.
A: Utilizando a palavra-chave "var" seguida do nome do atributo.
CA: Utilizando a palavra-chave "self" seguida do nome do atributo.

S: Classes e Objetos em Ruby
Q: O que é herança em Ruby?
A: Herança é a capacidade de uma classe tia herdar características e comportamentos de uma classe pai.
A: Herança é uma técnica de criptografia usada para proteger dados confidenciais.
A: Herança é uma palavra reservada em Ruby que indica a importância de uma classe.
CA: Herança é a capacidade de uma classe filha herdar características e comportamentos de uma classe pai.

S: Classes e Objetos em Ruby
Q: Como podemos definir uma classe pai (superclasse) em Ruby para permitir herança?
A: Utilizando a palavra-chave "clatch" seguida do nome da classe pai após o nome da classe filha.
A: Utilizando a palavra-chave "parent" seguida do nome da classe pai após o nome da classe filha.
A: Utilizando a palavra-chave "superclass" seguida do nome da classe pai após o nome da classe filha.
CA: Utilizando a palavra-chave "class" seguida do nome da classe pai após o nome da classe filha.

S: Classes e Objetos em Ruby
Q: Em Ruby, como uma classe filha (subclasse) herda características e comportamentos da classe pai?
A: A classe filha utiliza a palavra-chave " < " seguida do nome da classe pai.
A: A classe filha utiliza a palavra-chave "inherits" seguida do nome da classe pai.
A: A classe filha utiliza a palavra-chave "extends" seguida do nome da classe pai.
CA: A classe filha utiliza a palavra-chave " < " seguida do nome da classe pai.

S: Classes e Objetos em Ruby
Q: Em Ruby, como podemos chamar um método da classe pai a partir de uma classe filha?
A: Utilizando a palavra-chave "sutra" seguida do nome do método.
A: Utilizando a palavra-chave "parent" seguida do nome do método.
A: Utilizando a palavra-chave "base" seguida do nome do método.
CA: Utilizando a palavra-chave "super" seguida do nome do método.

S: Herança e Encapsulamento em Ruby
Q: O que é herança em Ruby?
A: Herança é a capacidade de uma classe filha herdar métodos apenas da classe pai.
A: Herança é a capacidade de uma classe filha herdar características e comportamentos de uma classe pai.
A: Herança é a capacidade de uma classe filha substituir todos os métodos da classe pai.
CA: Herança é a capacidade de uma classe filha herdar características e comportamentos de uma classe pai.

S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos estender uma classe para herdar de outra classe?
A: Utilizando a palavra-chave "extend" seguida do nome da classe pai.
A: Utilizando a palavra-chave "parent" seguida do nome da classe pai.
A: Utilizando a palavra-chave "include" seguida do nome da classe pai.
CA: Utilizando a palavra-chave " < " seguida do nome da classe pai.

S: Herança e Encapsulamento em Ruby
Q: O que é encapsulamento em Ruby?
A: Encapsulamento é a capacidade de uma classe esconder seus métodos e atributos internos.
A: Encapsulamento é a capacidade de uma classe herdar características e comportamentos de outra classe.
A: Encapsulamento é a capacidade de uma classe substituir todos os métodos da classe pai.
CA: Encapsulamento é a capacidade de uma classe esconder seus métodos e atributos internos, permitindo o acesso apenas por meio de métodos públicos.

S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos definir um método privado em uma classe?
A: Utilizando a palavra-chave "private_method" seguida do nome do método.
A: Utilizando a palavra-chave "protected" seguida do nome do método.
A: Utilizando a palavra-chave "private" seguida do nome do método.
CA: Utilizando a palavra-chave "private" seguida do nome do método.

S: Herança e Encapsulamento em Ruby
Q: Em Ruby, qual é o objetivo do encapsulamento?
A: O objetivo do encapsulamento é permitir que métodos e atributos internos de uma classe sejam acessados por outras classes livremente.
A: O objetivo do encapsulamento é garantir que uma classe não possa herdar de outra classe.
A: O objetivo do encapsulamento é ocultar a implementação interna de uma classe e permitir o acesso controlado através de métodos públicos.
CA: O objetivo do encapsulamento é ocultar a implementação interna de uma classe e permitir o acesso controlado através de métodos públicos.

S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos definir um método protegido em uma classe?
A: Utilizando a palavra-chave "protected_method" seguida do nome do método.
A: Utilizando a palavra-chave "protected" seguida do nome do método.
A: Utilizando a palavra-chave "access" seguida do nome do método.
CA: Utilizando a palavra-chave "protected" seguida do nome do método.

S: Herança e Encapsulamento em Ruby
Q: Em Ruby, qual é a diferença entre um método público e um método privado?
A: Um método público pode ser acessado de fora da classe, enquanto um método privado só pode ser acessado de dentro da classe.
A: Um método público pode ser acessado por qualquer classe, enquanto um método privado só pode ser acessado pela classe em que foi definido.
A: Não há diferença entre um método público e um método privado, ambos podem ser acessados de qualquer lugar do programa.
CA: Um método público pode ser acessado de fora da classe, enquanto um método privado só pode ser acessado de dentro da classe.

S: Herança e Encapsulamento em Ruby
Q: Em Ruby, qual é a diferença entre um método público e um método protegido?
A: Um método público pode ser acessado por qualquer classe, enquanto um método protegido só pode ser acessado de dentro da classe ou suas subclasses.
A: Um método público pode ser acessado de fora da classe, enquanto um método protegido só pode ser acessado de dentro da classe.
A: Não há diferença entre um método público e um método protegido, ambos podem ser acessados de qualquer lugar do programa.
CA: Um método público pode ser acessado por qualquer classe, enquanto um método protegido só pode ser acessado de dentro da classe ou suas subclasses.

S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos acessar um método privado de uma classe?
A: Utilizando a palavra-chave "private" seguida do nome do método.
A: Utilizando a palavra-chave "access" seguida do nome do método.
A: Não é possível acessar um método privado de uma classe fora da própria classe.
CA: Não é possível acessar um método privado de uma classe fora da própria classe, somente métodos públicos podem ser chamados externamente.

S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos acessar um método protegido de uma classe?
A: Utilizando a palavra-chave "protected" seguida do nome do método.
A: Utilizando a palavra-chave "access" seguida do nome do método.
A: Não é possível acessar um método protegido de uma classe fora da própria classe ou suas subclasses.
CA: Não é possível acessar um método protegido de uma classe fora da própria classe ou suas subclasses, somente métodos públicos podem ser chamados externamente.

S: Herança e Encapsulamento em Ruby
Q: O que acontece quando tentamos chamar um método privado de uma classe fora dela?
A: É gerado um erro de sintaxe.
A: O método privado é chamado normalmente, sem restrições.
A: É gerado um erro de tempo de execução.
CA: É gerado um erro de tempo de execução, pois não é possível chamar um método privado de uma classe fora dela, somente dentro da própria classe.

S: Módulos e Mixins em Ruby
Q: O que são módulos em Ruby?
A: Módulos são uma forma de encapsular classes em um único arquivo para facilitar a organização do código.
A: Módulos são uma forma de herança múltipla em Ruby, permitindo que uma classe tenha vários pais.
A: Módulos são uma estrutura de controle de fluxo em Ruby utilizada para repetir um bloco de código várias vezes.
CA: Módulos são uma forma de encapsular métodos e constantes para serem compartilhados por várias classes em Ruby.

S: Módulos e Mixins em Ruby
Q: Como podemos incluir um módulo em uma classe em Ruby?
A: Utilizando a palavra-chave "attach" seguida do nome do módulo.
A: Utilizando a palavra-chave "extend" seguida do nome do módulo.
A: Utilizando a palavra-chave "include" seguida do nome do módulo.
CA: Utilizando a palavra-chave "include" seguida do nome do módulo.

S: Módulos e Mixins em Ruby
Q: Em Ruby, o que é um mixin?
A: Um mixin é um tipo especial de classe que só pode ser incluído em outras classes.
A: Um mixin é uma forma de encapsulamento que permite ocultar a implementação interna de uma classe.
A: Um mixin é um objeto que contém apenas constantes e não pode conter métodos.
CA: Um mixin é um módulo que contém métodos e constantes que podem ser incluídos em outras classes para compartilhar funcionalidades.

S: Módulos e Mixins em Ruby
Q: Em Ruby, como podemos definir um método dentro de um módulo?
A: Utilizando a palavra-chave "func" seguida do nome do método.
A: Utilizando a palavra-chave "method" seguida do nome do método.
A: Utilizando a palavra-chave "def" seguida do nome do método.
CA: Utilizando a palavra-chave "def" seguida do nome do método dentro do módulo.

S: Módulos e Mixins em Ruby
Q: Em Ruby, qual é a vantagem de usar módulos e mixins?
A: A vantagem de usar módulos e mixins é que eles permitem a herança múltipla em Ruby, o que não é possível com classes.
A: A vantagem de usar módulos e mixins é que eles podem ser instanciados como objetos, permitindo seu uso em qualquer lugar do código.
A: A vantagem de usar módulos e mixins é que eles permitem compartilhar métodos e constantes entre várias classes, evitando duplicação de código.
CA: A vantagem de usar módulos e mixins é que eles permitem compartilhar métodos e constantes entre várias classes, evitando duplicação de código e facilitando a organização do código.

S: Módulos e Mixins em Ruby
Q: Em Ruby, é possível incluir mais de um módulo em uma classe?
A: Sim, é possível incluir quantos módulos forem necessários em uma classe.
A: Não, Ruby não permite a inclusão de mais de um módulo em uma classe.
A: Sim, mas somente em classes que não herdam de nenhuma outra classe.
CA: Sim, é possível incluir quantos módulos forem necessários em uma classe, permitindo assim a composição de funcionalidades a partir de diferentes módulos.

S: Módulos e Mixins em Ruby
Q: Em Ruby, o que acontece se dois módulos incluídos em uma classe possuírem métodos com o mesmo nome?
A: Ruby permite a inclusão de apenas um dos métodos com o mesmo nome e gera um erro para o outro.
A: Os métodos com o mesmo nome são executados em ordem aleatória, dependendo da situação.
A: É gerado um erro de tempo de execução, pois Ruby não permite a inclusão de módulos com métodos de mesmo nome em uma mesma classe.
CA: Os métodos com o mesmo nome serão sobrescritos pelo último módulo incluído, ou seja, o último método incluído terá precedência.

S: Módulos e Mixins em Ruby
Q: Em Ruby, como podemos acessar os métodos de um módulo incluído em uma classe?
A: Os métodos de um módulo incluído são acessados automaticamente pela classe, não é necessário fazer nada adicional.
A: Utilizando a palavra-chave "use" seguida do nome do método.
A: Utilizando a palavra-chave "get" seguida do nome do método.
CA: Os métodos de um módulo incluído são acessados automaticamente pela classe, sem precisar de nenhuma palavra-chave adicional.

S: Tratamento de Exceções em Ruby
Q: O que são exceções em Ruby?
A: Exceções em Ruby são erros que ocorrem durante a execução de um programa e interrompem o fluxo normal de execução.
A: Exceções em Ruby são recursos avançados que permitem que o programa retorne ao início do código.
A: Exceções em Ruby são usadas para definir comportamentos especiais de um objeto.
CA: Exceções em Ruby são erros que ocorrem durante a execução de um programa e podem ser tratadas com blocos de tratamento (try, catch).

S: Tratamento de Exceções em Ruby
Q: Como podemos tratar exceções em Ruby?
A: Utilizando a palavra-chave "handle" seguida do nome da exceção.
A: Utilizando a palavra-chave "rescue" seguida do nome da exceção.
A: Utilizando a palavra-chave "catch" seguida do nome da exceção.
CA: Utilizando a palavra-chave "begin" seguida de um bloco de código onde a exceção pode ocorrer e "rescue" para capturar e tratar a exceção.

S: Tratamento de Exceções em Ruby
Q: Em Ruby, como podemos executar um bloco de código que pode gerar uma exceção?
A: Utilizando a palavra-chave "handle".
A: Utilizando a palavra-chave "catch".
A: Utilizando a palavra-chave "try".
CA: Utilizando a palavra-chave "begin" seguida do bloco de código que pode gerar a exceção.

S: Tratamento de Exceções em Ruby
Q: Em Ruby, como podemos lidar com uma exceção específica?
A: Utilizando a palavra-chave "catch" seguida do nome da exceção.
A: Utilizando a palavra-chave "handle" seguida do nome da exceção.
A: Utilizando a palavra-chave "rescue" seguida do nome da exceção.
CA: Utilizando a palavra-chave "rescue" seguida do nome da exceção que queremos capturar e tratar.

S: Tratamento de Exceções em Ruby
Q: Em Ruby, como podemos lidar com várias exceções diferentes em um único bloco de tratamento?
A: Utilizando vários blocos "rescue" seguidos, cada um para uma exceção diferente.
A: Utilizando a palavra-chave "multiple_rescue" seguida do nome das exceções que queremos capturar.
A: Utilizando a palavra-chave "handle" seguida do nome de todas as exceções que queremos tratar.
CA: Utilizando vários blocos "rescue" seguidos, cada um para uma exceção diferente, permitindo tratar cada tipo de exceção de forma específica.

S: Tratamento de Exceções em Ruby
Q: O que é o bloco "else" em um tratamento de exceções?
A: O bloco "else" é usado para definir o código que será executado caso não ocorra nenhuma exceção dentro do bloco "begin".
A: O bloco "else" é usado para tratar exceções que não foram capturadas pelos blocos "rescue".
A: O bloco "else" é usado para definir o código que será executado após a captura de uma exceção no bloco "rescue".
CA: Em Ruby, não existe o bloco "else" em um tratamento de exceções. O bloco "rescue" é usado para capturar e tratar exceções.

S: Tratamento de Exceções em Ruby
Q: O que acontece se uma exceção não for tratada em um programa Ruby?
A: A exceção será ignorada e o programa continuará sua execução normalmente.
A: O programa exibirá uma mensagem de erro padrão e continuará sua execução.
A: O programa será encerrado e exibirá uma mensagem de erro indicando a exceção não tratada.
CA: Se uma exceção não for tratada em um programa Ruby, o programa será encerrado e exibirá uma mensagem de erro indicando o tipo da exceção e o trecho de código onde ocorreu.

S: Tratamento de Exceções em Ruby
Q: É possível criar exceções personalizadas em Ruby?
A: Não, Ruby não permite a criação de exceções personalizadas, apenas utiliza as exceções padrão da linguagem.
A: Sim, é possível criar exceções personalizadas utilizando a palavra-chave "custom_exception".
A: Sim, é possível criar exceções personalizadas criando uma classe que herde da classe "Exception".
CA: Sim, é possível criar exceções personalizadas criando uma classe que herde da classe "StandardError" ou "Exception". Essas classes podem ser lançadas e capturadas de forma semelhante às exceções padrão da linguagem.

S: Manipulação de Arquivos em Ruby
Q: Como podemos abrir um arquivo em modo de leitura em Ruby?
A: Utilizando a função "open_file" com o argumento "r".
A: Utilizando a função "open" com o argumento "read".
A: Utilizando a função "file_open" com o argumento "r".
CA: Utilizando a função "File.open" com o argumento "r".

S: Manipulação de Arquivos em Ruby
Q: Como podemos abrir um arquivo em modo de escrita em Ruby?
A: Utilizando a função "open_file" com o argumento "w".
A: Utilizando a função "open" com o argumento "write".
A: Utilizando a função "file_open" com o argumento "w".
CA: Utilizando a função "File.open" com o argumento "w".

S: Manipulação de Arquivos em Ruby
Q: Como podemos abrir um arquivo em modo de adição (append) em Ruby?
A: Utilizando a função "open_file" com o argumento "a".
A: Utilizando a função "open" com o argumento "append".
A: Utilizando a função "file_open" com o argumento "a".
CA: Utilizando a função "File.open" com o argumento "a".

S: Manipulação de Arquivos em Ruby
Q: Em Ruby, como podemos fechar um arquivo após a manipulação?
A: Utilizando a função "file_close".
A: Utilizando a função "close".
A: Utilizando a função "file_end".
CA: Utilizando a função "file.close".

S: Manipulação de Arquivos em Ruby
Q: Como podemos ler o conteúdo de um arquivo aberto em modo de leitura?
A: Utilizando o método "read" do objeto do arquivo.
A: Utilizando o método "read_file" do objeto do arquivo.
A: Utilizando o método "readline" do objeto do arquivo.
CA: Utilizando o método "readlines" do objeto do arquivo.

S: Manipulação de Arquivos em Ruby
Q: Em Ruby, como podemos escrever em um arquivo aberto em modo de escrita?
A: Utilizando o método "write" do objeto do arquivo.
A: Utilizando o método "file_write" do objeto do arquivo.
A: Utilizando o método "append" do objeto do arquivo.
CA: Utilizando o método "puts" do objeto do arquivo.

S: Manipulação de Arquivos em Ruby
Q: Como podemos verificar se um arquivo existe antes de abri-lo em Ruby?
A: Utilizando a função "file_exist?" passando o nome do arquivo como argumento.
A: Utilizando a função "file_exists?" passando o nome do arquivo como argumento.
A: Utilizando a função "exists?" passando o nome do arquivo como argumento.
CA: Utilizando a função "File.exist?" passando o nome do arquivo como argumento.

S: Manipulação de Arquivos em Ruby
Q: Como podemos criar um novo arquivo em Ruby?
A: Utilizando a função "create_file" com o nome do arquivo como argumento.
A: Utilizando a função "file_create" com o nome do arquivo como argumento.
A: Utilizando a função "open_file" com o argumento "create".
CA: Utilizando a função "File.open" com o nome do arquivo e o modo de abertura "w" (escrita), o que criará o arquivo se ele não existir ou o truncará (apagará o conteúdo) se já existir.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos concatenar duas strings?
A: Utilizando o operador "+" entre as duas strings.
A: Utilizando o método "concat" para unir as duas strings.
A: Utilizando o método "join" passando as duas strings como argumento.
CA: Utilizando o operador "<<" entre as duas strings.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos obter o tamanho de uma string?
A: Utilizando o método "length" da string.
A: Utilizando o método "count" da string.
A: Utilizando o método "size" da string.
CA: Utilizando o método "length" ou "size" da string.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos transformar uma string em letras maiúsculas?
A: Utilizando o método "upcase" da string.
A: Utilizando o método "uppercase" da string.
A: Utilizando o método "capitals" da string.
CA: Utilizando o método "upcase" da string.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos transformar uma string em letras minúsculas?
A: Utilizando o método "downcase" da string.
A: Utilizando o método "lowercase" da string.
A: Utilizando o método "smallcase" da string.
CA: Utilizando o método "downcase" da string.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos verificar se uma string está vazia?
A: Utilizando o método "empty?" da string.
A: Utilizando o método "blank?" da string.
A: Utilizando o método "nil?" da string.
CA: Utilizando o método "empty?" da string.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos substituir uma parte específica de uma string por outra?
A: Utilizando o método "replace" passando os índices de início e fim da parte a ser substituída e a nova string como argumento.
A: Utilizando o método "sub" passando a parte a ser substituída e a nova string como argumento.
A: Utilizando o método "swap" passando a parte a ser substituída e a nova string como argumento.
CA: Utilizando o método "gsub" passando a parte a ser substituída e a nova string como argumento.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos inverter uma string?
A: Utilizando o método "reverse" da string.
A: Utilizando o método "invert" da string.
A: Utilizando o método "backwards" da string.
CA: Utilizando o método "reverse" da string.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos dividir uma string em um array de substrings com base em um caractere delimitador?
A: Utilizando o método "split" passando o caractere delimitador como argumento.
A: Utilizando o método "divide" passando o caractere delimitador como argumento.
A: Utilizando o método "explode" passando o caractere delimitador como argumento.
CA: Utilizando o método "split" passando o caractere delimitador como argumento.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos remover espaços em branco do início e do final de uma string?
A: Utilizando o método "strip" da string.
A: Utilizando o método "trim" da string.
A: Utilizando o método "erase" da string.
CA: Utilizando o método "strip" da string.

S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos verificar se uma string contém outra substring?
A: Utilizando o método "include?" passando a substring como argumento.
A: Utilizando o método "contains?" passando a substring como argumento.
A: Utilizando o método "has?" passando a substring como argumento.
CA: Utilizando o método "include?" passando a substring como argumento.

S: Expressões Regulares em Ruby
Q: O que são expressões regulares em Ruby?
A: Expressões regulares em Ruby são sequências de caracteres que definem padrões de busca em strings.
A: Expressões regulares em Ruby são estruturas de controle de fluxo usadas para criar loops.
A: Expressões regulares em Ruby são um tipo especial de variável que armazena várias strings.
CA: Expressões regulares em Ruby são sequências de caracteres que definem padrões de busca em strings e permitem realizar operações de busca e substituição de texto de forma poderosa.

S: Expressões Regulares em Ruby
Q: Como podemos criar uma expressão regular em Ruby?
A: Utilizando chaves "{}" para delimitar a expressão.
A: Utilizando colchetes "[]" para delimitar a expressão.
A: Utilizando parênteses "()" para delimitar a expressão.
CA: Utilizando barras "//" para delimitar a expressão.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos verificar se uma expressão regular corresponde a uma string?
A: Utilizando o método "match" da string, passando a expressão regular como argumento.
A: Utilizando o método "verify" da string, passando a expressão regular como argumento.
A: Utilizando o método "compare" da string, passando a expressão regular como argumento.
CA: Utilizando o método "match" da string, passando a expressão regular como argumento.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos verificar se uma expressão regular corresponde a uma string no início da mesma?
A: Utilizando o método "start_with?" da expressão regular.
A: Utilizando o método "begin_with?" da expressão regular.
A: Utilizando o método "initial?" da expressão regular.
CA: Utilizando o método "start_with?" da expressão regular.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos verificar se uma expressão regular corresponde a uma string no final da mesma?
A: Utilizando o método "finish_with?" da expressão regular.
A: Utilizando o método "end_with?" da expressão regular.
A: Utilizando o método "last?" da expressão regular.
CA: Utilizando o método "end_with?" da expressão regular.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos obter todas as correspondências de uma expressão regular em uma string?
A: Utilizando o método "find" da expressão regular.
A: Utilizando o método "search" da expressão regular.
A: Utilizando o método "match_all" da expressão regular.
CA: Utilizando o método "scan" da expressão regular.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos substituir uma parte específica de uma string com base em uma expressão regular?
A: Utilizando o método "replace" da string, passando a expressão regular e a nova string como argumentos.
A: Utilizando o método "sub" da string, passando a expressão regular e a nova string como argumentos.
A: Utilizando o método "replace_all" da string, passando a expressão regular e a nova string como argumentos.
CA: Utilizando o método "gsub" da string, passando a expressão regular e a nova string como argumentos.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos dividir uma string em um array de substrings com base em uma expressão regular?
A: Utilizando o método "divide" passando a expressão regular como argumento.
A: Utilizando o método "split" passando a expressão regular como argumento.
A: Utilizando o método "separate" passando a expressão regular como argumento.
CA: Utilizando o método "split" passando a expressão regular como argumento.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos substituir todas as ocorrências de uma expressão regular em uma string por outra?
A: Utilizando o método "swap" passando a expressão regular e a nova string como argumentos.
A: Utilizando o método "replace_all" passando a expressão regular e a nova string como argumentos.
A: Utilizando o método "replace" passando a expressão regular e a nova string como argumentos.
CA: Utilizando o método "gsub" passando a expressão regular e a nova string como argumentos.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos ignorar o case sensitive ao utilizar uma expressão regular?
A: Utilizando o modificador "/i" no final da expressão regular.
A: Utilizando o modificador "/s" no final da expressão regular.
A: Utilizando o modificador "/c" no final da expressão regular.
CA: Utilizando o modificador "/i" no final da expressão regular para torná-la case-insensitive.

S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos verificar se uma string contém somente caracteres numéricos usando expressões regulares?
A: Utilizando a expressão regular "/\d+/".
A: Utilizando a expressão regular "/\w+/".
A: Utilizando a expressão regular "/\s+/".
CA: Utilizando a expressão regular "/\A\d+\z/".

S: Introdução ao Desenvolvimento Web com Ruby
Q: O que é Ruby on Rails?
A: Ruby on Rails é um framework de desenvolvimento web escrito em Ruby que facilita a criação de aplicativos web.
A: Ruby on Rails é um servidor web escrito em Ruby que permite hospedar sites e aplicativos web.
A: Ruby on Rails é um banco de dados NoSQL escrito em Ruby para armazenar dados de aplicativos web.
CA: Ruby on Rails é um framework de desenvolvimento web escrito em Ruby que segue o padrão MVC (Model-View-Controller) e oferece uma estrutura completa para criar aplicativos web.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Quais são as vantagens de usar Ruby on Rails no desenvolvimento web?
A: Ruby on Rails possui uma sintaxe simples e expressiva que permite escrever código de forma mais legível.
A: Ruby on Rails é altamente escalável e permite que os aplicativos cresçam conforme a demanda.
A: Ruby on Rails possui uma grande comunidade e uma vasta coleção de bibliotecas e gemas que facilitam o desenvolvimento.
CA: Ruby on Rails oferece produtividade e rapidez no desenvolvimento, seguindo convenções sobre configurações, o que agiliza o processo de criação de aplicativos web.

S: Introdução ao Desenvolvimento Web com Ruby
Q: O que é o padrão de arquitetura MVC (Model-View-Controller)?
A: MVC é um padrão de design usado em Ruby on Rails que se refere a um tipo especial de roteador.
A: MVC é um padrão de design usado em Ruby on Rails que se refere a um banco de dados otimizado.
A: MVC é um padrão de design usado em Ruby on Rails que separa a aplicação em três componentes principais: Model, View e Controller.
CA: MVC é um padrão de design usado em Ruby on Rails que separa a aplicação em três componentes principais: Model (responsável pela manipulação dos dados), View (responsável pela apresentação dos dados) e Controller (responsável por gerenciar as interações do usuário).

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, onde são armazenados os templates de View?
A: Os templates de View são armazenados em arquivos com extensão .html.erb.
A: Os templates de View são armazenados em arquivos com extensão .view.rb.
A: Os templates de View são armazenados em arquivos com extensão .view.html.
CA: Os templates de View são armazenados em arquivos com extensão .html.erb, que permitem incorporar código Ruby dentro do HTML para gerar a saída dinamicamente.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Como podemos definir uma rota em Ruby on Rails?
A: As rotas são definidas automaticamente em Ruby on Rails e não requerem configuração adicional.
A: As rotas são definidas no arquivo de configuração "routes.xml" do aplicativo Ruby on Rails.
A: As rotas são definidas no arquivo de configuração "app.yml" do aplicativo Ruby on Rails.
CA: As rotas são definidas no arquivo "routes.rb" do aplicativo Ruby on Rails, utilizando a sintaxe "get", "post", "put", "delete" ou outras para mapear URLs para ações do Controller.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos criar um novo aplicativo?
A: Utilizando o comando "rails new" seguido do nome do aplicativo.
A: Utilizando o comando "ruby new" seguido do nome do aplicativo.
A: Utilizando o comando "rails create" seguido do nome do aplicativo.
CA: Utilizando o comando "rails new" seguido do nome do aplicativo, que criará uma estrutura básica de diretórios e arquivos para o novo aplicativo.

S: Introdução ao Desenvolvimento Web com Ruby
Q: O que é um scaffold em Ruby on Rails?
A: Um scaffold em Ruby on Rails é uma funcionalidade que permite criar automaticamente um código básico para um modelo, suas visualizações e controladores.
A: Um scaffold em Ruby on Rails é uma biblioteca de terceiros que adiciona recursos extras à aplicação.
A: Um scaffold em Ruby on Rails é uma camada de segurança que protege a aplicação contra ataques cibernéticos.
CA: Um scaffold em Ruby on Rails é uma funcionalidade que permite criar automaticamente um código básico para um modelo, suas visualizações e controladores, agilizando o processo de criação de recursos CRUD (Create, Read, Update, Delete).

S: Introdução ao Desenvolvimento Web com Ruby
Q: O que é uma migração em Ruby on Rails?
A: Uma migração em Ruby on Rails é uma forma de exportar dados do aplicativo para um arquivo externo.
A: Uma migração em Ruby on Rails é uma camada de segurança adicional para proteger o banco de dados contra ataques.
A: Uma migração em Ruby on Rails é uma forma de fazer alterações no esquema do banco de dados de maneira controlada e versionada.
CA: Uma migração em Ruby on Rails é uma forma de fazer alterações no esquema do banco de dados de maneira controlada e versionada, permitindo que o desenvolvedor modifique a estrutura do banco de dados sem perder dados ou prejudicar a integridade dos dados existentes.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos iniciar o servidor web para executar nossa aplicação localmente?
A: Utilizando o comando "rails run".
A: Utilizando o comando "rails start".
A: Utilizando o comando "rails server".
CA: Utilizando o comando "rails server" ou "rails s", que iniciará o servidor web para executar a aplicação localmente em http://localhost:3000.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos criar um novo modelo?
A: Utilizando o comando "rails generate model" seguido do nome do modelo e os atributos desejados.
A: Utilizando o comando "rails create model" seguido do nome do modelo e os atributos desejados.
A: Utilizando o comando "rails new model" seguido do nome do modelo e os atributos desejados.
CA: Utilizando o comando "rails generate model" seguido do nome do modelo e os atributos desejados, o que criará automaticamente o arquivo de migração correspondente para criar a tabela no banco de dados.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos criar um novo controlador?
A: Utilizando o comando "rails generate controller" seguido do nome do controlador.
A: Utilizando o comando "rails new controller" seguido do nome do controlador.
A: Utilizando o comando "rails create controller" seguido do nome do controlador.
CA: Utilizando o comando "rails generate controller" seguido do nome do controlador, o que criará automaticamente o arquivo do controlador com os métodos de ação básicos.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos criar uma nova view?
A: Utilizando o comando "rails new view" seguido do nome da view.
A: Utilizando o comando "rails generate view" seguido do nome da view.
A: Utilizando o comando "rails create view" seguido do nome da view.
CA: Em Ruby on Rails, as views são criadas automaticamente quando criamos um controlador com o comando "rails generate controller". O Rails cria automaticamente as pastas e arquivos de view associados ao controlador e suas ações.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, onde são armazenados os arquivos de configuração do aplicativo?
A: Os arquivos de configuração são armazenados na pasta "config" do aplicativo.
A: Os arquivos de configuração são armazenados na pasta "app" do aplicativo.
A: Os arquivos de configuração são armazenados na pasta "db" do aplicativo.
CA: Os arquivos de configuração são armazenados na pasta "config" do aplicativo, onde podemos encontrar arquivos como "routes.rb" para configurar as rotas, "database.yml" para configurar as conexões de banco de dados e outros arquivos relacionados à configuração do aplicativo.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, onde são armazenados os arquivos de assets (como CSS e JavaScript) do aplicativo?
A: Os arquivos de assets são armazenados na pasta "public" do aplicativo.
A: Os arquivos de assets são armazenados na pasta "app/assets" do aplicativo.
A: Os arquivos de assets são armazenados na pasta "assets" do aplicativo.
CA: Os arquivos de assets são armazenados na pasta "app/assets" do aplicativo, onde podemos encontrar subpastas para os diferentes tipos de assets, como "stylesheets" para arquivos CSS e "javascripts" para arquivos JavaScript. Esses assets são pré-compilados e servidos pelo Rails automaticamente.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é um helper?
A: Um helper em Ruby on Rails é uma classe que auxilia o desenvolvimento de controladores.
A: Um helper em Ruby on Rails é uma biblioteca de terceiros que adiciona recursos extras ao aplicativo.
A: Um helper em Ruby on Rails é um módulo que contém métodos que podem ser usados nas views para auxiliar na geração de HTML dinâmico.
CA: Um helper em Ruby on Rails é um módulo que contém métodos que podem ser usados nas views para auxiliar na geração de HTML dinâmico e outras tarefas específicas da interface do usuário.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é um asset pipeline?
A: Um asset pipeline em Ruby on Rails é uma forma de proteger os assets do aplicativo contra ataques cibernéticos.
A: Um asset pipeline em Ruby on Rails é uma funcionalidade que otimiza e pré-compila os assets do aplicativo, como CSS e JavaScript, para melhorar o desempenho.
A: Um asset pipeline em Ruby on Rails é um servidor web que hospeda os assets do aplicativo.
CA: Um asset pipeline em Ruby on Rails é uma funcionalidade que otimiza e pré-compila os assets do aplicativo, como CSS e JavaScript, para melhorar o desempenho e a eficiência da entrega dos assets ao navegador.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é uma rota com recursos (resources)?
A: Uma rota com recursos é uma rota que permite criar, ler, atualizar e deletar recursos em um único mapeamento de URL.
A: Uma rota com recursos é uma rota que requer autenticação antes de ser acessada.
A: Uma rota com recursos é uma rota que redireciona automaticamente para outra página.
CA: Uma rota com recursos (resources) em Ruby on Rails é uma rota que mapeia automaticamente uma série de URLs para ações CRUD (Create, Read, Update, Delete) em um controlador, facilitando a criação de rotas para manipulação de recursos no aplicativo.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é uma sessão (session)?
A: Uma sessão é uma conexão de banco de dados que armazena informações temporárias.
A: Uma sessão é uma forma de autenticação de usuário no aplicativo.
A: Uma sessão é uma forma de armazenar informações entre as requisições do usuário, geralmente usando cookies para manter o estado da aplicação.
CA: Em Ruby on Rails, uma sessão (session) é uma forma de armazenar informações entre as requisições do usuário, geralmente usando cookies ou armazenamento no lado do servidor para manter o estado da aplicação, permitindo que dados sejam persistidos e acessíveis durante a navegação do usuário no aplicativo.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é um flash message?
A: Um flash message é uma mensagem exibida na tela que requer uma ação do usuário para ser fechada.
A: Um flash message é uma forma de notificar o usuário sobre o status de uma operação no aplicativo.
A: Um flash message é uma mensagem exibida na tela por um curto período e desaparece automaticamente.
CA: Em Ruby on Rails, um flash message é uma mensagem exibida na tela por um curto período, geralmente após uma ação no aplicativo (como criar, editar ou excluir um recurso). Essas mensagens podem ser usadas para notificar o usuário sobre o status de uma operação ou fornecer feedback sobre a ação realizada.

S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos exibir um flash message para o usuário?
A: Utilizando o método "flash_message" no controlador.
A: Utilizando o método "flash" no controlador e passando a mensagem como argumento.
A: Utilizando o método "display_flash" na view.
CA: Utilizando o método "flash" no controlador e passando a mensagem como argumento. Por exemplo, para exibir uma mensagem de sucesso, usamos "flash[:success] = 'Mensagem de sucesso!'", e na view, podemos acessar essa mensagem usando "flash[:success]".

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby, qual gem é frequentemente utilizada para a manipulação de bancos de dados relacionais?
A: "db-connect"
A: "sql-gem"
A: "activerecord"
CA: "activerecord" é frequentemente utilizada para a manipulação de bancos de dados relacionais em Ruby, pois é uma ORM (Object-Relational Mapping) popular que permite interagir com o banco de dados usando objetos Ruby.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos criar um novo banco de dados para nossa aplicação?
A: Utilizando o comando "rails create_db".
A: Utilizando o comando "rails db_create".
A: Utilizando o comando "rails db:migrate".
CA: Utilizando o comando "rails db:create", que criará um novo banco de dados de acordo com as configurações definidas no arquivo "database.yml".

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, o que é um modelo (model) em relação ao banco de dados?
A: Um modelo é uma representação visual dos dados armazenados no banco de dados.
A: Um modelo é uma tabela no banco de dados que armazena os dados relacionados a um determinado conceito ou entidade do sistema.
A: Um modelo é um arquivo de configuração que define como os dados do banco de dados devem ser exibidos na interface do usuário.
CA: Em Ruby on Rails, um modelo (model) é uma classe que representa uma tabela no banco de dados e inclui métodos para acessar, manipular e validar os dados associados a essa tabela.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos criar um novo modelo juntamente com a migração para criar a tabela correspondente no banco de dados?
A: Utilizando o comando "rails generate model" seguido do nome do modelo e os atributos desejados.
A: Utilizando o comando "rails new model" seguido do nome do modelo e os atributos desejados.
A: Utilizando o comando "rails create model" seguido do nome do modelo e os atributos desejados.
CA: Utilizando o comando "rails generate model" seguido do nome do modelo e os atributos desejados, o que criará automaticamente o arquivo de migração correspondente para criar a tabela no banco de dados.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos executar as migrações para atualizar o banco de dados de acordo com as alterações nos modelos?
A: Utilizando o comando "rails db:apply_migrations".
A: Utilizando o comando "rails db:update".
A: Utilizando o comando "rails db:migrate".
CA: Utilizando o comando "rails db:migrate", que executará as migrações pendentes e atualizará o banco de dados de acordo com as alterações nos modelos.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos criar registros (dados) em uma tabela do banco de dados usando um modelo?
A: Utilizando o método "Model.create" passando os atributos como argumento.
A: Utilizando o método "Model.new" seguido do método "save" para salvar o registro no banco de dados.
A: Utilizando o método "Model.insert" passando os atributos como argumento.
CA: Utilizando o método "Model.create" passando os atributos como argumento, o que criará um novo registro na tabela associada ao modelo no banco de dados.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos consultar registros (dados) em uma tabela do banco de dados usando um modelo?
A: Utilizando o método "Model.query" passando uma string SQL como argumento.
A: Utilizando o método "Model.all" para retornar todos os registros da tabela.
A: Utilizando o método "Model.find" passando o ID do registro desejado como argumento.
CA: Utilizando o método "Model.all" para retornar todos os registros da tabela associada ao modelo, ou utilizando o método "Model.find" passando o ID do registro desejado como argumento para buscar um registro específico.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos atualizar registros (dados) em uma tabela do banco de dados usando um modelo?
A: Utilizando o método "Model.update" passando o ID do registro e os atributos atualizados como argumento.
A: Utilizando o método "Model.modify" passando o ID do registro e os atributos atualizados como argumento.
A: Utilizando o método "Model.edit" passando o ID do registro e os atributos atualizados como argumento.
CA: Utilizando o método "Model.update" passando o ID do registro e os atributos atualizados como argumento, o que atualizará o registro correspondente na tabela associada ao modelo no banco de dados.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos excluir registros (dados) de uma tabela do banco de dados usando um modelo?
A: Utilizando o método "Model.delete" passando o ID do registro como argumento.
A: Utilizando o método "Model.remove" passando o ID do registro como argumento.
A: Utilizando o método "Model.destroy" passando o ID do registro como argumento.
CA: Utilizando o método "Model.destroy" passando o ID do registro como argumento, o que excluirá o registro correspondente na tabela associada ao modelo no banco de dados.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos realizar consultas mais complexas usando um modelo?
A: Utilizando o método "Model.query" passando uma string SQL personalizada como argumento.
A: Utilizando o método "Model.custom" passando uma string SQL personalizada como argumento.
A: Utilizando o método "Model.where" passando condições de busca como argumento.
CA: Utilizando o método "Model.where" passando condições de busca como argumento, o que permite realizar consultas mais complexas com filtros, ordenações e outras condições específicas para recuperar os registros desejados do banco de dados.

S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos realizar operações de agregação, como soma ou média, em uma coluna do banco de dados usando um modelo?
A: Utilizando o método "Model.aggregate" passando a operação desejada e o nome da coluna como argumentos.
A: Utilizando o método "Model.sum" passando o nome da coluna como argumento.
A: Utilizando o método "Model.calculate" passando a operação desejada e o nome da coluna como argumentos.
CA: Utilizando o método "Model.sum" passando o nome da coluna como argumento, o que calculará a soma dos valores da coluna especificada do banco de dados e retornará o resultado. Outras operações de agregação como média, máximo, mínimo, etc., também podem ser realizadas usando métodos apropriados do ActiveRecord.

S: Testes Automatizados com RSpec
Q: O que é o RSpec?
A: RSpec é uma biblioteca de testes automatizados para Ruby.
A: RSpec é um framework de desenvolvimento web em Ruby.
A: RSpec é uma linguagem de programação baseada em Ruby.
CA: RSpec é uma biblioteca de testes automatizados para Ruby que permite escrever testes de comportamento em uma linguagem natural, tornando-os mais legíveis e expressivos.

S: Testes Automatizados com RSpec
Q: Quais são os tipos principais de testes que podemos escrever com o RSpec?
A: Testes de unidade e testes de integração.
A: Testes de desempenho e testes de segurança.
A: Testes de interface e testes de usabilidade.
CA: Testes de unidade, testes de integração e testes de aceitação (também conhecidos como testes de comportamento) são os tipos principais de testes que podemos escrever com o RSpec.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos descrever um comportamento que desejamos testar?
A: Utilizando o método "test" seguido de uma descrição em forma de string.
A: Utilizando o método "describe" seguido de uma descrição em forma de string.
A: Utilizando o método "behavior" seguido de uma descrição em forma de string.
CA: Utilizando o método "describe" seguido de uma descrição em forma de string, que é usado para descrever o comportamento que estamos testando.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos especificar uma expectativa (assertion) em relação ao comportamento do código testado?
A: Utilizando o método "check" seguido de uma condição.
A: Utilizando o método "expect" seguido de uma condição.
A: Utilizando o método "assert" seguido de uma condição.
CA: Utilizando o método "expect" seguido de uma condição e o método "to" ou "not_to" para especificar a expectativa em relação ao comportamento do código testado.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos agrupar exemplos de testes relacionados?
A: Utilizando o método "group" seguido de uma descrição em forma de string.
A: Utilizando o método "context" seguido de uma descrição em forma de string.
A: Utilizando o método "scenario" seguido de uma descrição em forma de string.
CA: Utilizando o método "context" seguido de uma descrição em forma de string, que é usado para agrupar exemplos de testes relacionados e fornecer um contexto para esses testes.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos definir o código que será testado em um exemplo de teste?
A: Utilizando o método "given" seguido do código a ser testado.
A: Utilizando o método "test" seguido do código a ser testado.
A: Utilizando o método "it" seguido do código a ser testado.
CA: Utilizando o método "it" seguido do código a ser testado, que é usado para definir o exemplo de teste e o comportamento esperado.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos executar os testes definidos?
A: Utilizando o comando "run rspec" no terminal.
A: Utilizando o comando "execute rspec" no terminal.
A: Utilizando o comando "rspec" seguido do nome do arquivo de testes.
CA: Utilizando o comando "rspec" seguido do nome do arquivo de testes ou da pasta que contém os arquivos de testes, que executará os testes definidos usando o RSpec.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos criar objetos simulados (mocks) para testar o comportamento de uma classe?
A: Utilizando o método "fake" seguido do nome da classe.
A: Utilizando o método "create_mock" seguido do nome da classe.
A: Utilizando o método "double" seguido do nome da classe.
CA: Utilizando o método "double" seguido do nome da classe, que é usado para criar um objeto simulado (mock) que representa a classe real e permite testar o comportamento esperado.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos verificar se um método de um objeto simulado foi chamado durante o teste?
A: Utilizando o método "verify" seguido do nome do método.
A: Utilizando o método "expect" seguido do nome do método.
A: Utilizando o método "check" seguido do nome do método.
CA: Utilizando o método "expect" seguido do objeto simulado e o método "to" ou "not_to", seguido do nome do método, que é usado para verificar se o método foi chamado (ou não) durante o teste.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos testar exceções (errors) que são levantadas durante a execução do código testado?
A: Utilizando o método "raise_error" seguido do tipo de exceção.
A: Utilizando o método "catch_exception" seguido do tipo de exceção.
A: Utilizando o método "expect" seguido do tipo de exceção.
CA: Utilizando o método "expect" seguido do código que levanta a exceção e o método "to" ou "not_to", seguido de "raise_error(TipoDeExceção)", que é usado para testar exceções que são levantadas durante a execução do código testado.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos verificar se um objeto possui determinado atributo ou método?
A: Utilizando o método "has_attribute" seguido do nome do atributo ou método.
A: Utilizando o método "check_attribute" seguido do nome do atributo ou método.
A: Utilizando o método "expect" seguido do nome do atributo ou método.
CA: Utilizando o método "expect" seguido do objeto e o método "to" ou "not_to", seguido de "respond_to(:atributo_ou_método)", que é usado para verificar se o objeto possui determinado atributo ou método.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos executar um bloco de código antes de cada exemplo de teste?
A: Utilizando o método "before" seguido do bloco de código.
A: Utilizando o método "pre_test" seguido do bloco de código.
A: Utilizando o método "run_before" seguido do bloco de código.
CA: Utilizando o método "before" seguido do bloco de código, que é usado para executar um bloco de código antes de cada exemplo de teste, permitindo configurar o ambiente necessário para o teste.

S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos executar um bloco de código após cada exemplo de teste?
A: Utilizando o método "after" seguido do bloco de código.
A: Utilizando o método "post_test" seguido do bloco de código.
A: Utilizando o método "run_after" seguido do bloco de código.
CA: Utilizando o método "after" seguido do bloco de código, que é usado para executar um bloco de código após cada exemplo de teste, permitindo limpar recursos ou realizar ações de pós-teste.

S: Boas Práticas de Programação em Ruby
Q: Qual é a convenção de nomenclatura para nomear variáveis em Ruby?
A: Variáveis devem ser nomeadas em letras maiúsculas.
A: Variáveis devem ser nomeadas em letras minúsculas.
A: Variáveis devem ser nomeadas usando camelCase.
CA: Variáveis devem ser nomeadas em letras minúsculas, usando snake_case, ou seja, separando palavras com underscores.

S: Boas Práticas de Programação em Ruby
Q: O que é o princípio DRY (Don't Repeat Yourself) em Ruby?
A: É a prática de sempre repetir o código para garantir sua funcionalidade.
A: É a prática de nunca repetir o código para evitar bugs.
A: É a prática de eliminar duplicação de código, utilizando abstrações e reutilização de código.
CA: É a prática de eliminar duplicação de código, utilizando abstrações e reutilização de código sempre que possível, o que torna o código mais limpo, eficiente e fácil de manter.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos comentar uma única linha de código?
A: Utilizando a sintaxe /* comentário */.
A: Utilizando a sintaxe # comentário.
A: Utilizando a sintaxe <!-- comentário -->.
CA: Utilizando a sintaxe # comentário, onde tudo após o símbolo "#" na mesma linha é considerado um comentário e será ignorado pelo interpretador Ruby.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos comentar múltiplas linhas de código?
A: Utilizando a sintaxe /* comentário */.
A: Utilizando a sintaxe # comentário.
A: Utilizando a sintaxe <!-- comentário -->.
CA: Em Ruby, não existe uma sintaxe específica para comentar múltiplas linhas de código de uma só vez. É necessário adicionar o símbolo "#" em cada linha que deseja comentar.

S: Boas Práticas de Programação em Ruby
Q: Qual é a diferença entre um método com "!" no final do nome e o mesmo método sem "!"?
A: Não há diferença, o "!" é apenas uma convenção de nomenclatura.
A: O método com "!" realiza a operação de forma mais segura e com tratamento de erros.
A: O método com "!" indica que ele pode modificar o objeto receptor, enquanto o método sem "!" não modifica o objeto original.
CA: O método com "!" indica que ele pode modificar o objeto receptor e pode ser mais perigoso ou imprevisível, enquanto o método sem "!" não modifica o objeto original e é geralmente mais seguro e previsível.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos criar uma cópia rasa (shallow copy) de um array?
A: Utilizando o método clone.
A: Utilizando o método deep_copy.
A: Utilizando o método shallow_copy.
CA: Utilizando o método clone, que cria uma cópia rasa do array, ou seja, os elementos do array são copiados, mas se o array contiver objetos, esses objetos serão compartilhados entre o array original e a cópia.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos criar uma cópia profunda (deep copy) de um array?
A: Utilizando o método deep_copy.
A: Utilizando o método shallow_copy.
A: Utilizando o método clone.
CA: Em Ruby, não existe um método padrão para criar uma cópia profunda de um array. É necessário implementar uma função personalizada ou utilizar alguma biblioteca externa para realizar uma cópia profunda de um array que contenha objetos.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, o que é um símbolo (symbol)?
A: Um símbolo é uma string imutável que representa um valor ou nome em uma tabela de símbolos.
A: Um símbolo é uma variável especial que não pode ser alterada.
A: Um símbolo é uma função especial que retorna um valor específico.
CA: Um símbolo é uma string imutável que representa um valor ou nome em uma tabela de símbolos, sendo frequentemente utilizado como chaves de hashes ou para identificar constantes.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, o que é o método "attr_accessor" e para que serve?
A: "attr_accessor" é um método para definir getters e setters de atributos de uma classe.
A: "attr_accessor" é um método para definir atributos privados em uma classe.
A: "attr_accessor" é um método para definir métodos de classe em Ruby.
CA: "attr_accessor" é um método para definir getters (métodos de leitura) e setters (métodos de escrita) de atributos de instância em uma classe de forma mais concisa. Ele cria automaticamente os métodos getter e setter para os atributos especificados, permitindo o acesso e a modificação desses atributos.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, qual é a diferença entre uma classe e um módulo?
A: Uma classe é uma coleção de métodos e variáveis, enquanto um módulo é uma coleção de constantes e funções.
A: Uma classe pode ser instanciada para criar objetos, enquanto um módulo não pode ser instanciado.
A: Uma classe pode herdar de outras classes, enquanto um módulo não pode herdar de outras classes.
CA: Em Ruby, uma classe é uma estrutura que define um objeto e pode ser instanciada para criar objetos, enquanto um módulo é uma coleção de métodos, constantes e variáveis que pode ser incluída em classes para estender suas funcionalidades, mas não pode ser instanciado diretamente.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos incluir um módulo em uma classe?
A: Utilizando o método "include" seguido do nome do módulo.
A: Utilizando o método "extend" seguido do nome do módulo.
A: Utilizando o método "add_module" seguido do nome do módulo.
CA: Utilizando o método "include" seguido do nome do módulo, que permite incluir os métodos, constantes e variáveis do módulo na classe, estendendo suas funcionalidades.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos definir uma constante em uma classe?
A: Utilizando o método "set_constant" seguido do nome da constante.
A: Utilizando o método "constant" seguido do nome da constante.
A: Utilizando o método "CONSTANT" seguido do nome da constante.
CA: Em Ruby, as constantes são definidas utilizando a sintaxe de nome em maiúsculas. Por exemplo, para definir uma constante chamada "PI", basta escrever "PI = 3.14159" dentro da classe.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos acessar uma constante definida em uma classe?
A: Utilizando o método "get_constant" seguido do nome da constante.
A: Utilizando o método "CONSTANT" seguido do nome da constante.
A: Utilizando o método "constant" seguido do nome da constante.
CA: Para acessar uma constante definida em uma classe, basta utilizar o nome da classe seguido de "::" e o nome da constante. Por exemplo, se a classe é "Math" e a constante é "PI", pode-se acessá-la como "Math::PI".

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos definir um método de classe (método estático)?
A: Utilizando o método "class_method" seguido do nome do método.
A: Utilizando o método "static_method" seguido do nome do método.
A: Utilizando o método "self.method" seguido do nome do método.
CA: Em Ruby, um método de classe é definido utilizando a palavra-chave "self" seguida de um ponto e o nome do método. Por exemplo, para definir um método de classe chamado "calculate", basta escrever "def self.calculate" dentro da classe.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, o que é um bloco?
A: Um bloco é um trecho de código que é executado apenas uma vez.
A: Um bloco é um trecho de código delimitado pelas palavras-chave "begin" e "end".
A: Um bloco é um trecho de código delimitado pelas chaves "{" e "}" ou pelas palavras-chave "do" e "end", que pode ser passado como argumento para um método.
CA: Em Ruby, um bloco é um trecho de código delimitado pelas chaves "{" e "}" ou pelas palavras-chave "do" e "end". Blocos podem ser passados como argumentos para métodos e são frequentemente utilizados com métodos que aceitam blocos, como os de iteração.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, qual é a diferença entre um bloco e uma lambda (proc)?
A: Não há diferença, um bloco e uma lambda são a mesma coisa.
A: Um bloco é uma função anônima e uma lambda é uma função nomeada.
A: Blocos não são objetos, enquanto lambdas são objetos Proc.
CA: Em Ruby, um bloco é uma função anônima que não é um objeto e é passado implicitamente para um método, enquanto uma lambda (ou proc) é um objeto que representa uma função anônima e pode ser armazenada em uma variável ou passada explicitamente para um método.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, o que é uma exceção (exception)?
A: Uma exceção é um erro de sintaxe no código que impede sua execução.
A: Uma exceção é um bloco de código que é executado quando ocorre um erro.
A: Uma exceção é um objeto que representa um erro ou condição excepcional que ocorreu durante a execução do código.
CA: Em Ruby, uma exceção é um objeto que representa um erro ou condição excepcional que ocorreu durante a execução do código. Quando um erro ocorre, uma exceção é lançada (thrown) e o programa pode capturá-la (catch) para tratá-la apropriadamente.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos lidar com exceções usando o bloco "begin" e "rescue"?
A: Utilizando o bloco "try" e "catch".
A: Utilizando o bloco "try" e "except".
A: Utilizando o bloco "begin" e "rescue".
CA: Utilizando o bloco "begin" e "rescue", onde o código que pode gerar uma exceção é colocado dentro do bloco "begin", e o bloco "rescue" é usado para capturar a exceção e executar um tratamento específico caso ela ocorra.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, qual é a forma recomendada de lidar com exceções?
A: Sempre capturar todas as exceções e exibir mensagens de erro detalhadas.
A: Sempre ignorar as exceções, pois elas são raras e não afetam o funcionamento do programa.
A: Capturar apenas as exceções específicas que podem ser tratadas e deixar outras exceções não capturadas para o sistema lidar.
CA: A forma recomendada de lidar com exceções em Ruby é capturar apenas as exceções específicas que podem ser tratadas e deixar outras exceções não capturadas para o sistema lidar. Isso permite tratar os erros de forma adequada e garantir que o programa não pare de funcionar inesperadamente.

S: Boas Práticas de Programação em Ruby
Q: Em Ruby, qual é a importância de usar a herança de classes?
A: A herança de classes permite que uma classe tenha vários construtores.
A: A herança de classes permite que uma classe herde os métodos e atributos de outra classe, facilitando a reutilização de código.
A: A herança de classes permite que uma classe seja declarada como privada e não seja acessível por outras classes.
CA: A herança de classes permite que uma classe herde os métodos e atributos de outra classe, facilitando a reutilização de código e permitindo criar uma hierarquia de classes, onde as subclasses herdam o comportamento da classe pai (superclasse) e podem adicionar comportamentos específicos. Isso promove o princípio do DRY (Don't Repeat Yourself) e torna o código mais organizado e modular.

S: Lógica da Programação em Ruby
Q: O que é lógica de programação?
A: Lógica de programação é a forma como os algoritmos e programas são estruturados para resolver problemas de maneira sequencial e lógica.
A: Lógica de programação é a capacidade de escrever códigos complexos sem erros.
A: Lógica de programação é o uso de bibliotecas e frameworks para desenvolver programas em Ruby.
CA: Lógica de programação é a habilidade de organizar, estruturar e ordenar as instruções em um algoritmo de forma lógica e coerente, a fim de resolver um problema específico.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos declarar uma variável e atribuir um valor a ela?
A: Utilizando a palavra-chave "let" seguida do nome da variável e o valor atribuído.
A: Utilizando a palavra-chave "var" seguida do nome da variável e o valor atribuído.
A: Utilizando o símbolo "=" seguido do nome da variável e o valor atribuído.
CA: Em Ruby, podemos declarar uma variável simplesmente atribuindo um valor a ela, como por exemplo: "nome = 'João'".

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos exibir uma mensagem na tela?
A: Utilizando o método "print" seguido da mensagem entre aspas.
A: Utilizando o método "puts" seguido da mensagem entre aspas.
A: Utilizando o método "display" seguido da mensagem entre aspas.
CA: Em Ruby, podemos exibir uma mensagem na tela utilizando o método "puts" seguido da mensagem entre aspas, por exemplo: "puts 'Olá, mundo!'". O método "puts" também adiciona uma quebra de linha após exibir a mensagem.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos ler um valor digitado pelo usuário?
A: Utilizando o método "input" seguido de uma variável para armazenar o valor digitado.
A: Utilizando o método "gets" seguido de uma variável para armazenar o valor digitado.
A: Utilizando o método "read" seguido de uma variável para armazenar o valor digitado.
CA: Em Ruby, podemos ler um valor digitado pelo usuário utilizando o método "gets" seguido de uma variável para armazenar o valor, por exemplo: "nome = gets.chomp".

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos converter uma string para um número inteiro?
A: Utilizando o método "to_i" após a string.
A: Utilizando o método "int" após a string.
A: Utilizando o método "parse_int" após a string.
CA: Em Ruby, podemos converter uma string para um número inteiro utilizando o método "to_i", por exemplo: "numero = '10'.to_i".

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos converter um número inteiro para uma string?
A: Utilizando o método "to_string" após o número inteiro.
A: Utilizando o método "parse_string" após o número inteiro.
A: Utilizando o método "to_s" após o número inteiro.
CA: Em Ruby, podemos converter um número inteiro para uma string utilizando o método "to_s", por exemplo: "numero = 10.to_s".

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar estruturas condicionais para tomar decisões no código?
A: Utilizando o método "if" para verificar se uma condição é verdadeira e executar um bloco de código.
A: Utilizando o método "switch" para avaliar múltiplas condições e executar o código correspondente.
A: Utilizando o método "check" para verificar a validade de uma expressão matemática.
CA: Em Ruby, podemos usar estruturas condicionais para tomar decisões utilizando o método "if" para verificar se uma condição é verdadeira e, caso seja, executar um bloco de código específico.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "if..else" para tomar decisões alternativas?
A: Utilizando o método "if" seguido do bloco de código a ser executado se a condição for verdadeira, e o método "else" seguido do bloco de código a ser executado se a condição for falsa.
A: Utilizando o método "if" seguido do bloco de código a ser executado se a condição for falsa, e o método "else" seguido do bloco de código a ser executado se a condição for verdadeira.
A: Utilizando o método "condition" seguido do bloco de código a ser executado se a condição for verdadeira, e o método "otherwise" seguido do bloco de código a ser executado se a condição for falsa.
CA: Em Ruby, podemos usar a estrutura "if..else" para tomar decisões alternativas, onde o bloco de código após o "if" é executado se a condição for verdadeira, e o bloco de código após o "else" é executado se a condição for falsa.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "if..elsif..else" para tomar decisões múltiplas?
A: Utilizando o método "if" seguido do bloco de código a ser executado se a primeira condição for verdadeira, o método "elsif" seguido do bloco de código a ser executado se a segunda condição for verdadeira, e o método "else" seguido do bloco de código a ser executado se nenhuma das condições anteriores for verdadeira.
A: Utilizando o método "switch" seguido de várias condições e os blocos de código a serem executados para cada uma das condições.
A: Utilizando o método "check" seguido de várias expressões matemáticas e os blocos de código a serem executados para cada uma das expressões.
CA: Em Ruby, podemos usar a estrutura "if..elsif..else" para tomar decisões múltiplas, onde o bloco de código após o "if" é executado se a primeira condição for verdadeira, o bloco de código após o "elsif" é executado se a segunda condição for verdadeira, e o bloco de código após o "else" é executado se nenhuma das condições anteriores for verdadeira.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar operadores lógicos (AND, OR, NOT) para combinar condições?
A: Utilizando os operadores "&" (AND), "|" (OR) e "!" (NOT).
A: Utilizando as palavras-chave "AND", "OR" e "NOT".
A: Utilizando os operadores "&&" (AND), "||" (OR) e "!" (NOT).
CA: Em Ruby, podemos usar os operadores lógicos "&&" (AND), "||" (OR) e "!" (NOT) para combinar condições em estruturas condicionais e avaliar múltiplas expressões lógicas.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "unless" para fazer uma verificação negativa?
A: Utilizando o método "unless" seguido da condição e do bloco de código a ser executado se a condição for falsa.
A: Utilizando o método "not" seguido da condição e do bloco de código a ser executado se a condição for verdadeira.
A: Utilizando o método "if" seguido da condição negada (com o operador "!" antes da condição) e do bloco de código a ser executado se a condição for falsa.
CA: Em Ruby, podemos usar a estrutura "unless" para fazer uma verificação negativa, onde o bloco de código após o "unless" é executado se a condição for falsa.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar estruturas de repetição para repetir um bloco de código várias vezes?
A: Utilizando o método "loop" para criar um loop infinito.
A: Utilizando o método "for" para iterar sobre uma coleção de elementos.
A: Utilizando o método "while" para repetir um bloco de código enquanto a condição for verdadeira.
CA: Em Ruby, podemos usar o método "while" para repetir um bloco de código enquanto a condição especificada for verdadeira.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar o método "times" para executar um bloco de código um número específico de vezes?
A: Utilizando o método "times" seguido do número de repetições e do bloco de código a ser executado.
A: Utilizando o método "repeat" seguido do número de repetições e do bloco de código a ser executado.
A: Utilizando o método "for" seguido do número de repetições e do bloco de código a ser executado.
CA: Em Ruby, podemos usar o método "times" para executar um bloco de código um número específico de vezes, como por exemplo: "5.times { puts 'Olá!' }".

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar o método "each" para iterar sobre uma coleção de elementos?
A: Utilizando o método "each" seguido da coleção e do bloco de código a ser executado para cada elemento.
A: Utilizando o método "for" seguido da coleção e do bloco de código a ser executado para cada elemento.
A: Utilizando o método "iterate" seguido da coleção e do bloco de código a ser executado para cada elemento.
CA: Em Ruby, podemos usar o método "each" para iterar sobre uma coleção de elementos, como por exemplo: "[1, 2, 3].each { |numero| puts numero }".

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "for..in" para iterar sobre uma coleção de elementos?
A: Utilizando a estrutura "for elemento in colecao" seguida do bloco de código a ser executado para cada elemento.
A: Utilizando a estrutura "foreach elemento in colecao" seguida do bloco de código a ser executado para cada elemento.
A: Utilizando a estrutura "each elemento in colecao" seguida do bloco de código a ser executado para cada elemento.
CA: Em Ruby, a estrutura "for..in" não é a forma mais recomendada de iterar sobre uma coleção de elementos. A forma mais idiomática em Ruby é usar o método "each", como mencionado anteriormente.

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar o método "upto" para iterar sobre um intervalo de valores?
A: Utilizando o método "upto" seguido do valor inicial e final do intervalo e do bloco de código a ser executado para cada valor.
A: Utilizando o método "from" seguido do valor inicial e do método "to" seguido do valor final do intervalo e do bloco de código a ser executado para cada valor.
A: Utilizando o método "range" seguido dos valores inicial e final do intervalo e do bloco de código a ser executado para cada valor.
CA: Em Ruby, podemos usar o método "upto" para iterar sobre um intervalo de valores, como por exemplo: "1.upto(5) { |numero| puts numero }".

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "times" para criar um loop de repetição com um contador?
A: Utilizando o método "times" seguido do bloco de código a ser executado e um contador externo que é incrementado a cada iteração.
A: Utilizando o método "times" seguido do bloco de código a ser executado, e um contador interno que é automaticamente incrementado a cada iteração.
A: Utilizando o método "times" seguido do bloco de código a ser executado, e um contador que é declarado e incrementado manualmente dentro do bloco.
CA: Em Ruby, podemos usar o método "times" para criar um loop de repetição com um contador interno que é automaticamente incrementado a cada iteração, facilitando a repetição de um bloco de código um número específico de vezes.

S: Algoritmos em Ruby
Q: O que é um algoritmo?
A: Um algoritmo é uma sequência finita de instruções lógicas e bem definidas que descrevem a solução de um problema.
A: Um algoritmo é um conjunto de palavras-chave e símbolos usados para escrever código em uma linguagem de programação.
A: Um algoritmo é um tipo de dado usado para armazenar informações em um programa.
CA: Um algoritmo é uma sequência finita e ordenada de instruções que descrevem um processo ou solução para um problema, permitindo a realização de tarefas computacionais.

S: Algoritmos em Ruby
Q: Em Ruby, qual é a forma mais comum de representar um algoritmo?
A: Utilizando diagramas de fluxo.
A: Utilizando pseudocódigo.
A: Utilizando listas numeradas.
CA: Em Ruby, a forma mais comum de representar um algoritmo é através de pseudocódigo, que é uma forma de descrição abstrata do algoritmo, usando uma mistura de linguagem natural e elementos da linguagem de programação, para facilitar a compreensão da lógica do algoritmo antes de escrevê-lo em código real.

S: Algoritmos em Ruby
Q: Em Ruby, o que é uma variável?
A: Uma variável é um valor fixo que não pode ser alterado durante a execução do programa.
A: Uma variável é uma sequência de caracteres usada para identificar um nome ou valor.
A: Uma variável é um local de armazenamento na memória que pode conter valores que podem ser alterados durante a execução do programa.
CA: Em Ruby, uma variável é um local de armazenamento na memória que pode conter valores que podem ser alterados durante a execução do programa. Ela é identificada por um nome e pode ser utilizada para armazenar e manipular dados dentro do código.

S: Algoritmos em Ruby
Q: Em Ruby, como podemos declarar uma variável?
A: Utilizando a palavra-chave "let" seguida do nome da variável e o valor inicial.
A: Utilizando a palavra-chave "var" seguida do nome da variável e o valor inicial.
A: Utilizando o símbolo "=" seguido do nome da variável e o valor inicial.
CA: Em Ruby, podemos declarar uma variável simplesmente atribuindo um valor a ela, como por exemplo: "nome = 'Maria'".

S: Algoritmos em Ruby
Q: Em Ruby, o que é uma estrutura condicional?
A: Uma estrutura condicional é uma sequência de passos que deve ser executada várias vezes.
A: Uma estrutura condicional é uma decisão tomada em tempo de execução, com base em uma condição específica.
A: Uma estrutura condicional é uma forma de representar um algoritmo usando diagramas de fluxo.
CA: Em Ruby, uma estrutura condicional é uma forma de controlar o fluxo de execução de um programa, permitindo que um bloco de código seja executado apenas se uma condição específica for atendida.

S: Algoritmos em Ruby
Q: Em Ruby, como podemos representar uma estrutura condicional?
A: Utilizando a palavra-chave "condition" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira.
A: Utilizando a palavra-chave "if" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira.
A: Utilizando a palavra-chave "verify" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira.
CA: Em Ruby, podemos representar uma estrutura condicional utilizando a palavra-chave "if" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, por exemplo: "if idade >= 18".

S: Algoritmos em Ruby
Q: Em Ruby, como podemos representar uma estrutura condicional com uma opção alternativa?
A: Utilizando a palavra-chave "if" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, e a palavra-chave "else" seguida do bloco de código a ser executado se a condição for falsa.
A: Utilizando a palavra-chave "option" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, e a palavra-chave "alternative" seguida do bloco de código a ser executado se a condição for falsa.
A: Utilizando a palavra-chave "choose" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, e a palavra-chave "otherwise" seguida do bloco de código a ser executado se a condição for falsa.
CA: Em Ruby, podemos representar uma estrutura condicional com uma opção alternativa utilizando a palavra-chave "if" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, e a palavra-chave "else" seguida do bloco de código a ser executado se a condição for falsa, por exemplo: "if idade >= 18\n puts 'Maior de idade'\nelse\n puts 'Menor de idade'\nend".
