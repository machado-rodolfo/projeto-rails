L: Ruby
S: Introdução à Ruby e sua história
Q: Quem é o criador da linguagem de programação Ruby?
A: Yukihiro Matsumoto
A: Guido van Rossum
A: Linus Torvalds
CA: Yukihiro Matsumoto

L: Ruby
S: Introdução à Ruby e sua história
Q: Em que ano a linguagem de programação Ruby foi criada?
A: 1995
A: 2001
A: 1983
CA: 1995

L: Ruby
S: Introdução à Ruby e sua história
Q: Qual dos seguintes termos é frequentemente associado à filosofia de design da linguagem Ruby?
A: "Sempre use parênteses para chamar funções."
A: "Mantenha a simplicidade e a elegância."
A: "Evite o uso de estruturas de controle de fluxo."
CA: "Opte por múltiplos padrões de herança."

L: Ruby
S: Introdução à Ruby e sua história
Q: Quais são os dois principais objetivos do criador de Ruby ao desenvolver a linguagem?
A: Torná-la rápida e leve.
A: Torná-la altamente segura e imutável.
A: Torná-la complexa e desafiadora.
CA: Torná-la fácil de usar e produtiva para os programadores.

L: Ruby
S: Introdução à Ruby e sua história
Q: Ruby é uma linguagem de programação orientada a objetos. O que isso significa?
A: Que ela não suporta a criação de classes e objetos.
A: Que ela não permite o uso de herança e polimorfismo.
A: Que tudo em Ruby é um objeto, incluindo números e strings.
CA: Que o paradigma de programação utilizado é baseado na interação entre objetos.

L: Ruby
S: Introdução à Ruby e sua história
Q: Em qual país a linguagem de programação Ruby foi criada?
A: Estados Unidos
A: Japão
A: Alemanha
CA: Japão

L: Ruby
S: Introdução à Ruby e sua história
Q: Qual é o significado do nome "Ruby" para a linguagem de programação?
A: É uma homenagem ao famoso músico de jazz Django Reinhardt.
A: É uma referência à pedra preciosa, simbolizando a raridade e a beleza da linguagem.
A: É um acrônimo para "Real-time Utility and Binding for You."
CA: É uma homenagem ao computador "Ruby" usado por Yukihiro Matsumoto quando era criança.

L: Ruby
S: Introdução à Ruby e sua história
Q: Ruby é influenciada por quais outras linguagens de programação?
A: Apenas Python.
A: Apenas C++.
A: Apenas Java.
CA: Perl, Smalltalk, Eiffel, Ada e Lisp.

L: Ruby
S: Introdução à Ruby e sua história
Q: Qual é o lema da linguagem Ruby, frequentemente citado por seu criador?
A: "Menos é mais."
A: "Embrace, extend, and extinguish."
A: "Com grandes poderes vêm grandes responsabilidades."
CA: "A linguagem da simplicidade e da diversão."

L: Ruby
S: Introdução à Ruby e sua história
Q: Qual é a extensão de arquivos Ruby comumente usada para scripts?
A: .rtf
A: .xml
A: .rb
CA: .rb

L: Ruby
S: Instalação do ambiente Ruby
Q: Qual é o sistema operacional recomendado para a instalação do ambiente Ruby?
A: Windows 10
A: Fedora Linux
A: macOS Big Sur
CA: Qualquer sistema operacional que suporte a instalação do Ruby.

L: Ruby
S: Instalação do ambiente Ruby
Q: Qual é a ferramenta mais comum para gerenciar as diferentes versões do Ruby em um ambiente de desenvolvimento?
A: RVV (Ruby Version Virtual)
A: rbenv
A: RubyGems
CA: RVM (Ruby Version Manager)

L: Ruby
S: Instalação do ambiente Ruby
Q: Como podemos verificar se o Ruby está instalado corretamente em nosso sistema?
A: Executando o comando "ruby --version" no terminal.
A: Verificando a presença do arquivo "ruby.exe" na pasta de instalação.
A: Digitando "ruby -check" no prompt de comando.
CA: Executando o comando "ruby -v" no terminal.

L: Ruby
S: Instalação do ambiente Ruby
Q: Além do Ruby, quais outras ferramentas são recomendadas para instalar como parte do ambiente de desenvolvimento Ruby?
A: Node.js e npm
A: Apache e MySQL
A: Visual Studio Code
CA: RubyGems e Bundler

L: Ruby
S: Instalação do ambiente Ruby
Q: Qual é a maneira mais comum de instalar o Ruby em sistemas operacionais baseados em Unix, como Linux e macOS?
A: Usando o gerenciador de pacotes "apt-get" no Linux e o Homebrew no macOS.
A: Baixando o instalador do site oficial do Ruby e executando-o manualmente.
A: Utilizando o gerenciador de pacotes "yum" no Linux e o MacPorts no macOS.
CA: Usando o gerenciador de versões Ruby, como RVM ou rbenv.

L: Ruby
S: Instalação do ambiente Ruby
Q: O que é o RubyGems?
A: É uma biblioteca do Ruby para trabalhar com matemática avançada.
A: É uma estrutura de testes automatizados para Ruby.
A: É um gerenciador de pacotes para instalar bibliotecas e gemas em Ruby.
CA: É um sistema de gerenciamento de bibliotecas e pacotes para a linguagem de programação Ruby.

L: Ruby
S: Instalação do ambiente Ruby
Q: O que é o Bundler em Ruby?
A: É uma gem usada para criar interfaces gráficas para aplicações Ruby.
A: É uma ferramenta para compilar código Ruby em código de máquina.
A: É uma biblioteca que oferece suporte a testes de unidade e integração em Ruby.
CA: É uma gem usada para gerenciar as dependências de um projeto Ruby e garantir que as gemas corretas sejam instaladas.

L: Ruby
S: Instalação do ambiente Ruby
Q: Qual é a versão mínima do Ruby recomendada para a maioria dos projetos atualmente?
A: Ruby 1.9
A: Ruby 2.0
A: Ruby 2.5
CA: Ruby 2.7

L: Ruby
S: Instalação do ambiente Ruby
Q: O que é um interpretador Ruby?
A: É um software que permite executar comandos e scripts escritos em Ruby.
A: É uma ferramenta usada para analisar a sintaxe de código Ruby em busca de erros.
A: É um programa que compila código Ruby em código de máquina para melhor desempenho.
CA: É um componente do ambiente Ruby que traduz o código fonte Ruby para instruções que o computador pode entender e executar.

L: Ruby
S: Instalação do ambiente Ruby
Q: Além do RubyGems, quais outras fontes são comuns para encontrar gemas (gems) de terceiros para uso em projetos Ruby?
A: GitHub e Bitbucket
A: RubyForge e RubyCentral
A: SourceForge e GitLab
CA: RubyGems.org e GitHub

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Em Ruby, como declaramos uma variável?
A: utilizando a palavra-chave "var"
A: utilizando a palavra-chave "let"
A: utilizando a palavra-chave "variable"
CA: utilizando a palavra-chave "def"

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Ruby é uma linguagem de tipagem estática ou dinâmica?
A: Tipagem estática
A: Tipagem dinâmica
A: Tipagem forte
CA: Tipagem dinâmica

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Qual é o símbolo usado para iniciar um comentário de uma linha em Ruby?
A: //
A: /*
A: #
CA: #

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Em Ruby, todas as variáveis precisam ser declaradas antes de serem utilizadas?
A: Sim, sempre.
A: Sim, é necessário declará-las antes de utilizá-las.
A: Apenas se forem variáveis globais.
CA: Não, elas são criadas automaticamente quando utilizadas.

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Qual é a diferença entre uma variável local e uma variável de instância em Ruby?
A: Não há diferença, ambos os tipos de variáveis são usados da mesma forma.
A: Variáveis locais são acessíveis apenas em métodos, enquanto variáveis de instância são acessíveis em toda a classe.
A: Variáveis locais têm nomes curtos, enquanto variáveis de instância têm nomes longos.
CA: Variáveis locais têm escopo dentro de um bloco ou método, enquanto variáveis de instância têm escopo dentro de uma classe.

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Ruby é uma linguagem sensível a maiúsculas e minúsculas. Isso significa que...
A: Não é possível usar letras maiúsculas em nomes de variáveis.
A: Nomes de variáveis são tratados como palavras-chave e não podem começar com letra maiúscula.
A: Nomes de variáveis são case-insensitive, ou seja, tanto maiúsculas quanto minúsculas são tratadas como iguais.
CA: Nomes de variáveis são case-sensitive, ou seja, maiúsculas e minúsculas são distintas.

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Qual é a maneira correta de concatenar uma variável em uma string em Ruby?
A: Utilizando a função "concat" para unir a variável e a string.
A: Utilizando o operador "+" entre a variável e a string.
A: Utilizando o método "join" para combinar a variável e a string.
CA: Utilizando o operador de interpolação "#{}" dentro da string.

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Em Ruby, como verificamos o tipo de uma variável?
A: Utilizando o método "typeof"
A: Utilizando o método "type"
A: Utilizando a palavra-chave "var_type"
CA: Utilizando o método "class"

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Quais são os tipos básicos de dados em Ruby?
A: Inteiro, Decimal, e Texto
A: Integer, Float e Boolean
A: Numérico, Ponto flutuante e Caractere
CA: Integer, Float, String e Boolean

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: Como podemos criar uma constante em Ruby?
A: Utilizando a palavra-chave "let"
A: Utilizando a palavra-chave "const"
A: Colocando o símbolo ":" antes do nome da variável
CA: Colocando o símbolo "const" antes do nome da variável

L: Ruby
S: Variáveis e tipos de dados em Ruby
Q: O que é uma variável de classe em Ruby?
A: É uma variável que só pode ser acessada em uma classe filha.
A: É uma variável que só pode ser usada em métodos de classe.
A: É uma variável que só pode ser criada em tempo de execução.
CA: É uma variável que é compartilhada entre todas as instâncias de uma classe.

L: Ruby
S: Operadores e expressões em Ruby
Q: Quais são os operadores aritméticos em Ruby?
A: +, *, /, %
A: &, |, !
A: <, >, <=, >=
CA: +, -, *, /, %

L: Ruby
S: Operadores e expressões em Ruby
Q: Qual é o resultado da expressão em Ruby: 5 + 3 * 2?
A: 10
A: 16
A: 26
CA: 11

L: Ruby
S: Operadores e expressões em Ruby
Q: Quais são os operadores de atribuição em Ruby?
A: =, ==, ===
A: =>, <=, >=
A: + =, - =, * =
CA: =, +=, -=, *=, /=, %=

L: Ruby
S: Operadores e expressões em Ruby
Q: O que o operador % faz em Ruby quando usado com números?
A: Realiza a multiplicação dos números.
A: Calcula o resto da divisão entre os números.
A: Eleva o primeiro número à potência do segundo número.
CA: Calcula o resto da divisão entre os números.

L: Ruby
S: Operadores e expressões em Ruby
Q: Qual é o resultado da expressão em Ruby: (8 + 4) / 2 - 3 * 2?
A: 2
A: 4
A: 8
CA: 0

L: Ruby
S: Operadores e expressões em Ruby
Q: Quais são os operadores de comparação em Ruby?
A: <>, !=, ==
A: &&, ||, !
A: <, >, <=, >=
CA: ==, !=, <, >, <=, >=

L: Ruby
S: Operadores e expressões em Ruby
Q: O que o operador "==" faz em Ruby?
A: Verifica se duas variáveis são iguais.
A: Verifica se uma variável é maior que outra.
A: Verifica se uma variável é menor que outra.
CA: Verifica se duas variáveis são iguais.

L: Ruby
S: Operadores e expressões em Ruby
Q: Quais são os operadores lógicos em Ruby?
A: AND, OR, NOT
A: &&, ||, !
A: &, |, !
CA: &&, ||, !

L: Ruby
S: Operadores e expressões em Ruby
Q: Qual é o resultado da expressão em Ruby: (10 > 5) && (3 < 2) || (4 == 4)?
A: true
A: false
A: nil
CA: true

L: Ruby
S: Operadores e expressões em Ruby
Q: O que o operador "&&" faz em Ruby?
A: Realiza a multiplicação lógica de duas expressões.
A: Realiza a divisão lógica de duas expressões.
A: Verifica se pelo menos uma das expressões é verdadeira.
CA: Realiza a conjunção lógica de duas expressões (ambas devem ser verdadeiras).

L: Ruby
S: Estruturas condicionais em Ruby
Q: Como podemos criar uma estrutura condicional simples (if) em Ruby?
A: Utilizando a palavra-chave "when"
A: Utilizando a palavra-chave "unless"
A: Utilizando a palavra-chave "case"
CA: Utilizando a palavra-chave "if"

L: Ruby
S: Estruturas condicionais em Ruby
Q: Qual é a sintaxe para criar uma estrutura condicional com múltiplas condições em Ruby?
A: if (condição1); (condição2); end
A: if (condição1) || (condição2); end
A: if (condição1) and (condição2) then; end
CA: if (condição1) && (condição2); end

L: Ruby
S: Estruturas condicionais em Ruby
Q: Em Ruby, como podemos executar um bloco de código alternativo caso a condição de uma estrutura condicional não seja atendida?
A: Utilizando a palavra-chave "alt"
A: Utilizando a palavra-chave "else"
A: Utilizando a palavra-chave "otherwise"
CA: Utilizando a palavra-chave "else"

L: Ruby
S: Estruturas condicionais em Ruby
Q: Qual é a sintaxe para criar uma estrutura condicional com múltiplas condições e blocos alternativos em Ruby?
A: if (condição1); elsif (condição2); else; end
A: if (condição1); else if (condição2); else; end
A: if (condição1); elif (condição2); else; end
CA: if (condição1); elsif (condição2); else; end

L: Ruby
S: Estruturas condicionais em Ruby
Q: Ruby possui uma estrutura condicional específica para testar múltiplas condições de forma concisa. Qual é essa estrutura?
A: if...else
A: when...case
A: unless...else
CA: case...when

L: Ruby
S: Estruturas condicionais em Ruby
Q: Qual é a sintaxe correta para utilizar a estrutura condicional "case...when" em Ruby?
A: case (variável); when valor1; when valor2; else; end
A: case (variável); when (valor1); when (valor2); else; end
A: case (variável); when: valor1, valor2, else, end
CA: case (variável); when valor1 then; when valor2 then; else; end

L: Ruby
S: Estruturas condicionais em Ruby
Q: Em Ruby, o que a estrutura condicional "unless" verifica?
A: Se a condição é verdadeira.
A: Se a condição é falsa.
A: Se a variável foi declarada.
CA: Se a condição é falsa.

L: Ruby
S: Estruturas condicionais em Ruby
Q: Qual é a diferença entre a estrutura condicional "if" e "unless" em Ruby?
A: Não há diferença, ambas funcionam da mesma maneira.
A: "If" verifica se a condição é verdadeira e "unless" verifica se a condição é falsa.
A: "If" é usado para checar múltiplas condições, enquanto "unless" é usado apenas para uma única condição.
CA: "If" verifica se a condição é verdadeira e "unless" verifica se a condição é falsa, ou seja, são opostos.

L: Ruby
S: Estruturas condicionais em Ruby
Q: Em Ruby, como podemos combinar múltiplas condições usando operadores lógicos em uma estrutura condicional?
A: Utilizando os operadores "||" e "&&"
A: Utilizando os operadores "or" e "and"
A: Utilizando os operadores "||" e "and"
CA: Utilizando os operadores "||" e "&&"

L: Ruby
S: Estruturas condicionais em Ruby
Q: É possível aninhar estruturas condicionais em Ruby?
A: Sim, mas é uma má prática de programação.
A: Sim, apenas usando a estrutura "if...else".
A: Não, Ruby não suporta aninhamento de estruturas condicionais.
CA: Sim, é possível aninhar estruturas condicionais usando "if", "elsif" e "else" dentro de outro bloco condicional.

L: Ruby
S: Estruturas condicionais em Ruby
Q: Quando devemos usar a estrutura condicional "case...when" em vez da estrutura "if...else" em Ruby?
A: Quando temos apenas uma condição para verificar.
A: Quando precisamos de múltiplas condições para testar, mas não necessariamente com blocos de código diferentes.
A: Quando temos várias condições com blocos de código diferentes para cada caso.
CA: Quando temos várias condições com blocos de código diferentes para cada caso, pois torna o código mais legível e conciso.

L: Ruby
S: Estruturas de repetição em Ruby
Q: Como podemos criar um loop que se repete até que uma determinada condição seja falsa em Ruby?
A: Utilizando a estrutura "while"
A: Utilizando a estrutura "until"
A: Utilizando a estrutura "loop"
CA: Utilizando a estrutura "while"

L: Ruby
S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar um loop "while" em Ruby?
A: while (condição) { código a ser executado }
A: while { código a ser executado } (condição)
A: (condição) { código a ser executado } while
CA: while (condição) do; código a ser executado; end

L: Ruby
S: Estruturas de repetição em Ruby
Q: Como podemos criar um loop que se repete um número específico de vezes em Ruby?
A: Utilizando a estrutura "for"
A: Utilizando a estrutura "repeat"
A: Utilizando a estrutura "each"
CA: Utilizando a estrutura "for"

L: Ruby
S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar um loop "for" em Ruby?
A: for (variável in coleção) { código a ser executado }
A: (variável in coleção) { código a ser executado } for
A: for { código a ser executado } (variável in coleção)
CA: for variável in coleção do; código a ser executado; end

L: Ruby
S: Estruturas de repetição em Ruby
Q: Qual é a diferença entre "while" e "until" em Ruby?
A: Não há diferença, ambos funcionam da mesma maneira.
A: "While" verifica se a condição é verdadeira para executar o loop, enquanto "until" verifica se a condição é falsa.
A: "While" é usado para loops com um número específico de repetições, enquanto "until" é usado para loops com condições abertas.
CA: "While" verifica se a condição é verdadeira para executar o loop, enquanto "until" verifica se a condição é falsa para executar o loop.

L: Ruby
S: Estruturas de repetição em Ruby
Q: Como podemos parar a execução de um loop antes que a condição seja falsa em Ruby?
A: Utilizando a instrução "continue"
A: Utilizando a instrução "exit"
A: Utilizando a instrução "break"
CA: Utilizando a instrução "break"

L: Ruby
S: Estruturas de repetição em Ruby
Q: Em Ruby, como podemos executar uma iteração sobre uma coleção de elementos?
A: Utilizando a estrutura "each"
A: Utilizando a estrutura "foreach"
A: Utilizando a estrutura "do"
CA: Utilizando a estrutura "each"

L: Ruby
S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar uma iteração "each" em Ruby?
A: each (elemento) { código a ser executado }
A: each { código a ser executado } (elemento)
A: (elemento) { código a ser executado } each
CA: coleção.each do |elemento|; código a ser executado; end

L: Ruby
S: Estruturas de repetição em Ruby
Q: Podemos utilizar "while" e "until" dentro de uma iteração "each" em Ruby?
A: Sim, mas somente "while".
A: Sim, mas somente "until".
A: Sim, ambos podem ser usados.
CA: Sim, ambos "while" e "until" podem ser usados dentro de uma iteração "each".

L: Ruby
S: Estruturas de repetição em Ruby
Q: Em Ruby, como podemos pular uma iteração e continuar com a próxima em um loop?
A: Utilizando a instrução "skip"
A: Utilizando a instrução "next"
A: Utilizando a instrução "pass"
CA: Utilizando a instrução "next"

L: Ruby
S: Estruturas de repetição em Ruby
Q: Como podemos criar um loop que executa pelo menos uma vez, mesmo se a condição inicial for falsa?
A: Utilizando a estrutura "do...while"
A: Utilizando a estrutura "repeat...until"
A: Utilizando a estrutura "loop"
CA: Utilizando a estrutura "begin...end while"

L: Ruby
S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar um loop "loop" em Ruby?
A: loop { código a ser executado }
A: { código a ser executado } loop
A: loop (condição) { código a ser executado }
CA: loop do; código a ser executado; end

L: Ruby
S: Estruturas de repetição em Ruby
Q: Em Ruby, como podemos sair de um loop imediatamente e pular o restante das iterações quando uma condição for atendida?
A: Utilizando a instrução "continue"
A: Utilizando a instrução "jump"
A: Utilizando a instrução "next"
CA: Utilizando a instrução "next"

L: Ruby
S: Estruturas de repetição em Ruby
Q: Como podemos criar um loop que executa até que o usuário interrompa a execução?
A: Utilizando a instrução "halt"
A: Utilizando a instrução "break"
A: Utilizando a instrução "terminate"
CA: Utilizando a instrução "break" e verificando uma condição de saída dentro do loop.

L: Ruby
S: Estruturas de repetição em Ruby
Q: Em Ruby, como podemos criar um loop que repete uma sequência específica de vezes?
A: Utilizando a estrutura "times"
A: Utilizando a estrutura "count"
A: Utilizando a estrutura "sequence"
CA: Utilizando a estrutura "times"

L: Ruby
S: Estruturas de repetição em Ruby
Q: Qual é a sintaxe correta para criar um loop "times" em Ruby?
A: (número).times { código a ser executado }
A: (número) { código a ser executado } .times
A: times (número) { código a ser executado }
CA: (número).times do; código a ser executado; end

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Como podemos criar um array vazio em Ruby?
A: array = []
A: array = {}
A: array = ()
CA: array = []

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Qual é a diferença entre um array e um hash em Ruby?
A: Não há diferença, ambos são usados para armazenar coleções de dados.
A: Arrays são ordenados numericamente, enquanto hashes são ordenados alfabeticamente.
A: Arrays são coleções de elementos únicos, enquanto hashes são coleções de pares chave-valor.
CA: Arrays são coleções ordenadas e indexadas por índices inteiros, enquanto hashes são coleções não ordenadas e indexadas por chaves únicas.

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Como podemos acessar o elemento de um array em uma determinada posição?
A: Utilizando a sintaxe array{"posição"}
A: Utilizando a sintaxe array["posição"]
A: Utilizando a sintaxe array(posição)
CA: Utilizando a sintaxe array[posição]

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Em Ruby, como podemos adicionar um elemento ao final de um array existente?
A: Utilizando o método "add"
A: Utilizando o método "push"
A: Utilizando o método "insert"
CA: Utilizando o método "push"

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Como podemos criar um hash vazio em Ruby?
A: hash = []
A: hash = {}
A: hash = ()
CA: hash = {}

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Qual é a sintaxe correta para adicionar um par chave-valor a um hash em Ruby?
A: hash << "chave" => "valor"
A: hash.add("chave", "valor")
A: hash["chave"] = "valor"
CA: hash["chave"] = "valor"

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Em Ruby, como podemos verificar se uma chave específica existe em um hash?
A: Utilizando o método "exist?"
A: Utilizando o método "contains?"
A: Utilizando o método "has_key?"
CA: Utilizando o método "has_key?"

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Em Ruby, como podemos iterar sobre os elementos de um array?
A: Utilizando a estrutura "each"
A: Utilizando a estrutura "for"
A: Utilizando a estrutura "loop"
CA: Utilizando a estrutura "each"

L: Ruby
S: Coleções de dados: Arrays e Hashes em Ruby
Q: Qual é a sintaxe correta para criar um array em Ruby com alguns elementos pré-definidos?
A: array = [elemento1, elemento2, elemento3]
A: array = {elemento1, elemento2, elemento3}
A: array = (elemento1, elemento2, elemento3)
CA: array = [elemento1, elemento2, elemento3]

L: Ruby
S: Funções e métodos em Ruby
Q: Como podemos definir uma função em Ruby?
A: Utilizando a palavra-chave "def"
A: Utilizando a palavra-chave "function"
A: Utilizando a palavra-chave "method"
CA: Utilizando a palavra-chave "def"

L: Ruby
S: Funções e métodos em Ruby
Q: Qual é a sintaxe correta para definir uma função em Ruby com parâmetros?
A: def nome_da_funcao(parametro1, parametro2)
A: def nome_da_funcao(parametro1; parametro2)
A: def nome_da_funcao(parametro1, parametro2);
CA: def nome_da_funcao(parametro1, parametro2)

L: Ruby
S: Funções e métodos em Ruby
Q: Em Ruby, como podemos retornar um valor de uma função?
A: Utilizando a palavra-chave "output"
A: Utilizando a palavra-chave "result"
A: Utilizando a palavra-chave "return"
CA: Utilizando a palavra-chave "return"

L: Ruby
S: Funções e métodos em Ruby
Q: Em Ruby, como podemos chamar (ou invocar) uma função definida anteriormente?
A: Utilizando a palavra-chave "exec"
A: Utilizando a palavra-chave "run"
A: Utilizando o nome da função seguido de parênteses ()
CA: Utilizando o nome da função seguido de parênteses ()

L: Ruby
S: Funções e métodos em Ruby
Q: Ruby permite que uma função retorne mais de um valor de uma vez. Como isso é chamado?
A: Retorno múltiplo
A: Retorno estendido
A: Retorno composto
CA: Retorno múltiplo

L: Ruby
S: Funções e métodos em Ruby
Q: Em Ruby, é possível definir um valor padrão para um parâmetro de função. Isso é conhecido como...
A: Parâmetro opcional
A: Parâmetro flexível
A: Parâmetro padrão
CA: Parâmetro padrão

L: Ruby
S: Funções e métodos em Ruby
Q: Em Ruby, como podemos passar um número variável de argumentos para uma função?
A: Utilizando a palavra-chave "variable_args"
A: Utilizando a palavra-chave "args"
A: Utilizando um asterisco () antes do nome do parâmetro na definição da função.
CA: Utilizando um asterisco () antes do nome do parâmetro na definição da função.

L: Ruby
S: Funções e métodos em Ruby
Q: Qual é a sintaxe correta para criar um método de classe (método estático) em Ruby?
A: def self.nome_do_metodo
A: def class.nome_do_metodo
A: def nome_da_classe.nome_do_metodo
CA: def self.nome_do_metodo

L: Ruby
S: Funções e métodos em Ruby
Q: Em Ruby, como podemos chamar um método de uma classe sem criar uma instância da classe?
A: Não é possível chamar um método sem criar uma instância da classe.
A: Utilizando a palavra-chave "class"
A: Utilizando a palavra-chave "new"
CA: Utilizando a palavra-chave "new"

L: Ruby
S: Funções e métodos em Ruby
Q: Em Ruby, o que é um método de instância?
A: Um método que pertence à classe e não requer uma instância da classe para ser chamado.
A: Um método que pertence a uma instância específica da classe e pode ser chamado apenas nessa instância.
A: Um método que é definido fora da classe e pode ser usado em várias classes.
CA: Um método que pertence a uma instância específica da classe e pode ser chamado apenas nessa instância.

L: Ruby
S: Funções e métodos em Ruby
Q: Como podemos verificar se um objeto tem um determinado método em Ruby?
A: Utilizando o método "check_method"
A: Utilizando o método "has_method?"
A: Utilizando o método "respond_to?"
CA: Utilizando o método "respond_to?"

L: Ruby
S: Funções e métodos em Ruby
Q: Em Ruby, é possível definir funções anônimas, também conhecidas como blocos. Como isso é feito?
A: Utilizando a palavra-chave "function"
A: Utilizando a palavra-chave "def"
A: Utilizando chaves { } para definir o bloco.
CA: Utilizando chaves { } para definir o bloco.

L: Ruby
S: Scoping de variáveis em Ruby
Q: O que é o escopo de uma variável em Ruby?
A: O escopo de uma variável refere-se à área do programa onde a variável é válida e pode ser acessada.
A: O escopo de uma variável indica quantas vezes ela pode ser modificada em um programa.
A: O escopo de uma variável define o tipo de dado que pode ser armazenado nela.
CA: O escopo de uma variável refere-se à área do programa onde a variável é válida e pode ser acessada.

L: Ruby
S: Scoping de variáveis em Ruby
Q: Em Ruby, quais são os principais tipos de escopo de variáveis?
A: Escopo local e escopo global
A: Escopo público e escopo privado
A: Escopo interno e escopo externo
CA: Escopo local e escopo global

L: Ruby
S: Scoping de variáveis em Ruby
Q: O que é uma variável de escopo local em Ruby?
A: É uma variável acessível apenas dentro de um método ou bloco específico.
A: É uma variável que pode ser acessada em qualquer lugar do programa.
A: É uma variável que só pode ser declarada em classes, não em métodos.
CA: É uma variável acessível apenas dentro de um método ou bloco específico.

L: Ruby
S: Scoping de variáveis em Ruby
Q: Em Ruby, qual é o símbolo utilizado para denotar uma variável de escopo local?
A: $
A: @
A: #
CA: Nenhum prefixo é necessário para denotar uma variável de escopo local em Ruby.

L: Ruby
S: Scoping de variáveis em Ruby
Q: O que é uma variável de escopo global em Ruby?
A: É uma variável acessível apenas dentro de um método ou bloco específico.
A: É uma variável que pode ser acessada em qualquer lugar do programa.
A: É uma variável que só pode ser declarada em classes, não em métodos.
CA: É uma variável que pode ser acessada em qualquer lugar do programa e é precedida pelo símbolo "$".

L: Ruby
S: Scoping de variáveis em Ruby
Q: O que acontece se uma variável local e uma variável global tiverem o mesmo nome em Ruby?
A: A variável local substitui a variável global em todos os lugares do programa.
A: A variável global substitui a variável local em todos os lugares do programa.
A: Será gerado um erro de ambiguidade e o programa não será executado.
CA: A variável local tem precedência sobre a variável global dentro do escopo onde foi definida. Fora desse escopo, a variável global será acessada.

L: Ruby
S: Scoping de variáveis em Ruby
Q: Em Ruby, o que é uma variável de instância?
A: É uma variável que pertence a uma instância específica de uma classe e pode ser acessada apenas por métodos dessa instância.
A: É uma variável que pode ser acessada em qualquer lugar do programa, independentemente da classe ou método.
A: É uma variável que é compartilhada por todas as instâncias de uma classe e pode ser acessada por qualquer método dessa classe.
CA: É uma variável que pertence a uma instância específica de uma classe e pode ser acessada apenas por métodos dessa instância, sendo denotada pelo prefixo "@".

L: Ruby
S: Classes e Objetos em Ruby
Q: O que é uma classe em Ruby?
A: Uma classe é uma estrutura de programação que define um novo tipo de dado, contendo atributos e métodos.
A: Uma classe é um conjunto de variáveis e funções agrupadas em um único objeto.
A: Uma classe é um arquivo de código Ruby que contém várias instâncias de objetos.
CA: Uma classe é uma estrutura de programação que define um novo tipo de dado, contendo atributos e métodos.

L: Ruby
S: Classes e Objetos em Ruby
Q: O que é um objeto em Ruby?
A: Um objeto é uma instância de uma classe que contém dados e comportamentos específicos.
A: Um objeto é uma variável global que pode ser acessada em qualquer lugar do programa.
A: Um objeto é uma função especial em Ruby que pode ser chamada diretamente, sem criar objetos.
CA: Um objeto é uma instância de uma classe que contém dados e comportamentos específicos.

L: Ruby
S: Classes e Objetos em Ruby
Q: Como podemos criar uma nova instância de uma classe em Ruby?
A: Utilizando o método "new" seguido do nome da classe.
A: Utilizando o método "create" seguido do nome da classe.
A: Utilizando o método "instantiate" seguido do nome da classe.
CA: Utilizando o método "new" seguido do nome da classe.

L: Ruby
S: Classes e Objetos em Ruby
Q: Em Ruby, como podemos definir um construtor para uma classe?
A: Utilizando o método "constructor" na definição da classe.
A: Utilizando o método "initialize" na definição da classe.
A: Utilizando o método "init" na definição da classe.
CA: Utilizando o método "initialize" na definição da classe.

L: Ruby
S: Classes e Objetos em Ruby
Q: Em Ruby, como podemos definir métodos de instância em uma classe?
A: Utilizando a palavra-chave "method" seguida do nome do método.
A: Utilizando a palavra-chave "def" seguida do nome do método.
A: Utilizando a palavra-chave "func" seguida do nome do método.
CA: Utilizando a palavra-chave "def" seguida do nome do método.

L: Ruby
S: Classes e Objetos em Ruby
Q: O que é um método de classe (ou método estático) em Ruby?
A: Um método de classe é um método que pertence à classe em si e pode ser chamado diretamente na classe, sem criar objetos.
A: Um método de classe é um método que só pode ser acessado a partir de instâncias da classe.
A: Um método de classe é um método que pode ser acessado apenas por outras classes.
CA: Um método de classe é um método que pertence à classe em si e pode ser chamado diretamente na classe, sem criar objetos.

L: Ruby
S: Classes e Objetos em Ruby
Q: Em Ruby, como podemos acessar os atributos (variáveis de instância) de um objeto?
A: Utilizando a palavra-chave "self" seguida do nome do atributo.
A: Utilizando a palavra-chave "attribute" seguida do nome do atributo.
A: Utilizando a palavra-chave "var" seguida do nome do atributo.
CA: Utilizando a palavra-chave "self" seguida do nome do atributo.

L: Ruby
S: Classes e Objetos em Ruby
Q: O que é herança em Ruby?
A: Herança é a capacidade de uma classe tia herdar características e comportamentos de uma classe pai.
A: Herança é uma técnica de criptografia usada para proteger dados confidenciais.
A: Herança é uma palavra reservada em Ruby que indica a importância de uma classe.
CA: Herança é a capacidade de uma classe filha herdar características e comportamentos de uma classe pai.

L: Ruby
S: Classes e Objetos em Ruby
Q: Como podemos definir uma classe pai (superclasse) em Ruby para permitir herança?
A: Utilizando a palavra-chave "clatch" seguida do nome da classe pai após o nome da classe filha.
A: Utilizando a palavra-chave "parent" seguida do nome da classe pai após o nome da classe filha.
A: Utilizando a palavra-chave "superclass" seguida do nome da classe pai após o nome da classe filha.
CA: Utilizando a palavra-chave "class" seguida do nome da classe pai após o nome da classe filha.

L: Ruby
S: Classes e Objetos em Ruby
Q: Em Ruby, como uma classe filha (subclasse) herda características e comportamentos da classe pai?
A: A classe filha utiliza a palavra-chave " < " seguida do nome da classe pai.
A: A classe filha utiliza a palavra-chave "inherits" seguida do nome da classe pai.
A: A classe filha utiliza a palavra-chave "extends" seguida do nome da classe pai.
CA: A classe filha utiliza a palavra-chave " < " seguida do nome da classe pai.

L: Ruby
S: Classes e Objetos em Ruby
Q: Em Ruby, como podemos chamar um método da classe pai a partir de uma classe filha?
A: Utilizando a palavra-chave "sutra" seguida do nome do método.
A: Utilizando a palavra-chave "parent" seguida do nome do método.
A: Utilizando a palavra-chave "base" seguida do nome do método.
CA: Utilizando a palavra-chave "super" seguida do nome do método.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: O que é herança em Ruby?
A: Herança é a capacidade de uma classe filha herdar métodos apenas da classe pai.
A: Herança é a capacidade de uma classe filha herdar características e comportamentos de uma classe pai.
A: Herança é a capacidade de uma classe filha substituir todos os métodos da classe pai.
CA: Herança é a capacidade de uma classe filha herdar características e comportamentos de uma classe pai.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos estender uma classe para herdar de outra classe?
A: Utilizando a palavra-chave "extend" seguida do nome da classe pai.
A: Utilizando a palavra-chave "parent" seguida do nome da classe pai.
A: Utilizando a palavra-chave "include" seguida do nome da classe pai.
CA: Utilizando a palavra-chave " < " seguida do nome da classe pai.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: O que é encapsulamento em Ruby?
A: Encapsulamento é a capacidade de uma classe esconder seus métodos e atributos internos.
A: Encapsulamento é a capacidade de uma classe herdar características e comportamentos de outra classe.
A: Encapsulamento é a capacidade de uma classe substituir todos os métodos da classe pai.
CA: Encapsulamento é a capacidade de uma classe esconder seus métodos e atributos internos, permitindo o acesso apenas por meio de métodos públicos.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos definir um método privado em uma classe?
A: Utilizando a palavra-chave "private_method" seguida do nome do método.
A: Utilizando a palavra-chave "protected" seguida do nome do método.
A: Utilizando a palavra-chave "private" seguida do nome do método.
CA: Utilizando a palavra-chave "private" seguida do nome do método.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: Em Ruby, qual é o objetivo do encapsulamento?
A: O objetivo do encapsulamento é permitir que métodos e atributos internos de uma classe sejam acessados por outras classes livremente.
A: O objetivo do encapsulamento é garantir que uma classe não possa herdar de outra classe.
A: O objetivo do encapsulamento é ocultar a implementação interna de uma classe e permitir o acesso controlado através de métodos públicos.
CA: O objetivo do encapsulamento é ocultar a implementação interna de uma classe e permitir o acesso controlado através de métodos públicos.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos definir um método protegido em uma classe?
A: Utilizando a palavra-chave "protected_method" seguida do nome do método.
A: Utilizando a palavra-chave "protected" seguida do nome do método.
A: Utilizando a palavra-chave "access" seguida do nome do método.
CA: Utilizando a palavra-chave "protected" seguida do nome do método.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: Em Ruby, qual é a diferença entre um método público e um método privado?
A: Um método público pode ser acessado de fora da classe, enquanto um método privado só pode ser acessado de dentro da classe.
A: Um método público pode ser acessado por qualquer classe, enquanto um método privado só pode ser acessado pela classe em que foi definido.
A: Não há diferença entre um método público e um método privado, ambos podem ser acessados de qualquer lugar do programa.
CA: Um método público pode ser acessado de fora da classe, enquanto um método privado só pode ser acessado de dentro da classe.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: Em Ruby, qual é a diferença entre um método público e um método protegido?
A: Um método público pode ser acessado por qualquer classe, enquanto um método protegido só pode ser acessado de dentro da classe ou suas subclasses.
A: Um método público pode ser acessado de fora da classe, enquanto um método protegido só pode ser acessado de dentro da classe.
A: Não há diferença entre um método público e um método protegido, ambos podem ser acessados de qualquer lugar do programa.
CA: Um método público pode ser acessado por qualquer classe, enquanto um método protegido só pode ser acessado de dentro da classe ou suas subclasses.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos acessar um método privado de uma classe?
A: Utilizando a palavra-chave "private" seguida do nome do método.
A: Utilizando a palavra-chave "access" seguida do nome do método.
A: Não é possível acessar um método privado de uma classe fora da própria classe.
CA: Não é possível acessar um método privado de uma classe fora da própria classe, somente métodos públicos podem ser chamados externamente.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: Em Ruby, como podemos acessar um método protegido de uma classe?
A: Utilizando a palavra-chave "protected" seguida do nome do método.
A: Utilizando a palavra-chave "access" seguida do nome do método.
A: Não é possível acessar um método protegido de uma classe fora da própria classe ou suas subclasses.
CA: Não é possível acessar um método protegido de uma classe fora da própria classe ou suas subclasses, somente métodos públicos podem ser chamados externamente.

L: Ruby
S: Herança e Encapsulamento em Ruby
Q: O que acontece quando tentamos chamar um método privado de uma classe fora dela?
A: É gerado um erro de sintaxe.
A: O método privado é chamado normalmente, sem restrições.
A: É gerado um erro de tempo de execução.
CA: É gerado um erro de tempo de execução, pois não é possível chamar um método privado de uma classe fora dela, somente dentro da própria classe.

L: Ruby
S: Módulos e Mixins em Ruby
Q: O que são módulos em Ruby?
A: Módulos são uma forma de encapsular classes em um único arquivo para facilitar a organização do código.
A: Módulos são uma forma de herança múltipla em Ruby, permitindo que uma classe tenha vários pais.
A: Módulos são uma estrutura de controle de fluxo em Ruby utilizada para repetir um bloco de código várias vezes.
CA: Módulos são uma forma de encapsular métodos e constantes para serem compartilhados por várias classes em Ruby.

L: Ruby
S: Módulos e Mixins em Ruby
Q: Como podemos incluir um módulo em uma classe em Ruby?
A: Utilizando a palavra-chave "attach" seguida do nome do módulo.
A: Utilizando a palavra-chave "extend" seguida do nome do módulo.
A: Utilizando a palavra-chave "include" seguida do nome do módulo.
CA: Utilizando a palavra-chave "include" seguida do nome do módulo.

L: Ruby
S: Módulos e Mixins em Ruby
Q: Em Ruby, o que é um mixin?
A: Um mixin é um tipo especial de classe que só pode ser incluído em outras classes.
A: Um mixin é uma forma de encapsulamento que permite ocultar a implementação interna de uma classe.
A: Um mixin é um objeto que contém apenas constantes e não pode conter métodos.
CA: Um mixin é um módulo que contém métodos e constantes que podem ser incluídos em outras classes para compartilhar funcionalidades.

L: Ruby
S: Módulos e Mixins em Ruby
Q: Em Ruby, como podemos definir um método dentro de um módulo?
A: Utilizando a palavra-chave "func" seguida do nome do método.
A: Utilizando a palavra-chave "method" seguida do nome do método.
A: Utilizando a palavra-chave "def" seguida do nome do método.
CA: Utilizando a palavra-chave "def" seguida do nome do método dentro do módulo.

L: Ruby
S: Módulos e Mixins em Ruby
Q: Em Ruby, qual é a vantagem de usar módulos e mixins?
A: A vantagem de usar módulos e mixins é que eles permitem a herança múltipla em Ruby, o que não é possível com classes.
A: A vantagem de usar módulos e mixins é que eles podem ser instanciados como objetos, permitindo seu uso em qualquer lugar do código.
A: A vantagem de usar módulos e mixins é que eles permitem compartilhar métodos e constantes entre várias classes, evitando duplicação de código.
CA: A vantagem de usar módulos e mixins é que eles permitem compartilhar métodos e constantes entre várias classes, evitando duplicação de código e facilitando a organização do código.

L: Ruby
S: Módulos e Mixins em Ruby
Q: Em Ruby, é possível incluir mais de um módulo em uma classe?
A: Sim, é possível incluir quantos módulos forem necessários em uma classe.
A: Não, Ruby não permite a inclusão de mais de um módulo em uma classe.
A: Sim, mas somente em classes que não herdam de nenhuma outra classe.
CA: Sim, é possível incluir quantos módulos forem necessários em uma classe, permitindo assim a composição de funcionalidades a partir de diferentes módulos.

L: Ruby
S: Módulos e Mixins em Ruby
Q: Em Ruby, o que acontece se dois módulos incluídos em uma classe possuírem métodos com o mesmo nome?
A: Ruby permite a inclusão de apenas um dos métodos com o mesmo nome e gera um erro para o outro.
A: Os métodos com o mesmo nome são executados em ordem aleatória, dependendo da situação.
A: É gerado um erro de tempo de execução, pois Ruby não permite a inclusão de módulos com métodos de mesmo nome em uma mesma classe.
CA: Os métodos com o mesmo nome serão sobrescritos pelo último módulo incluído, ou seja, o último método incluído terá precedência.

L: Ruby
S: Módulos e Mixins em Ruby
Q: Em Ruby, como podemos acessar os métodos de um módulo incluído em uma classe?
A: Os métodos de um módulo incluído são acessados automaticamente pela classe, não é necessário fazer nada adicional.
A: Utilizando a palavra-chave "use" seguida do nome do método.
A: Utilizando a palavra-chave "get" seguida do nome do método.
CA: Os métodos de um módulo incluído são acessados automaticamente pela classe, sem precisar de nenhuma palavra-chave adicional.

L: Ruby
S: Tratamento de Exceções em Ruby
Q: O que são exceções em Ruby?
A: Exceções em Ruby são erros que ocorrem durante a execução de um programa e interrompem o fluxo normal de execução.
A: Exceções em Ruby são recursos avançados que permitem que o programa retorne ao início do código.
A: Exceções em Ruby são usadas para definir comportamentos especiais de um objeto.
CA: Exceções em Ruby são erros que ocorrem durante a execução de um programa e podem ser tratadas com blocos de tratamento (try, catch).

L: Ruby
S: Tratamento de Exceções em Ruby
Q: Como podemos tratar exceções em Ruby?
A: Utilizando a palavra-chave "handle" seguida do nome da exceção.
A: Utilizando a palavra-chave "rescue" seguida do nome da exceção.
A: Utilizando a palavra-chave "catch" seguida do nome da exceção.
CA: Utilizando a palavra-chave "begin" seguida de um bloco de código onde a exceção pode ocorrer e "rescue" para capturar e tratar a exceção.

L: Ruby
S: Tratamento de Exceções em Ruby
Q: Em Ruby, como podemos executar um bloco de código que pode gerar uma exceção?
A: Utilizando a palavra-chave "handle".
A: Utilizando a palavra-chave "catch".
A: Utilizando a palavra-chave "try".
CA: Utilizando a palavra-chave "begin" seguida do bloco de código que pode gerar a exceção.

L: Ruby
S: Tratamento de Exceções em Ruby
Q: Em Ruby, como podemos lidar com uma exceção específica?
A: Utilizando a palavra-chave "catch" seguida do nome da exceção.
A: Utilizando a palavra-chave "handle" seguida do nome da exceção.
A: Utilizando a palavra-chave "rescue" seguida do nome da exceção.
CA: Utilizando a palavra-chave "rescue" seguida do nome da exceção que queremos capturar e tratar.

L: Ruby
S: Tratamento de Exceções em Ruby
Q: Em Ruby, como podemos lidar com várias exceções diferentes em um único bloco de tratamento?
A: Utilizando vários blocos "rescue" seguidos, cada um para uma exceção diferente.
A: Utilizando a palavra-chave "multiple_rescue" seguida do nome das exceções que queremos capturar.
A: Utilizando a palavra-chave "handle" seguida do nome de todas as exceções que queremos tratar.
CA: Utilizando vários blocos "rescue" seguidos, cada um para uma exceção diferente, permitindo tratar cada tipo de exceção de forma específica.

L: Ruby
S: Tratamento de Exceções em Ruby
Q: O que é o bloco "else" em um tratamento de exceções?
A: O bloco "else" é usado para definir o código que será executado caso não ocorra nenhuma exceção dentro do bloco "begin".
A: O bloco "else" é usado para tratar exceções que não foram capturadas pelos blocos "rescue".
A: O bloco "else" é usado para definir o código que será executado após a captura de uma exceção no bloco "rescue".
CA: Em Ruby, não existe o bloco "else" em um tratamento de exceções. O bloco "rescue" é usado para capturar e tratar exceções.

L: Ruby
S: Tratamento de Exceções em Ruby
Q: O que acontece se uma exceção não for tratada em um programa Ruby?
A: A exceção será ignorada e o programa continuará sua execução normalmente.
A: O programa exibirá uma mensagem de erro padrão e continuará sua execução.
A: O programa será encerrado e exibirá uma mensagem de erro indicando a exceção não tratada.
CA: Se uma exceção não for tratada em um programa Ruby, o programa será encerrado e exibirá uma mensagem de erro indicando o tipo da exceção e o trecho de código onde ocorreu.

L: Ruby
S: Tratamento de Exceções em Ruby
Q: É possível criar exceções personalizadas em Ruby?
A: Não, Ruby não permite a criação de exceções personalizadas, apenas utiliza as exceções padrão da linguagem.
A: Sim, é possível criar exceções personalizadas utilizando a palavra-chave "custom_exception".
A: Sim, é possível criar exceções personalizadas criando uma classe que herde da classe "Exception".
CA: Sim, é possível criar exceções personalizadas criando uma classe que herde da classe "StandardError" ou "Exception". Essas classes podem ser lançadas e capturadas de forma semelhante às exceções padrão da linguagem.

L: Ruby
S: Manipulação de Arquivos em Ruby
Q: Como podemos abrir um arquivo em modo de leitura em Ruby?
A: Utilizando a função "open_file" com o argumento "r".
A: Utilizando a função "open" com o argumento "read".
A: Utilizando a função "file_open" com o argumento "r".
CA: Utilizando a função "File.open" com o argumento "r".

L: Ruby
S: Manipulação de Arquivos em Ruby
Q: Como podemos abrir um arquivo em modo de escrita em Ruby?
A: Utilizando a função "open_file" com o argumento "w".
A: Utilizando a função "open" com o argumento "write".
A: Utilizando a função "file_open" com o argumento "w".
CA: Utilizando a função "File.open" com o argumento "w".

L: Ruby
S: Manipulação de Arquivos em Ruby
Q: Como podemos abrir um arquivo em modo de adição (append) em Ruby?
A: Utilizando a função "open_file" com o argumento "a".
A: Utilizando a função "open" com o argumento "append".
A: Utilizando a função "file_open" com o argumento "a".
CA: Utilizando a função "File.open" com o argumento "a".

L: Ruby
S: Manipulação de Arquivos em Ruby
Q: Em Ruby, como podemos fechar um arquivo após a manipulação?
A: Utilizando a função "file_close".
A: Utilizando a função "close".
A: Utilizando a função "file_end".
CA: Utilizando a função "file.close".

L: Ruby
S: Manipulação de Arquivos em Ruby
Q: Como podemos ler o conteúdo de um arquivo aberto em modo de leitura?
A: Utilizando o método "read" do objeto do arquivo.
A: Utilizando o método "read_file" do objeto do arquivo.
A: Utilizando o método "readline" do objeto do arquivo.
CA: Utilizando o método "readlines" do objeto do arquivo.

L: Ruby
S: Manipulação de Arquivos em Ruby
Q: Em Ruby, como podemos escrever em um arquivo aberto em modo de escrita?
A: Utilizando o método "write" do objeto do arquivo.
A: Utilizando o método "file_write" do objeto do arquivo.
A: Utilizando o método "append" do objeto do arquivo.
CA: Utilizando o método "puts" do objeto do arquivo.

L: Ruby
S: Manipulação de Arquivos em Ruby
Q: Como podemos verificar se um arquivo existe antes de abri-lo em Ruby?
A: Utilizando a função "file_exist?" passando o nome do arquivo como argumento.
A: Utilizando a função "file_exists?" passando o nome do arquivo como argumento.
A: Utilizando a função "exists?" passando o nome do arquivo como argumento.
CA: Utilizando a função "File.exist?" passando o nome do arquivo como argumento.

L: Ruby
S: Manipulação de Arquivos em Ruby
Q: Como podemos criar um novo arquivo em Ruby?
A: Utilizando a função "create_file" com o nome do arquivo como argumento.
A: Utilizando a função "file_create" com o nome do arquivo como argumento.
A: Utilizando a função "open_file" com o argumento "create".
CA: Utilizando a função "File.open" com o nome do arquivo e o modo de abertura "w" (escrita), o que criará o arquivo se ele não existir ou o truncará (apagará o conteúdo) se já existir.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos concatenar duas strings?
A: Utilizando o operador "+" entre as duas strings.
A: Utilizando o método "concat" para unir as duas strings.
A: Utilizando o método "join" passando as duas strings como argumento.
CA: Utilizando o operador "<<" entre as duas strings.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos obter o tamanho de uma string?
A: Utilizando o método "length" da string.
A: Utilizando o método "count" da string.
A: Utilizando o método "size" da string.
CA: Utilizando o método "length" ou "size" da string.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos transformar uma string em letras maiúsculas?
A: Utilizando o método "upcase" da string.
A: Utilizando o método "uppercase" da string.
A: Utilizando o método "capitals" da string.
CA: Utilizando o método "upcase" da string.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos transformar uma string em letras minúsculas?
A: Utilizando o método "downcase" da string.
A: Utilizando o método "lowercase" da string.
A: Utilizando o método "smallcase" da string.
CA: Utilizando o método "downcase" da string.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos verificar se uma string está vazia?
A: Utilizando o método "empty?" da string.
A: Utilizando o método "blank?" da string.
A: Utilizando o método "nil?" da string.
CA: Utilizando o método "empty?" da string.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos substituir uma parte específica de uma string por outra?
A: Utilizando o método "replace" passando os índices de início e fim da parte a ser substituída e a nova string como argumento.
A: Utilizando o método "sub" passando a parte a ser substituída e a nova string como argumento.
A: Utilizando o método "swap" passando a parte a ser substituída e a nova string como argumento.
CA: Utilizando o método "gsub" passando a parte a ser substituída e a nova string como argumento.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos inverter uma string?
A: Utilizando o método "reverse" da string.
A: Utilizando o método "invert" da string.
A: Utilizando o método "backwards" da string.
CA: Utilizando o método "reverse" da string.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos dividir uma string em um array de substrings com base em um caractere delimitador?
A: Utilizando o método "split" passando o caractere delimitador como argumento.
A: Utilizando o método "divide" passando o caractere delimitador como argumento.
A: Utilizando o método "explode" passando o caractere delimitador como argumento.
CA: Utilizando o método "split" passando o caractere delimitador como argumento.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos remover espaços em branco do início e do final de uma string?
A: Utilizando o método "strip" da string.
A: Utilizando o método "trim" da string.
A: Utilizando o método "erase" da string.
CA: Utilizando o método "strip" da string.

L: Ruby
S: Manipulação de Strings em Ruby
Q: Em Ruby, como podemos verificar se uma string contém outra substring?
A: Utilizando o método "include?" passando a substring como argumento.
A: Utilizando o método "contains?" passando a substring como argumento.
A: Utilizando o método "has?" passando a substring como argumento.
CA: Utilizando o método "include?" passando a substring como argumento.

L: Ruby
S: Expressões Regulares em Ruby
Q: O que são expressões regulares em Ruby?
A: Expressões regulares em Ruby são sequências de caracteres que definem padrões de busca em strings.
A: Expressões regulares em Ruby são estruturas de controle de fluxo usadas para criar loops.
A: Expressões regulares em Ruby são um tipo especial de variável que armazena várias strings.
CA: Expressões regulares em Ruby são sequências de caracteres que definem padrões de busca em strings e permitem realizar operações de busca e substituição de texto de forma poderosa.

L: Ruby
S: Expressões Regulares em Ruby
Q: Como podemos criar uma expressão regular em Ruby?
A: Utilizando chaves "{}" para delimitar a expressão.
A: Utilizando colchetes "[]" para delimitar a expressão.
A: Utilizando parênteses "()" para delimitar a expressão.
CA: Utilizando barras "//" para delimitar a expressão.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos verificar se uma expressão regular corresponde a uma string?
A: Utilizando o método "match" da string, passando a expressão regular como argumento.
A: Utilizando o método "verify" da string, passando a expressão regular como argumento.
A: Utilizando o método "compare" da string, passando a expressão regular como argumento.
CA: Utilizando o método "match" da string, passando a expressão regular como argumento.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos verificar se uma expressão regular corresponde a uma string no início da mesma?
A: Utilizando o método "start_with?" da expressão regular.
A: Utilizando o método "begin_with?" da expressão regular.
A: Utilizando o método "initial?" da expressão regular.
CA: Utilizando o método "start_with?" da expressão regular.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos verificar se uma expressão regular corresponde a uma string no final da mesma?
A: Utilizando o método "finish_with?" da expressão regular.
A: Utilizando o método "end_with?" da expressão regular.
A: Utilizando o método "last?" da expressão regular.
CA: Utilizando o método "end_with?" da expressão regular.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos obter todas as correspondências de uma expressão regular em uma string?
A: Utilizando o método "find" da expressão regular.
A: Utilizando o método "search" da expressão regular.
A: Utilizando o método "match_all" da expressão regular.
CA: Utilizando o método "scan" da expressão regular.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos substituir uma parte específica de uma string com base em uma expressão regular?
A: Utilizando o método "replace" da string, passando a expressão regular e a nova string como argumentos.
A: Utilizando o método "sub" da string, passando a expressão regular e a nova string como argumentos.
A: Utilizando o método "replace_all" da string, passando a expressão regular e a nova string como argumentos.
CA: Utilizando o método "gsub" da string, passando a expressão regular e a nova string como argumentos.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos dividir uma string em um array de substrings com base em uma expressão regular?
A: Utilizando o método "divide" passando a expressão regular como argumento.
A: Utilizando o método "split" passando a expressão regular como argumento.
A: Utilizando o método "separate" passando a expressão regular como argumento.
CA: Utilizando o método "split" passando a expressão regular como argumento.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos substituir todas as ocorrências de uma expressão regular em uma string por outra?
A: Utilizando o método "swap" passando a expressão regular e a nova string como argumentos.
A: Utilizando o método "replace_all" passando a expressão regular e a nova string como argumentos.
A: Utilizando o método "replace" passando a expressão regular e a nova string como argumentos.
CA: Utilizando o método "gsub" passando a expressão regular e a nova string como argumentos.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos ignorar o case sensitive ao utilizar uma expressão regular?
A: Utilizando o modificador "/i" no final da expressão regular.
A: Utilizando o modificador "/s" no final da expressão regular.
A: Utilizando o modificador "/c" no final da expressão regular.
CA: Utilizando o modificador "/i" no final da expressão regular para torná-la case-insensitive.

L: Ruby
S: Expressões Regulares em Ruby
Q: Em Ruby, como podemos verificar se uma string contém somente caracteres numéricos usando expressões regulares?
A: Utilizando a expressão regular "/\d+/".
A: Utilizando a expressão regular "/\w+/".
A: Utilizando a expressão regular "/\s+/".
CA: Utilizando a expressão regular "/\A\d+\z/".

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: O que é Ruby on Rails?
A: Ruby on Rails é um framework de desenvolvimento web escrito em Ruby que facilita a criação de aplicativos web.
A: Ruby on Rails é um servidor web escrito em Ruby que permite hospedar sites e aplicativos web.
A: Ruby on Rails é um banco de dados NoSQL escrito em Ruby para armazenar dados de aplicativos web.
CA: Ruby on Rails é um framework de desenvolvimento web escrito em Ruby que segue o padrão MVC (Model-View-Controller) e oferece uma estrutura completa para criar aplicativos web.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Quais são as vantagens de usar Ruby on Rails no desenvolvimento web?
A: Ruby on Rails possui uma sintaxe simples e expressiva que permite escrever código de forma mais legível.
A: Ruby on Rails é altamente escalável e permite que os aplicativos cresçam conforme a demanda.
A: Ruby on Rails possui uma grande comunidade e uma vasta coleção de bibliotecas e gemas que facilitam o desenvolvimento.
CA: Ruby on Rails oferece produtividade e rapidez no desenvolvimento, seguindo convenções sobre configurações, o que agiliza o processo de criação de aplicativos web.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: O que é o padrão de arquitetura MVC (Model-View-Controller)?
A: MVC é um padrão de design usado em Ruby on Rails que se refere a um tipo especial de roteador.
A: MVC é um padrão de design usado em Ruby on Rails que se refere a um banco de dados otimizado.
A: MVC é um padrão de design usado em Ruby on Rails que separa a aplicação em três componentes principais: Model, View e Controller.
CA: MVC é um padrão de design usado em Ruby on Rails que separa a aplicação em três componentes principais: Model (responsável pela manipulação dos dados), View (responsável pela apresentação dos dados) e Controller (responsável por gerenciar as interações do usuário).

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, onde são armazenados os templates de View?
A: Os templates de View são armazenados em arquivos com extensão .html.erb.
A: Os templates de View são armazenados em arquivos com extensão .view.rb.
A: Os templates de View são armazenados em arquivos com extensão .view.html.
CA: Os templates de View são armazenados em arquivos com extensão .html.erb, que permitem incorporar código Ruby dentro do HTML para gerar a saída dinamicamente.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Como podemos definir uma rota em Ruby on Rails?
A: As rotas são definidas automaticamente em Ruby on Rails e não requerem configuração adicional.
A: As rotas são definidas no arquivo de configuração "routes.xml" do aplicativo Ruby on Rails.
A: As rotas são definidas no arquivo de configuração "app.yml" do aplicativo Ruby on Rails.
CA: As rotas são definidas no arquivo "routes.rb" do aplicativo Ruby on Rails, utilizando a sintaxe "get", "post", "put", "delete" ou outras para mapear URLs para ações do Controller.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos criar um novo aplicativo?
A: Utilizando o comando "rails new" seguido do nome do aplicativo.
A: Utilizando o comando "ruby new" seguido do nome do aplicativo.
A: Utilizando o comando "rails create" seguido do nome do aplicativo.
CA: Utilizando o comando "rails new" seguido do nome do aplicativo, que criará uma estrutura básica de diretórios e arquivos para o novo aplicativo.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: O que é um scaffold em Ruby on Rails?
A: Um scaffold em Ruby on Rails é uma funcionalidade que permite criar automaticamente um código básico para um modelo, suas visualizações e controladores.
A: Um scaffold em Ruby on Rails é uma biblioteca de terceiros que adiciona recursos extras à aplicação.
A: Um scaffold em Ruby on Rails é uma camada de segurança que protege a aplicação contra ataques cibernéticos.
CA: Um scaffold em Ruby on Rails é uma funcionalidade que permite criar automaticamente um código básico para um modelo, suas visualizações e controladores, agilizando o processo de criação de recursos CRUD (Create, Read, Update, Delete).

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: O que é uma migração em Ruby on Rails?
A: Uma migração em Ruby on Rails é uma forma de exportar dados do aplicativo para um arquivo externo.
A: Uma migração em Ruby on Rails é uma camada de segurança adicional para proteger o banco de dados contra ataques.
A: Uma migração em Ruby on Rails é uma forma de fazer alterações no esquema do banco de dados de maneira controlada e versionada.
CA: Uma migração em Ruby on Rails é uma forma de fazer alterações no esquema do banco de dados de maneira controlada e versionada, permitindo que o desenvolvedor modifique a estrutura do banco de dados sem perder dados ou prejudicar a integridade dos dados existentes.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos iniciar o servidor web para executar nossa aplicação localmente?
A: Utilizando o comando "rails run".
A: Utilizando o comando "rails start".
A: Utilizando o comando "rails server".
CA: Utilizando o comando "rails server" ou "rails s", que iniciará o servidor web para executar a aplicação localmente em http://localhost:3000.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos criar um novo modelo?
A: Utilizando o comando "rails generate model" seguido do nome do modelo e os atributos desejados.
A: Utilizando o comando "rails create model" seguido do nome do modelo e os atributos desejados.
A: Utilizando o comando "rails new model" seguido do nome do modelo e os atributos desejados.
CA: Utilizando o comando "rails generate model" seguido do nome do modelo e os atributos desejados, o que criará automaticamente o arquivo de migração correspondente para criar a tabela no banco de dados.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos criar um novo controlador?
A: Utilizando o comando "rails generate controller" seguido do nome do controlador.
A: Utilizando o comando "rails new controller" seguido do nome do controlador.
A: Utilizando o comando "rails create controller" seguido do nome do controlador.
CA: Utilizando o comando "rails generate controller" seguido do nome do controlador, o que criará automaticamente o arquivo do controlador com os métodos de ação básicos.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos criar uma nova view?
A: Utilizando o comando "rails new view" seguido do nome da view.
A: Utilizando o comando "rails generate view" seguido do nome da view.
A: Utilizando o comando "rails create view" seguido do nome da view.
CA: Em Ruby on Rails, as views são criadas automaticamente quando criamos um controlador com o comando "rails generate controller". O Rails cria automaticamente as pastas e arquivos de view associados ao controlador e suas ações.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, onde são armazenados os arquivos de configuração do aplicativo?
A: Os arquivos de configuração são armazenados na pasta "config" do aplicativo.
A: Os arquivos de configuração são armazenados na pasta "app" do aplicativo.
A: Os arquivos de configuração são armazenados na pasta "db" do aplicativo.
CA: Os arquivos de configuração são armazenados na pasta "config" do aplicativo, onde podemos encontrar arquivos como "routes.rb" para configurar as rotas, "database.yml" para configurar as conexões de banco de dados e outros arquivos relacionados à configuração do aplicativo.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, onde são armazenados os arquivos de assets (como CSS e JavaScript) do aplicativo?
A: Os arquivos de assets são armazenados na pasta "public" do aplicativo.
A: Os arquivos de assets são armazenados na pasta "app/assets" do aplicativo.
A: Os arquivos de assets são armazenados na pasta "assets" do aplicativo.
CA: Os arquivos de assets são armazenados na pasta "app/assets" do aplicativo, onde podemos encontrar subpastas para os diferentes tipos de assets, como "stylesheets" para arquivos CSS e "javascripts" para arquivos JavaScript. Esses assets são pré-compilados e servidos pelo Rails automaticamente.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é um helper?
A: Um helper em Ruby on Rails é uma classe que auxilia o desenvolvimento de controladores.
A: Um helper em Ruby on Rails é uma biblioteca de terceiros que adiciona recursos extras ao aplicativo.
A: Um helper em Ruby on Rails é um módulo que contém métodos que podem ser usados nas views para auxiliar na geração de HTML dinâmico.
CA: Um helper em Ruby on Rails é um módulo que contém métodos que podem ser usados nas views para auxiliar na geração de HTML dinâmico e outras tarefas específicas da interface do usuário.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é um asset pipeline?
A: Um asset pipeline em Ruby on Rails é uma forma de proteger os assets do aplicativo contra ataques cibernéticos.
A: Um asset pipeline em Ruby on Rails é uma funcionalidade que otimiza e pré-compila os assets do aplicativo, como CSS e JavaScript, para melhorar o desempenho.
A: Um asset pipeline em Ruby on Rails é um servidor web que hospeda os assets do aplicativo.
CA: Um asset pipeline em Ruby on Rails é uma funcionalidade que otimiza e pré-compila os assets do aplicativo, como CSS e JavaScript, para melhorar o desempenho e a eficiência da entrega dos assets ao navegador.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é uma rota com recursos (resources)?
A: Uma rota com recursos é uma rota que permite criar, ler, atualizar e deletar recursos em um único mapeamento de URL.
A: Uma rota com recursos é uma rota que requer autenticação antes de ser acessada.
A: Uma rota com recursos é uma rota que redireciona automaticamente para outra página.
CA: Uma rota com recursos (resources) em Ruby on Rails é uma rota que mapeia automaticamente uma série de URLs para ações CRUD (Create, Read, Update, Delete) em um controlador, facilitando a criação de rotas para manipulação de recursos no aplicativo.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é uma sessão (session)?
A: Uma sessão é uma conexão de banco de dados que armazena informações temporárias.
A: Uma sessão é uma forma de autenticação de usuário no aplicativo.
A: Uma sessão é uma forma de armazenar informações entre as requisições do usuário, geralmente usando cookies para manter o estado da aplicação.
CA: Em Ruby on Rails, uma sessão (session) é uma forma de armazenar informações entre as requisições do usuário, geralmente usando cookies ou armazenamento no lado do servidor para manter o estado da aplicação, permitindo que dados sejam persistidos e acessíveis durante a navegação do usuário no aplicativo.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, o que é um flash message?
A: Um flash message é uma mensagem exibida na tela que requer uma ação do usuário para ser fechada.
A: Um flash message é uma forma de notificar o usuário sobre o status de uma operação no aplicativo.
A: Um flash message é uma mensagem exibida na tela por um curto período e desaparece automaticamente.
CA: Em Ruby on Rails, um flash message é uma mensagem exibida na tela por um curto período, geralmente após uma ação no aplicativo (como criar, editar ou excluir um recurso). Essas mensagens podem ser usadas para notificar o usuário sobre o status de uma operação ou fornecer feedback sobre a ação realizada.

L: Ruby
S: Introdução ao Desenvolvimento Web com Ruby
Q: Em Ruby on Rails, como podemos exibir um flash message para o usuário?
A: Utilizando o método "flash_message" no controlador.
A: Utilizando o método "flash" no controlador e passando a mensagem como argumento.
A: Utilizando o método "display_flash" na view.
CA: Utilizando o método "flash" no controlador e passando a mensagem como argumento. Por exemplo, para exibir uma mensagem de sucesso, usamos "flash[:success] = 'Mensagem de sucesso!'", e na view, podemos acessar essa mensagem usando "flash[:success]".

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby, qual gem é frequentemente utilizada para a manipulação de bancos de dados relacionais?
A: "db-connect"
A: "sql-gem"
A: "activerecord"
CA: "activerecord" é frequentemente utilizada para a manipulação de bancos de dados relacionais em Ruby, pois é uma ORM (Object-Relational Mapping) popular que permite interagir com o banco de dados usando objetos Ruby.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos criar um novo banco de dados para nossa aplicação?
A: Utilizando o comando "rails create_db".
A: Utilizando o comando "rails db_create".
A: Utilizando o comando "rails db:migrate".
CA: Utilizando o comando "rails db:create", que criará um novo banco de dados de acordo com as configurações definidas no arquivo "database.yml".

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, o que é um modelo (model) em relação ao banco de dados?
A: Um modelo é uma representação visual dos dados armazenados no banco de dados.
A: Um modelo é uma tabela no banco de dados que armazena os dados relacionados a um determinado conceito ou entidade do sistema.
A: Um modelo é um arquivo de configuração que define como os dados do banco de dados devem ser exibidos na interface do usuário.
CA: Em Ruby on Rails, um modelo (model) é uma classe que representa uma tabela no banco de dados e inclui métodos para acessar, manipular e validar os dados associados a essa tabela.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos criar um novo modelo juntamente com a migração para criar a tabela correspondente no banco de dados?
A: Utilizando o comando "rails generate model" seguido do nome do modelo e os atributos desejados.
A: Utilizando o comando "rails new model" seguido do nome do modelo e os atributos desejados.
A: Utilizando o comando "rails create model" seguido do nome do modelo e os atributos desejados.
CA: Utilizando o comando "rails generate model" seguido do nome do modelo e os atributos desejados, o que criará automaticamente o arquivo de migração correspondente para criar a tabela no banco de dados.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos executar as migrações para atualizar o banco de dados de acordo com as alterações nos modelos?
A: Utilizando o comando "rails db:apply_migrations".
A: Utilizando o comando "rails db:update".
A: Utilizando o comando "rails db:migrate".
CA: Utilizando o comando "rails db:migrate", que executará as migrações pendentes e atualizará o banco de dados de acordo com as alterações nos modelos.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos criar registros (dados) em uma tabela do banco de dados usando um modelo?
A: Utilizando o método "Model.create" passando os atributos como argumento.
A: Utilizando o método "Model.new" seguido do método "save" para salvar o registro no banco de dados.
A: Utilizando o método "Model.insert" passando os atributos como argumento.
CA: Utilizando o método "Model.create" passando os atributos como argumento, o que criará um novo registro na tabela associada ao modelo no banco de dados.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos consultar registros (dados) em uma tabela do banco de dados usando um modelo?
A: Utilizando o método "Model.query" passando uma string SQL como argumento.
A: Utilizando o método "Model.all" para retornar todos os registros da tabela.
A: Utilizando o método "Model.find" passando o ID do registro desejado como argumento.
CA: Utilizando o método "Model.all" para retornar todos os registros da tabela associada ao modelo, ou utilizando o método "Model.find" passando o ID do registro desejado como argumento para buscar um registro específico.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos atualizar registros (dados) em uma tabela do banco de dados usando um modelo?
A: Utilizando o método "Model.update" passando o ID do registro e os atributos atualizados como argumento.
A: Utilizando o método "Model.modify" passando o ID do registro e os atributos atualizados como argumento.
A: Utilizando o método "Model.edit" passando o ID do registro e os atributos atualizados como argumento.
CA: Utilizando o método "Model.update" passando o ID do registro e os atributos atualizados como argumento, o que atualizará o registro correspondente na tabela associada ao modelo no banco de dados.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos excluir registros (dados) de uma tabela do banco de dados usando um modelo?
A: Utilizando o método "Model.delete" passando o ID do registro como argumento.
A: Utilizando o método "Model.remove" passando o ID do registro como argumento.
A: Utilizando o método "Model.destroy" passando o ID do registro como argumento.
CA: Utilizando o método "Model.destroy" passando o ID do registro como argumento, o que excluirá o registro correspondente na tabela associada ao modelo no banco de dados.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos realizar consultas mais complexas usando um modelo?
A: Utilizando o método "Model.query" passando uma string SQL personalizada como argumento.
A: Utilizando o método "Model.custom" passando uma string SQL personalizada como argumento.
A: Utilizando o método "Model.where" passando condições de busca como argumento.
CA: Utilizando o método "Model.where" passando condições de busca como argumento, o que permite realizar consultas mais complexas com filtros, ordenações e outras condições específicas para recuperar os registros desejados do banco de dados.

L: Ruby
S: Manipulação de Bancos de Dados com Ruby
Q: Em Ruby on Rails, como podemos realizar operações de agregação, como soma ou média, em uma coluna do banco de dados usando um modelo?
A: Utilizando o método "Model.aggregate" passando a operação desejada e o nome da coluna como argumentos.
A: Utilizando o método "Model.sum" passando o nome da coluna como argumento.
A: Utilizando o método "Model.calculate" passando a operação desejada e o nome da coluna como argumentos.
CA: Utilizando o método "Model.sum" passando o nome da coluna como argumento, o que calculará a soma dos valores da coluna especificada do banco de dados e retornará o resultado. Outras operações de agregação como média, máximo, mínimo, etc., também podem ser realizadas usando métodos apropriados do ActiveRecord.

L: Ruby
S: Testes Automatizados com RSpec
Q: O que é o RSpec?
A: RSpec é uma biblioteca de testes automatizados para Ruby.
A: RSpec é um framework de desenvolvimento web em Ruby.
A: RSpec é uma linguagem de programação baseada em Ruby.
CA: RSpec é uma biblioteca de testes automatizados para Ruby que permite escrever testes de comportamento em uma linguagem natural, tornando-os mais legíveis e expressivos.

L: Ruby
S: Testes Automatizados com RSpec
Q: Quais são os tipos principais de testes que podemos escrever com o RSpec?
A: Testes de unidade e testes de integração.
A: Testes de desempenho e testes de segurança.
A: Testes de interface e testes de usabilidade.
CA: Testes de unidade, testes de integração e testes de aceitação (também conhecidos como testes de comportamento) são os tipos principais de testes que podemos escrever com o RSpec.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos descrever um comportamento que desejamos testar?
A: Utilizando o método "test" seguido de uma descrição em forma de string.
A: Utilizando o método "describe" seguido de uma descrição em forma de string.
A: Utilizando o método "behavior" seguido de uma descrição em forma de string.
CA: Utilizando o método "describe" seguido de uma descrição em forma de string, que é usado para descrever o comportamento que estamos testando.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos especificar uma expectativa (assertion) em relação ao comportamento do código testado?
A: Utilizando o método "check" seguido de uma condição.
A: Utilizando o método "expect" seguido de uma condição.
A: Utilizando o método "assert" seguido de uma condição.
CA: Utilizando o método "expect" seguido de uma condição e o método "to" ou "not_to" para especificar a expectativa em relação ao comportamento do código testado.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos agrupar exemplos de testes relacionados?
A: Utilizando o método "group" seguido de uma descrição em forma de string.
A: Utilizando o método "context" seguido de uma descrição em forma de string.
A: Utilizando o método "scenario" seguido de uma descrição em forma de string.
CA: Utilizando o método "context" seguido de uma descrição em forma de string, que é usado para agrupar exemplos de testes relacionados e fornecer um contexto para esses testes.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos definir o código que será testado em um exemplo de teste?
A: Utilizando o método "given" seguido do código a ser testado.
A: Utilizando o método "test" seguido do código a ser testado.
A: Utilizando o método "it" seguido do código a ser testado.
CA: Utilizando o método "it" seguido do código a ser testado, que é usado para definir o exemplo de teste e o comportamento esperado.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos executar os testes definidos?
A: Utilizando o comando "run rspec" no terminal.
A: Utilizando o comando "execute rspec" no terminal.
A: Utilizando o comando "rspec" seguido do nome do arquivo de testes.
CA: Utilizando o comando "rspec" seguido do nome do arquivo de testes ou da pasta que contém os arquivos de testes, que executará os testes definidos usando o RSpec.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos criar objetos simulados (mocks) para testar o comportamento de uma classe?
A: Utilizando o método "fake" seguido do nome da classe.
A: Utilizando o método "create_mock" seguido do nome da classe.
A: Utilizando o método "double" seguido do nome da classe.
CA: Utilizando o método "double" seguido do nome da classe, que é usado para criar um objeto simulado (mock) que representa a classe real e permite testar o comportamento esperado.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos verificar se um método de um objeto simulado foi chamado durante o teste?
A: Utilizando o método "verify" seguido do nome do método.
A: Utilizando o método "expect" seguido do nome do método.
A: Utilizando o método "check" seguido do nome do método.
CA: Utilizando o método "expect" seguido do objeto simulado e o método "to" ou "not_to", seguido do nome do método, que é usado para verificar se o método foi chamado (ou não) durante o teste.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos testar exceções (errors) que são levantadas durante a execução do código testado?
A: Utilizando o método "raise_error" seguido do tipo de exceção.
A: Utilizando o método "catch_exception" seguido do tipo de exceção.
A: Utilizando o método "expect" seguido do tipo de exceção.
CA: Utilizando o método "expect" seguido do código que levanta a exceção e o método "to" ou "not_to", seguido de "raise_error(TipoDeExceção)", que é usado para testar exceções que são levantadas durante a execução do código testado.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos verificar se um objeto possui determinado atributo ou método?
A: Utilizando o método "has_attribute" seguido do nome do atributo ou método.
A: Utilizando o método "check_attribute" seguido do nome do atributo ou método.
A: Utilizando o método "expect" seguido do nome do atributo ou método.
CA: Utilizando o método "expect" seguido do objeto e o método "to" ou "not_to", seguido de "respond_to(:atributo_ou_método)", que é usado para verificar se o objeto possui determinado atributo ou método.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos executar um bloco de código antes de cada exemplo de teste?
A: Utilizando o método "before" seguido do bloco de código.
A: Utilizando o método "pre_test" seguido do bloco de código.
A: Utilizando o método "run_before" seguido do bloco de código.
CA: Utilizando o método "before" seguido do bloco de código, que é usado para executar um bloco de código antes de cada exemplo de teste, permitindo configurar o ambiente necessário para o teste.

L: Ruby
S: Testes Automatizados com RSpec
Q: Em RSpec, como podemos executar um bloco de código após cada exemplo de teste?
A: Utilizando o método "after" seguido do bloco de código.
A: Utilizando o método "post_test" seguido do bloco de código.
A: Utilizando o método "run_after" seguido do bloco de código.
CA: Utilizando o método "after" seguido do bloco de código, que é usado para executar um bloco de código após cada exemplo de teste, permitindo limpar recursos ou realizar ações de pós-teste.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Qual é a convenção de nomenclatura para nomear variáveis em Ruby?
A: Variáveis devem ser nomeadas em letras maiúsculas.
A: Variáveis devem ser nomeadas em letras minúsculas.
A: Variáveis devem ser nomeadas usando camelCase.
CA: Variáveis devem ser nomeadas em letras minúsculas, usando snake_case, ou seja, separando palavras com underscores.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: O que é o princípio DRY (Don't Repeat Yourself) em Ruby?
A: É a prática de sempre repetir o código para garantir sua funcionalidade.
A: É a prática de nunca repetir o código para evitar bugs.
A: É a prática de eliminar duplicação de código, utilizando abstrações e reutilização de código.
CA: É a prática de eliminar duplicação de código, utilizando abstrações e reutilização de código sempre que possível, o que torna o código mais limpo, eficiente e fácil de manter.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos comentar uma única linha de código?
A: Utilizando a sintaxe /* comentário */.
A: Utilizando a sintaxe # comentário.
A: Utilizando a sintaxe <!-- comentário -->.
CA: Utilizando a sintaxe # comentário, onde tudo após o símbolo "#" na mesma linha é considerado um comentário e será ignorado pelo interpretador Ruby.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos comentar múltiplas linhas de código?
A: Utilizando a sintaxe /* comentário */.
A: Utilizando a sintaxe # comentário.
A: Utilizando a sintaxe <!-- comentário -->.
CA: Em Ruby, não existe uma sintaxe específica para comentar múltiplas linhas de código de uma só vez. É necessário adicionar o símbolo "#" em cada linha que deseja comentar.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Qual é a diferença entre um método com "!" no final do nome e o mesmo método sem "!"?
A: Não há diferença, o "!" é apenas uma convenção de nomenclatura.
A: O método com "!" realiza a operação de forma mais segura e com tratamento de erros.
A: O método com "!" indica que ele pode modificar o objeto receptor, enquanto o método sem "!" não modifica o objeto original.
CA: O método com "!" indica que ele pode modificar o objeto receptor e pode ser mais perigoso ou imprevisível, enquanto o método sem "!" não modifica o objeto original e é geralmente mais seguro e previsível.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos criar uma cópia rasa (shallow copy) de um array?
A: Utilizando o método clone.
A: Utilizando o método deep_copy.
A: Utilizando o método shallow_copy.
CA: Utilizando o método clone, que cria uma cópia rasa do array, ou seja, os elementos do array são copiados, mas se o array contiver objetos, esses objetos serão compartilhados entre o array original e a cópia.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos criar uma cópia profunda (deep copy) de um array?
A: Utilizando o método deep_copy.
A: Utilizando o método shallow_copy.
A: Utilizando o método clone.
CA: Em Ruby, não existe um método padrão para criar uma cópia profunda de um array. É necessário implementar uma função personalizada ou utilizar alguma biblioteca externa para realizar uma cópia profunda de um array que contenha objetos.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, o que é um símbolo (symbol)?
A: Um símbolo é uma string imutável que representa um valor ou nome em uma tabela de símbolos.
A: Um símbolo é uma variável especial que não pode ser alterada.
A: Um símbolo é uma função especial que retorna um valor específico.
CA: Um símbolo é uma string imutável que representa um valor ou nome em uma tabela de símbolos, sendo frequentemente utilizado como chaves de hashes ou para identificar constantes.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, o que é o método "attr_accessor" e para que serve?
A: "attr_accessor" é um método para definir getters e setters de atributos de uma classe.
A: "attr_accessor" é um método para definir atributos privados em uma classe.
A: "attr_accessor" é um método para definir métodos de classe em Ruby.
CA: "attr_accessor" é um método para definir getters (métodos de leitura) e setters (métodos de escrita) de atributos de instância em uma classe de forma mais concisa. Ele cria automaticamente os métodos getter e setter para os atributos especificados, permitindo o acesso e a modificação desses atributos.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, qual é a diferença entre uma classe e um módulo?
A: Uma classe é uma coleção de métodos e variáveis, enquanto um módulo é uma coleção de constantes e funções.
A: Uma classe pode ser instanciada para criar objetos, enquanto um módulo não pode ser instanciado.
A: Uma classe pode herdar de outras classes, enquanto um módulo não pode herdar de outras classes.
CA: Em Ruby, uma classe é uma estrutura que define um objeto e pode ser instanciada para criar objetos, enquanto um módulo é uma coleção de métodos, constantes e variáveis que pode ser incluída em classes para estender suas funcionalidades, mas não pode ser instanciado diretamente.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos incluir um módulo em uma classe?
A: Utilizando o método "include" seguido do nome do módulo.
A: Utilizando o método "extend" seguido do nome do módulo.
A: Utilizando o método "add_module" seguido do nome do módulo.
CA: Utilizando o método "include" seguido do nome do módulo, que permite incluir os métodos, constantes e variáveis do módulo na classe, estendendo suas funcionalidades.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos definir uma constante em uma classe?
A: Utilizando o método "set_constant" seguido do nome da constante.
A: Utilizando o método "constant" seguido do nome da constante.
A: Utilizando o método "CONSTANT" seguido do nome da constante.
CA: Em Ruby, as constantes são definidas utilizando a sintaxe de nome em maiúsculas. Por exemplo, para definir uma constante chamada "PI", basta escrever "PI = 3.14159" dentro da classe.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos acessar uma constante definida em uma classe?
A: Utilizando o método "get_constant" seguido do nome da constante.
A: Utilizando o método "CONSTANT" seguido do nome da constante.
A: Utilizando o método "constant" seguido do nome da constante.
CA: Para acessar uma constante definida em uma classe, basta utilizar o nome da classe seguido de "::" e o nome da constante. Por exemplo, se a classe é "Math" e a constante é "PI", pode-se acessá-la como "Math::PI".

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos definir um método de classe (método estático)?
A: Utilizando o método "class_method" seguido do nome do método.
A: Utilizando o método "static_method" seguido do nome do método.
A: Utilizando o método "self.method" seguido do nome do método.
CA: Em Ruby, um método de classe é definido utilizando a palavra-chave "self" seguida de um ponto e o nome do método. Por exemplo, para definir um método de classe chamado "calculate", basta escrever "def self.calculate" dentro da classe.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, o que é um bloco?
A: Um bloco é um trecho de código que é executado apenas uma vez.
A: Um bloco é um trecho de código delimitado pelas palavras-chave "begin" e "end".
A: Um bloco é um trecho de código delimitado pelas chaves "{" e "}" ou pelas palavras-chave "do" e "end", que pode ser passado como argumento para um método.
CA: Em Ruby, um bloco é um trecho de código delimitado pelas chaves "{" e "}" ou pelas palavras-chave "do" e "end". Blocos podem ser passados como argumentos para métodos e são frequentemente utilizados com métodos que aceitam blocos, como os de iteração.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, qual é a diferença entre um bloco e uma lambda (proc)?
A: Não há diferença, um bloco e uma lambda são a mesma coisa.
A: Um bloco é uma função anônima e uma lambda é uma função nomeada.
A: Blocos não são objetos, enquanto lambdas são objetos Proc.
CA: Em Ruby, um bloco é uma função anônima que não é um objeto e é passado implicitamente para um método, enquanto uma lambda (ou proc) é um objeto que representa uma função anônima e pode ser armazenada em uma variável ou passada explicitamente para um método.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, o que é uma exceção (exception)?
A: Uma exceção é um erro de sintaxe no código que impede sua execução.
A: Uma exceção é um bloco de código que é executado quando ocorre um erro.
A: Uma exceção é um objeto que representa um erro ou condição excepcional que ocorreu durante a execução do código.
CA: Em Ruby, uma exceção é um objeto que representa um erro ou condição excepcional que ocorreu durante a execução do código. Quando um erro ocorre, uma exceção é lançada (thrown) e o programa pode capturá-la (catch) para tratá-la apropriadamente.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, como podemos lidar com exceções usando o bloco "begin" e "rescue"?
A: Utilizando o bloco "try" e "catch".
A: Utilizando o bloco "try" e "except".
A: Utilizando o bloco "begin" e "rescue".
CA: Utilizando o bloco "begin" e "rescue", onde o código que pode gerar uma exceção é colocado dentro do bloco "begin", e o bloco "rescue" é usado para capturar a exceção e executar um tratamento específico caso ela ocorra.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, qual é a forma recomendada de lidar com exceções?
A: Sempre capturar todas as exceções e exibir mensagens de erro detalhadas.
A: Sempre ignorar as exceções, pois elas são raras e não afetam o funcionamento do programa.
A: Capturar apenas as exceções específicas que podem ser tratadas e deixar outras exceções não capturadas para o sistema lidar.
CA: A forma recomendada de lidar com exceções em Ruby é capturar apenas as exceções específicas que podem ser tratadas e deixar outras exceções não capturadas para o sistema lidar. Isso permite tratar os erros de forma adequada e garantir que o programa não pare de funcionar inesperadamente.

L: Ruby
S: Boas Práticas de Programação em Ruby
Q: Em Ruby, qual é a importância de usar a herança de classes?
A: A herança de classes permite que uma classe tenha vários construtores.
A: A herança de classes permite que uma classe herde os métodos e atributos de outra classe, facilitando a reutilização de código.
A: A herança de classes permite que uma classe seja declarada como privada e não seja acessível por outras classes.
CA: A herança de classes permite que uma classe herde os métodos e atributos de outra classe, facilitando a reutilização de código e permitindo criar uma hierarquia de classes, onde as subclasses herdam o comportamento da classe pai (superclasse) e podem adicionar comportamentos específicos. Isso promove o princípio do DRY (Don't Repeat Yourself) e torna o código mais organizado e modular.

L: Ruby
S: Lógica da Programação em Ruby
Q: O que é lógica de programação?
A: Lógica de programação é a forma como os algoritmos e programas são estruturados para resolver problemas de maneira sequencial e lógica.
A: Lógica de programação é a capacidade de escrever códigos complexos sem erros.
A: Lógica de programação é o uso de bibliotecas e frameworks para desenvolver programas em Ruby.
CA: Lógica de programação é a habilidade de organizar, estruturar e ordenar as instruções em um algoritmo de forma lógica e coerente, a fim de resolver um problema específico.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos declarar uma variável e atribuir um valor a ela?
A: Utilizando a palavra-chave "let" seguida do nome da variável e o valor atribuído.
A: Utilizando a palavra-chave "var" seguida do nome da variável e o valor atribuído.
A: Utilizando o símbolo "=" seguido do nome da variável e o valor atribuído.
CA: Em Ruby, podemos declarar uma variável simplesmente atribuindo um valor a ela, como por exemplo: "nome = 'João'".

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos exibir uma mensagem na tela?
A: Utilizando o método "print" seguido da mensagem entre aspas.
A: Utilizando o método "puts" seguido da mensagem entre aspas.
A: Utilizando o método "display" seguido da mensagem entre aspas.
CA: Em Ruby, podemos exibir uma mensagem na tela utilizando o método "puts" seguido da mensagem entre aspas, por exemplo: "puts 'Olá, mundo!'". O método "puts" também adiciona uma quebra de linha após exibir a mensagem.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos ler um valor digitado pelo usuário?
A: Utilizando o método "input" seguido de uma variável para armazenar o valor digitado.
A: Utilizando o método "gets" seguido de uma variável para armazenar o valor digitado.
A: Utilizando o método "read" seguido de uma variável para armazenar o valor digitado.
CA: Em Ruby, podemos ler um valor digitado pelo usuário utilizando o método "gets" seguido de uma variável para armazenar o valor, por exemplo: "nome = gets.chomp".

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos converter uma string para um número inteiro?
A: Utilizando o método "to_i" após a string.
A: Utilizando o método "int" após a string.
A: Utilizando o método "parse_int" após a string.
CA: Em Ruby, podemos converter uma string para um número inteiro utilizando o método "to_i", por exemplo: "numero = '10'.to_i".

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos converter um número inteiro para uma string?
A: Utilizando o método "to_string" após o número inteiro.
A: Utilizando o método "parse_string" após o número inteiro.
A: Utilizando o método "to_s" após o número inteiro.
CA: Em Ruby, podemos converter um número inteiro para uma string utilizando o método "to_s", por exemplo: "numero = 10.to_s".

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar estruturas condicionais para tomar decisões no código?
A: Utilizando o método "if" para verificar se uma condição é verdadeira e executar um bloco de código.
A: Utilizando o método "switch" para avaliar múltiplas condições e executar o código correspondente.
A: Utilizando o método "check" para verificar a validade de uma expressão matemática.
CA: Em Ruby, podemos usar estruturas condicionais para tomar decisões utilizando o método "if" para verificar se uma condição é verdadeira e, caso seja, executar um bloco de código específico.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "if..else" para tomar decisões alternativas?
A: Utilizando o método "if" seguido do bloco de código a ser executado se a condição for verdadeira, e o método "else" seguido do bloco de código a ser executado se a condição for falsa.
A: Utilizando o método "if" seguido do bloco de código a ser executado se a condição for falsa, e o método "else" seguido do bloco de código a ser executado se a condição for verdadeira.
A: Utilizando o método "condition" seguido do bloco de código a ser executado se a condição for verdadeira, e o método "otherwise" seguido do bloco de código a ser executado se a condição for falsa.
CA: Em Ruby, podemos usar a estrutura "if..else" para tomar decisões alternativas, onde o bloco de código após o "if" é executado se a condição for verdadeira, e o bloco de código após o "else" é executado se a condição for falsa.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "if..elsif..else" para tomar decisões múltiplas?
A: Utilizando o método "if" seguido do bloco de código a ser executado se a primeira condição for verdadeira, o método "elsif" seguido do bloco de código a ser executado se a segunda condição for verdadeira, e o método "else" seguido do bloco de código a ser executado se nenhuma das condições anteriores for verdadeira.
A: Utilizando o método "switch" seguido de várias condições e os blocos de código a serem executados para cada uma das condições.
A: Utilizando o método "check" seguido de várias expressões matemáticas e os blocos de código a serem executados para cada uma das expressões.
CA: Em Ruby, podemos usar a estrutura "if..elsif..else" para tomar decisões múltiplas, onde o bloco de código após o "if" é executado se a primeira condição for verdadeira, o bloco de código após o "elsif" é executado se a segunda condição for verdadeira, e o bloco de código após o "else" é executado se nenhuma das condições anteriores for verdadeira.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar operadores lógicos (AND, OR, NOT) para combinar condições?
A: Utilizando os operadores "&" (AND), "|" (OR) e "!" (NOT).
A: Utilizando as palavras-chave "AND", "OR" e "NOT".
A: Utilizando os operadores "&&" (AND), "||" (OR) e "!" (NOT).
CA: Em Ruby, podemos usar os operadores lógicos "&&" (AND), "||" (OR) e "!" (NOT) para combinar condições em estruturas condicionais e avaliar múltiplas expressões lógicas.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "unless" para fazer uma verificação negativa?
A: Utilizando o método "unless" seguido da condição e do bloco de código a ser executado se a condição for falsa.
A: Utilizando o método "not" seguido da condição e do bloco de código a ser executado se a condição for verdadeira.
A: Utilizando o método "if" seguido da condição negada (com o operador "!" antes da condição) e do bloco de código a ser executado se a condição for falsa.
CA: Em Ruby, podemos usar a estrutura "unless" para fazer uma verificação negativa, onde o bloco de código após o "unless" é executado se a condição for falsa.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar estruturas de repetição para repetir um bloco de código várias vezes?
A: Utilizando o método "loop" para criar um loop infinito.
A: Utilizando o método "for" para iterar sobre uma coleção de elementos.
A: Utilizando o método "while" para repetir um bloco de código enquanto a condição for verdadeira.
CA: Em Ruby, podemos usar o método "while" para repetir um bloco de código enquanto a condição especificada for verdadeira.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar o método "times" para executar um bloco de código um número específico de vezes?
A: Utilizando o método "times" seguido do número de repetições e do bloco de código a ser executado.
A: Utilizando o método "repeat" seguido do número de repetições e do bloco de código a ser executado.
A: Utilizando o método "for" seguido do número de repetições e do bloco de código a ser executado.
CA: Em Ruby, podemos usar o método "times" para executar um bloco de código um número específico de vezes, como por exemplo: "5.times { puts 'Olá!' }".

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar o método "each" para iterar sobre uma coleção de elementos?
A: Utilizando o método "each" seguido da coleção e do bloco de código a ser executado para cada elemento.
A: Utilizando o método "for" seguido da coleção e do bloco de código a ser executado para cada elemento.
A: Utilizando o método "iterate" seguido da coleção e do bloco de código a ser executado para cada elemento.
CA: Em Ruby, podemos usar o método "each" para iterar sobre uma coleção de elementos, como por exemplo: "[1, 2, 3].each { |numero| puts numero }".

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "for..in" para iterar sobre uma coleção de elementos?
A: Utilizando a estrutura "for elemento in colecao" seguida do bloco de código a ser executado para cada elemento.
A: Utilizando a estrutura "foreach elemento in colecao" seguida do bloco de código a ser executado para cada elemento.
A: Utilizando a estrutura "each elemento in colecao" seguida do bloco de código a ser executado para cada elemento.
CA: Em Ruby, a estrutura "for..in" não é a forma mais recomendada de iterar sobre uma coleção de elementos. A forma mais idiomática em Ruby é usar o método "each", como mencionado anteriormente.

L: Ruby
S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar o método "upto" para iterar sobre um intervalo de valores?
A: Utilizando o método "upto" seguido do valor inicial e final do intervalo e do bloco de código a ser executado para cada valor.
A: Utilizando o método "from" seguido do valor inicial e do método "to" seguido do valor final do intervalo e do bloco de código a ser executado para cada valor.
A: Utilizando o método "range" seguido dos valores inicial e final do intervalo e do bloco de código a ser executado para cada valor.
CA: Em Ruby, podemos usar o método "upto" para iterar sobre um intervalo de valores, como por exemplo: "1.upto(5) { |numero| puts numero }".

S: Lógica da Programação em Ruby
Q: Em Ruby, como podemos usar a estrutura "times" para criar um loop de repetição com um contador?
A: Utilizando o método "times" seguido do bloco de código a ser executado e um contador externo que é incrementado a cada iteração.
A: Utilizando o método "times" seguido do bloco de código a ser executado, e um contador interno que é automaticamente incrementado a cada iteração.
A: Utilizando o método "times" seguido do bloco de código a ser executado, e um contador que é declarado e incrementado manualmente dentro do bloco.
CA: Em Ruby, podemos usar o método "times" para criar um loop de repetição com um contador interno que é automaticamente incrementado a cada iteração, facilitando a repetição de um bloco de código um número específico de vezes.

L: Ruby
S: Algoritmos em Ruby
Q: O que é um algoritmo?
A: Um algoritmo é uma sequência finita de instruções lógicas e bem definidas que descrevem a solução de um problema.
A: Um algoritmo é um conjunto de palavras-chave e símbolos usados para escrever código em uma linguagem de programação.
A: Um algoritmo é um tipo de dado usado para armazenar informações em um programa.
CA: Um algoritmo é uma sequência finita e ordenada de instruções que descrevem um processo ou solução para um problema, permitindo a realização de tarefas computacionais.

L: Ruby
S: Algoritmos em Ruby
Q: Em Ruby, qual é a forma mais comum de representar um algoritmo?
A: Utilizando diagramas de fluxo.
A: Utilizando pseudocódigo.
A: Utilizando listas numeradas.
CA: Em Ruby, a forma mais comum de representar um algoritmo é através de pseudocódigo, que é uma forma de descrição abstrata do algoritmo, usando uma mistura de linguagem natural e elementos da linguagem de programação, para facilitar a compreensão da lógica do algoritmo antes de escrevê-lo em código real.

L: Ruby
S: Algoritmos em Ruby
Q: Em Ruby, o que é uma variável?
A: Uma variável é um valor fixo que não pode ser alterado durante a execução do programa.
A: Uma variável é uma sequência de caracteres usada para identificar um nome ou valor.
A: Uma variável é um local de armazenamento na memória que pode conter valores que podem ser alterados durante a execução do programa.
CA: Em Ruby, uma variável é um local de armazenamento na memória que pode conter valores que podem ser alterados durante a execução do programa. Ela é identificada por um nome e pode ser utilizada para armazenar e manipular dados dentro do código.

L: Ruby
S: Algoritmos em Ruby
Q: Em Ruby, como podemos declarar uma variável?
A: Utilizando a palavra-chave "let" seguida do nome da variável e o valor inicial.
A: Utilizando a palavra-chave "var" seguida do nome da variável e o valor inicial.
A: Utilizando o símbolo "=" seguido do nome da variável e o valor inicial.
CA: Em Ruby, podemos declarar uma variável simplesmente atribuindo um valor a ela, como por exemplo: "nome = 'Maria'".

L: Ruby
S: Algoritmos em Ruby
Q: Em Ruby, o que é uma estrutura condicional?
A: Uma estrutura condicional é uma sequência de passos que deve ser executada várias vezes.
A: Uma estrutura condicional é uma decisão tomada em tempo de execução, com base em uma condição específica.
A: Uma estrutura condicional é uma forma de representar um algoritmo usando diagramas de fluxo.
CA: Em Ruby, uma estrutura condicional é uma forma de controlar o fluxo de execução de um programa, permitindo que um bloco de código seja executado apenas se uma condição específica for atendida.

L: Ruby
S: Algoritmos em Ruby
Q: Em Ruby, como podemos representar uma estrutura condicional?
A: Utilizando a palavra-chave "condition" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira.
A: Utilizando a palavra-chave "if" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira.
A: Utilizando a palavra-chave "verify" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira.
CA: Em Ruby, podemos representar uma estrutura condicional utilizando a palavra-chave "if" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, por exemplo: "if idade >= 18".

L: Ruby
S: Algoritmos em Ruby
Q: Em Ruby, como podemos representar uma estrutura condicional com uma opção alternativa?
A: Utilizando a palavra-chave "if" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, e a palavra-chave "else" seguida do bloco de código a ser executado se a condição for falsa.
A: Utilizando a palavra-chave "option" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, e a palavra-chave "alternative" seguida do bloco de código a ser executado se a condição for falsa.
A: Utilizando a palavra-chave "choose" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, e a palavra-chave "otherwise" seguida do bloco de código a ser executado se a condição for falsa.
CA: Em Ruby, podemos representar uma estrutura condicional com uma opção alternativa utilizando a palavra-chave "if" seguida da condição a ser verificada e o bloco de código a ser executado se a condição for verdadeira, e a palavra-chave "else" seguida do bloco de código a ser executado se a condição for falsa, por exemplo: "if idade >= 18\n puts 'Maior de idade'\nelse\n puts 'Menor de idade'\nend".

===================================================================================================================================================================
===================================================================================================================================================================
==================================================================================================================================================================
==================================================================================================================================================================

L: Java
S: Introdução ao Java e sua história
Q: Quem é o criador da linguagem de programação Java?
A: James Gosling
A: Guido van Rossum
A: Larry Page
CA: James Gosling

L: Java
S: Introdução ao Java e sua história
Q: Em que ano a linguagem de programação Java foi criada?
A: 1995
A: 2001
A: 1983
CA: 1995

L: Java
S: Introdução ao Java e sua história
Q: Qual dos seguintes termos é frequentemente associado à filosofia de design da linguagem Java?
A: "Sempre use parênteses para chamar funções."
A: "Mantenha a simplicidade e a elegância."
A: "Evite o uso de estruturas de controle de fluxo."
CA: "Escreva uma vez, execute em qualquer lugar" (Write Once, Run Anywhere).

L: Java
S: Introdução ao Java e sua história
Q: Quais são os dois principais objetivos dos criadores do Java ao desenvolver a linguagem?
A: Torná-la rápida e leve.
A: Torná-la altamente segura e imutável.
A: Torná-la complexa e desafiadora.
CA: Torná-la portável e robusta para ser usada em dispositivos diversos e em ambientes distribuídos.

L: Java
S: Introdução ao Java e sua história
Q: Quais são os princípios fundamentais que guiaram o desenvolvimento da linguagem Java?
A: Orientação a Objeto e Programação Funcional
A: Simplicidade e Minimalismo
A: Escalabilidade e Tolerância a Falhas
CA: Portabilidade e Segurança

L: Java
S: Introdução ao Java e sua história
Q: Em que contexto a linguagem de programação Java foi originalmente concebida?
A: Para desenvolver aplicações web interativas
A: Para criar sistemas operacionais
A: Para controlar dispositivos móveis
CA: Para construir aparelhos eletrônicos de consumo

L: Java
S: Introdução ao Java e sua história
Q: O que motivou a criação da linguagem de programação Java?
A: A necessidade de substituir o código Assembly por algo mais legível.
A: A demanda por uma linguagem mais rápida que C++.
A: A crescente popularidade das linguagens interpretadas.
CA: A busca por uma linguagem portável que pudesse ser executada em diferentes plataformas.

L: Java
S: Introdução ao Java e sua história
Q: Quais são algumas das características que tornaram o Java uma escolha popular para o desenvolvimento de aplicativos empresariais?
A: A sintaxe simplificada e a ausência de exceções.
A: A dependência exclusiva de bibliotecas de terceiros para funcionalidades.
A: A ausência de gerenciamento automático de memória.
CA: O suporte a multithreading e a robustez proporcionada pelo gerenciamento de memória automático.

L: Java
S: Introdução ao Java e sua história
Q: Qual é o significado da frase "Write Once, Run Anywhere" (Escreva uma vez, execute em qualquer lugar) associada ao Java?
A: Os programas escritos em Java podem ser executados apenas em um sistema operacional específico.
A: Os programas escritos em Java podem ser executados em qualquer dispositivo, independentemente do sistema operacional.
A: Os programas escritos em Java requerem a reescrita completa para serem executados em diferentes sistemas.
CA: Os programas escritos em Java são compilados em bytecode que pode ser executado em qualquer plataforma que possua uma máquina virtual Java (JVM).

L: Java
S: Introdução ao Java e sua história
Q: Qual é o componente essencial que permite a portabilidade do Java em diferentes sistemas operacionais?
A: O compilador Java
A: A máquina virtual Java (JVM)
A: O depurador Java
CA: O Java Development Kit (JDK)

L: Java
S: Introdução ao Java e sua história
Q: O que é o "Java Community Process" (JCP)?
A: Uma organização internacional que estabelece as diretrizes para a criação de programas Java.
A: Um ambiente de desenvolvimento integrado usado exclusivamente para projetos Java.
A: Uma rede social para desenvolvedores Java compartilharem seus códigos.
CA: Um processo colaborativo que permite que a comunidade participe do desenvolvimento e evolução das tecnologias Java.

L: Java
S: Introdução ao Java e sua história
Q: Além da criação de aplicações de desktop e web, quais são outras áreas em que a linguagem Java se destacou?
A: Jogos e entretenimento
A: Inteligência Artificial e Machine Learning
A: Edição e processamento de imagens
CA: Desenvolvimento Android e aplicativos móveis

L: Java
S: Instalação do ambiente Java
Q: Qual é a diferença entre o Java Development Kit (JDK) e o Java Runtime Environment (JRE)?
A: O JDK é necessário apenas para desenvolvedores, enquanto o JRE é suficiente para executar aplicativos Java.
A: O JDK inclui a máquina virtual Java (JVM), mas o JRE não.
A: O JRE é usado apenas para ambientes de desenvolvimento, enquanto o JDK é necessário em produção.
CA: O JDK contém todas as ferramentas necessárias para desenvolver e executar aplicativos Java, enquanto o JRE é apenas para executar aplicativos.

L: Java
S: Instalação do ambiente Java
Q: Quais são os passos básicos para instalar o Java Development Kit (JDK) em um sistema Windows?
A: Baixar o Eclipse IDE e o JDK diretamente do site da Oracle.
A: Executar um arquivo de instalação do JDK e seguir as instruções do assistente de instalação.
A: O JDK já vem pré-instalado em sistemas Windows, portanto, nenhuma ação é necessária.
CA: Acessar o site da Oracle, baixar o instalador do JDK adequado para o sistema operacional Windows e executá-lo. Em seguida, seguir as instruções do assistente de instalação.

L: Java
S: Instalação do ambiente Java
Q: Quais são os passos básicos para instalar o Java Development Kit (JDK) em um sistema macOS?
A: Baixar e instalar o NetBeans IDE, que inclui o JDK necessário.
A: Usar o gerenciador de pacotes Homebrew para instalar o JDK.
A: O JDK já vem pré-instalado em sistemas macOS, portanto, nenhuma ação é necessária.
CA: Acessar o site da Oracle, baixar o instalador do JDK adequado para macOS e executá-lo. Em seguida, seguir as instruções do assistente de instalação.

L: Java
S: Instalação do ambiente Java
Q: Quais são os passos básicos para instalar o Java Development Kit (JDK) em um sistema Linux?
A: Baixar e instalar o IntelliJ IDEA, que inclui o JDK necessário.
A: Usar o gerenciador de pacotes do sistema para instalar o pacote OpenJDK correspondente ao JDK.
A: O JDK já vem pré-instalado em sistemas Linux, portanto, nenhuma ação é necessária.
CA: Utilizar o gerenciador de pacotes do sistema Linux para instalar o pacote OpenJDK correspondente ao JDK. Por exemplo, em distribuições baseadas em Debian, pode-se usar o comando "sudo apt-get install openjdk-11-jdk" para instalar o OpenJDK 11.

L: Java
S: Instalação do ambiente Java
Q: Após a instalação do JDK, como se configura a variável de ambiente "JAVA_HOME"?
A: Não é necessário configurar a variável "JAVA_HOME" após a instalação do JDK.
A: Abrir o arquivo "java_home.sh" na pasta de instalação do JDK e editar a variável manualmente.
A: Utilizar o painel de controle do sistema operacional para configurar a variável "JAVA_HOME".
CA: Configurar manualmente a variável "JAVA_HOME" apontando-a para o diretório de instalação do JDK. Por exemplo, no Windows, "JAVA_HOME" pode ser definido como "C:\Program Files\Java\jdk1.8.0_301".

L: Java
S: Instalação do ambiente Java
Q: Após instalar o JDK e configurar a variável "JAVA_HOME", como se configura a variável de ambiente "PATH" para executar comandos Java em qualquer diretório?
A: Adicionar manualmente o caminho para o diretório "bin" do JDK à variável "PATH".
A: Reiniciar o computador após a instalação do JDK para que a variável "PATH" seja configurada automaticamente.
A: A variável "PATH" é configurada automaticamente pelo instalador do JDK, portanto, nenhum passo adicional é necessário.
CA: Adicionar o caminho para o diretório "bin" do JDK à variável "PATH". Por exemplo, no Windows, pode-se editar a variável "PATH" e acrescentar ";C:\Program Files\Java\jdk1.8.0_301\bin".

L: Java
S: Instalação do ambiente Java
Q: Para verificar se o JDK foi instalado corretamente e as variáveis de ambiente estão configuradas adequadamente, qual comando é usado no prompt de comando ou terminal?
A: java -v
A: javac -version
A: jdk --version
CA: java -version

L: Java
S: Instalação do ambiente Java
Q: Além do JDK, o que mais pode ser necessário para um ambiente de desenvolvimento Java completo?
A: Um editor de texto simples, como o Bloco de Notas (Notepad) do Windows.
A: Um navegador web atualizado para testar os aplicativos Java.
A: Um servidor web Apache configurado para executar aplicativos Java.
CA: Uma Integrated Development Environment (IDE), como Eclipse, IntelliJ IDEA ou NetBeans, para facilitar a programação e o gerenciamento de projetos Java.

L: Java
S: Instalação do ambiente Java
Q: É possível ter várias versões do JDK instaladas em um mesmo sistema? Se sim, como é possível alternar entre elas?
A: Sim, é possível ter várias versões do JDK instaladas. A alternância entre elas é feita configurando a variável "JAVA_HOME" para apontar para o diretório da versão desejada.
A: Não, apenas uma versão do JDK pode estar instalada em um sistema.
A: Sim, mas é necessário desinstalar a versão anterior antes de instalar uma nova.
CA: Sim, é possível ter várias versões do JDK instaladas. A alternância entre elas é feita selecionando a versão desejada usando ferramentas como "update-alternatives" no Linux ou por meio das configurações do sistema no Windows.

L: Java
S: Tipos de dados primitivos em Java
Q: Quais são os tipos de dados primitivos em Java?
A: int, double, boolean, char
A: float, long, byte, short
A: string, array, object, enum
CA: int, double, boolean, char, float, long, byte, short

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o tamanho em bits do tipo de dados primitivo "int" em Java?
A: 8 bits
A: 16 bits
A: 32 bits
CA: 32 bits

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o tamanho em bits do tipo de dados primitivo "double" em Java?
A: 16 bits
A: 32 bits
A: 64 bits
CA: 64 bits

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o tamanho em bits do tipo de dados primitivo "boolean" em Java?
A: 8 bits
A: 16 bits
A: 32 bits
CA: O tamanho do tipo boolean em Java não é especificado em bits, mas geralmente é considerado como 1 bit.

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o tamanho em bits do tipo de dados primitivo "char" em Java?
A: 8 bits
A: 16 bits
A: 32 bits
CA: 16 bits

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor mínimo representável pelo tipo de dados primitivo "int" em Java?
A: -128
A: -32,768
A: -2,147,483,648
CA: -2,147,483,648

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor máximo representável pelo tipo de dados primitivo "int" em Java?
A: 127
A: 32,767
A: 2,147,483,647
CA: 2,147,483,647

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor mínimo representável pelo tipo de dados primitivo "char" em Java?
A: 0
A: -128
A: -32,768
CA: 0

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor máximo representável pelo tipo de dados primitivo "char" em Java?
A: 127
A: 255
A: 65,535
CA: 65,535

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor mínimo representável pelo tipo de dados primitivo "double" em Java?
A: -1.4 x 10^45
A: -1.7 x 10^308
A: -3.4 x 10^38
CA: -1.7 x 10^308

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor máximo representável pelo tipo de dados primitivo "double" em Java?
A: 1.4 x 10^45
A: 1.7 x 10^308
A: 3.4 x 10^38
CA: 1.7 x 10^308

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor mínimo representável pelo tipo de dados primitivo "float" em Java?
A: -1.4 x 10^45
A: -1.7 x 10^308
A: -3.4 x 10^38
CA: -3.4 x 10^38

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor máximo representável pelo tipo de dados primitivo "float" em Java?
A: 1.4 x 10^45
A: 1.7 x 10^308
A: 3.4 x 10^38
CA: 3.4 x 10^38

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o tamanho em bits do tipo de dados primitivo "long" em Java?
A: 32 bits
A: 64 bits
A: 128 bits
CA: 64 bits

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor mínimo representável pelo tipo de dados primitivo "long" em Java?
A: -2^31
A: -2^63
A: -2^127
CA: -2^63

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor máximo representável pelo tipo de dados primitivo "long" em Java?
A: 2^31 - 1
A: 2^63 - 1
A: 2^127 - 1
CA: 2^63 - 1

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o tamanho em bits do tipo de dados primitivo "byte" em Java?
A: 8 bits
A: 16 bits
A: 32 bits
CA: 8 bits

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor mínimo representável pelo tipo de dados primitivo "byte" em Java?
A: -128
A: -32,768
A: -2,147,483,648
CA: -128

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor máximo representável pelo tipo de dados primitivo "byte" em Java?
A: 127
A: 32,767
A: 2,147,483,647
CA: 127

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o tamanho em bits do tipo de dados primitivo "short" em Java?
A: 8 bits
A: 16 bits
A: 32 bits
CA: 16 bits

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor mínimo representável pelo tipo de dados primitivo "short" em Java?
A: -128
A: -32,768
A: -2,147,483,648
CA: -32,768

L: Java
S: Tipos de dados primitivos em Java
Q: Qual é o valor máximo representável pelo tipo de dados primitivo "short" em Java?
A: 127
A: 32,767
A: 2,147,483,647
CA: 32,767

L: Java
S: Variáveis, constantes e escopo em Java
Q: Qual é a diferença entre uma variável e uma constante em Java?
A: Em Java, uma variável pode ter seu valor alterado durante a execução do programa, enquanto uma constante tem um valor fixo que não pode ser alterado.
A: Variáveis e constantes são termos sinônimos em Java, ambos são usados para armazenar valores.
A: Uma variável é utilizada para armazenar valores numéricos, enquanto uma constante é utilizada para armazenar valores textuais.
CA: Em Java, uma variável pode ter seu valor alterado durante a execução do programa, enquanto uma constante é um identificador para um valor fixo que não pode ser modificado após a sua atribuição.

L: Java
S: Variáveis, constantes e escopo em Java
Q: Qual é a palavra-chave usada para definir uma constante em Java?
A: const
A: let
A: final
CA: final

L: Java
S: Variáveis, constantes e escopo em Java
Q: Quais são as regras para nomear variáveis em Java?
A: O nome de uma variável pode começar com um número.
A: O nome de uma variável pode conter espaços em branco.
A: O nome de uma variável pode conter caracteres especiais, como @, # ou $.
CA: O nome de uma variável deve começar com uma letra (a-z ou A-Z) ou o caractere underscore (_) e pode conter letras, dígitos e underscores. O nome não pode começar com um número e não pode ser uma palavra reservada do Java.

L: Java
S: Variáveis, constantes e escopo em Java
Q: Qual é a diferença entre escopo de classe (ou atributo) e escopo de método (ou variável local) em Java?
A: O escopo de classe se refere a variáveis que podem ser acessadas por qualquer método dentro da classe, enquanto o escopo de método se refere a variáveis que só podem ser acessadas dentro do método em que foram declaradas.
A: O escopo de classe se refere a variáveis que só podem ser acessadas dentro do método em que foram declaradas, enquanto o escopo de método se refere a variáveis que podem ser acessadas por qualquer método dentro da classe.
A: Escopo de classe e escopo de método são termos sinônimos em Java, ambos se referem às variáveis usadas em um programa.
CA: O escopo de classe (ou atributo) se refere a variáveis declaradas a nível de classe, ou seja, fora de qualquer método, e estão disponíveis para todos os métodos dessa classe. O escopo de método (ou variável local) se refere a variáveis declaradas dentro de um método e só podem ser acessadas dentro desse método.

L: Java
S: Variáveis, constantes e escopo em Java
Q: Qual é a diferença entre variáveis locais e variáveis de instância (ou atributos) em Java?
A: Variáveis locais são declaradas dentro de um método e têm escopo limitado a esse método, enquanto variáveis de instância são declaradas dentro da classe e podem ser acessadas por todos os métodos dessa classe.
A: Variáveis locais são declaradas dentro de um método e têm escopo limitado a esse método, enquanto variáveis de instância são declaradas dentro de um bloco de código e podem ser acessadas por todos os métodos desse bloco.
A: Variáveis locais são declaradas dentro de um bloco de código e têm escopo limitado a esse bloco, enquanto variáveis de instância são declaradas dentro de um método e podem ser acessadas por todos os métodos desse método.
CA: Variáveis locais são declaradas dentro de um método e têm um escopo limitado a esse método, o que significa que elas só podem ser acessadas dentro desse método. Variáveis de instância (ou atributos) são declaradas a nível de classe, fora de qualquer método, e estão disponíveis para todos os métodos dessa classe.

L: Java
S: Variáveis, constantes e escopo em Java
Q: Qual é o escopo das variáveis de instância em Java?
A: O escopo das variáveis de instância é limitado a um único método dentro da classe onde foram declaradas.
A: O escopo das variáveis de instância é limitado a um bloco de código dentro da classe onde foram declaradas.
A: O escopo das variáveis de instância é limitado a toda a classe e elas podem ser acessadas por todos os métodos dentro dessa classe.
CA: O escopo das variáveis de instância abrange toda a classe, o que significa que elas podem ser acessadas e utilizadas por todos os métodos dentro dessa classe.

L: Java
S: Variáveis, constantes e escopo em Java
Q: Qual é o escopo das variáveis locais em Java?
A: O escopo das variáveis locais é limitado a um único método onde foram declaradas.
A: O escopo das variáveis locais é limitado a toda a classe e elas podem ser acessadas por todos os métodos dentro dessa classe.
A: O escopo das variáveis locais é limitado a uma única linha de código onde foram declaradas.
CA: O escopo das variáveis locais é limitado ao bloco de código onde foram declaradas, ou seja, elas só podem ser acessadas dentro do método em que foram definidas.

L: Java
S: Variáveis, constantes e escopo em Java
Q: As variáveis locais precisam ser inicializadas antes de serem utilizadas em Java?
A: Não, as variáveis locais são inicializadas automaticamente com um valor padrão.
A: Sim, todas as variáveis locais devem ser inicializadas antes de serem utilizadas.
A: Apenas as variáveis locais que são do tipo primitivo precisam ser inicializadas, as variáveis de referência não.
CA: Sim, todas as variáveis locais devem ser inicializadas antes de serem utilizadas em Java, caso contrário, ocorrerá um erro de compilação.

L: Java
S: Variáveis, constantes e escopo em Java
Q: Qual é a palavra-chave usada para declarar uma variável em Java?
A: var
A: int
A: variable
CA: var (ou o tipo de dados específico, como int, double, boolean, etc.)

L: Java
S: Variáveis, constantes e escopo em Java
Q: Qual é a diferença entre atribuir um valor a uma variável de instância e uma variável local?
A: Não há diferença na atribuição de valores a variáveis de instância e variáveis locais em Java.
A: Ao atribuir um valor a uma variável de instância, esse valor será compartilhado por todas as instâncias (objetos) da classe. Ao atribuir um valor a uma variável local, esse valor só existe dentro do método onde foi atribuído.
A: Ao atribuir um valor a uma variável de instância, é necessário usar a palavra-chave "this" antes do nome da variável. Ao atribuir um valor a uma variável local, a palavra-chave "this" não é necessária.
CA: Ao atribuir um valor a uma variável de instância, esse valor será específico para cada objeto (instância) da classe. Ao atribuir um valor a uma variável local, esse valor só existe dentro do escopo do método ou bloco onde foi atribuído e não é compartilhado entre diferentes métodos ou objetos.

L: Java
S: Operadores e expressões em Java
Q: Quais são os operadores aritméticos em Java?
A: + (adição), - (subtração), * (multiplicação), / (divisão), % (módulo)
A: ^ (potenciação), ++ (incremento), -- (decremento), == (igualdade), != (diferença)
A: && (AND lógico), || (OR lógico), ! (NOT lógico), << (deslocamento à esquerda), >> (deslocamento à direita)
CA: + (adição), - (subtração), * (multiplicação), / (divisão) e % (módulo).

L: Java
S: Operadores e expressões em Java
Q: Quais são os operadores de comparação em Java?
A: = (igual a), > (maior que), < (menor que), >= (maior ou igual a), <= (menor ou igual a)
A: == (igual a), >< (diferente de), <=> (maior, igual ou menor)
A: >< (diferente de), =< (menor ou igual a), >= (maior ou igual a), == (igual a), === (idêntico a)
CA: == (igual a), != (diferente de), > (maior que), < (menor que), >= (maior ou igual a), <= (menor ou igual a).

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: 5 + 3 * 2 em Java?
A: 16
A: 11
A: 26
CA: 11

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: (10 - 4) / 2 em Java?
A: 6
A: 3
A: 2
CA: 3

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: 15 % 4 em Java?
A: 3
A: 4
A: 2
CA: 3

L: Java
S: Operadores e expressões em Java
Q: O que o operador ++ faz em Java?
A: Incrementa o valor de uma variável em 1.
A: Subtrai 1 do valor de uma variável.
A: Verifica se duas variáveis têm valores iguais.
CA: Incrementa o valor de uma variável em 1.

L: Java
S: Operadores e expressões em Java
Q: O que o operador -- faz em Java?
A: Subtrai 1 do valor de uma variável.
A: Incrementa o valor de uma variável em 1.
A: Verifica se duas variáveis têm valores diferentes.
CA: Subtrai 1 do valor de uma variável.

L: Java
S: Operadores e expressões em Java
Q: Quais são os operadores lógicos em Java?
A: & (AND), | (OR), ~ (NOT)
A: && (AND), || (OR), ! (NOT)
A: * (AND), + (OR), - (NOT)
CA: && (AND), || (OR), ! (NOT)

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: (5 > 3 && 2 < 4) em Java?
A: true
A: false
CA: true

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: (4 > 7 || 8 < 10) em Java?
A: true
A: false
CA: true

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: !(6 < 3) em Java?
A: true
A: false
CA: true

L: Java
S: Operadores e expressões em Java
Q: Quais são os operadores de atribuição em Java?
A: = (atribuição simples), += (atribuição de adição), -= (atribuição de subtração), *= (atribuição de multiplicação), /= (atribuição de divisão)
A: := (atribuição simples), :: (atribuição de concatenação), **= (atribuição de potenciação)
A: = (atribuição simples), ++= (atribuição de incremento), --= (atribuição de decremento), % (atribuição de módulo)
CA: = (atribuição simples), += (atribuição de adição), -= (atribuição de subtração), *= (atribuição de multiplicação), /= (atribuição de divisão).

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: int x = 5; x += 3; em Java?
A: 8
A: 5
A: 15
CA: 8

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: int y = 10; y -= 4; em Java?
A: 6
A: 10
A: 4
CA: 6

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: int z = 6; z *= 3; em Java?
A: 9
A: 18
A: 6
CA: 18

L: Java
S: Operadores e expressões em Java
Q: Qual é o resultado da expressão: int a = 15; a /= 4; em Java?
A: 3.75
A: 3
A: 4
CA: 3

L: Java
S: Estruturas condicionais em Java (if, else if, else, switch)
Q: Como funciona a estrutura condicional "if" em Java?
A: O "if" é uma estrutura condicional que permite executar um bloco de código apenas se a condição especificada for verdadeira. Caso a condição seja falsa, o bloco de código dentro do "if" não será executado.
A: O "if" é uma estrutura condicional que só pode ser usado sozinho, sem "else" ou "else if" associados.
A: O "if" é uma estrutura condicional que permite executar um bloco de código apenas se a condição especificada for falsa. Caso a condição seja verdadeira, o bloco de código dentro do "if" não será executado.
CA: O "if" é uma estrutura condicional que permite executar um bloco de código apenas se a condição especificada for verdadeira. Caso a condição seja falsa, o bloco de código dentro do "if" será ignorado.

L: Java
S: Estruturas condicionais em Java (if, else if, else, switch)
Q: Como funciona a estrutura condicional "else if" em Java?
A: O "else if" é usado para especificar uma nova condição a ser verificada se a condição do "if" anterior for falsa. Se a condição do "else if" for verdadeira, o bloco de código associado a essa condição será executado. Caso contrário, o próximo "else if" ou "else" será verificado, se houver.
A: O "else if" é usado para executar um bloco de código adicional caso a condição do "if" anterior seja verdadeira.
A: O "else if" é uma estrutura condicional que só pode ser usado após um "else", e não após um "if".
CA: O "else if" é usado para especificar uma nova condição a ser verificada caso a condição do "if" anterior seja falsa. Se a condição do "else if" for verdadeira, o bloco de código associado a essa condição será executado. Caso contrário, o próximo "else if" ou "else" será verificado, se houver.

L: Java
S: Estruturas condicionais em Java (if, else if, else, switch)
Q: Como funciona a estrutura condicional "else" em Java?
A: O "else" é usado para especificar um bloco de código a ser executado quando a condição do "if" anterior for falsa. Se todas as condições do "if" e "else if" forem falsas, o bloco de código associado ao "else" será executado.
A: O "else" é usado para executar um bloco de código adicional caso a condição do "if" anterior seja verdadeira.
A: O "else" é uma estrutura condicional que só pode ser usado sozinho, sem "if" ou "else if" associados.
CA: O "else" é usado para especificar um bloco de código a ser executado quando a condição do "if" anterior for falsa. Se todas as condições do "if" e "else if" forem falsas, o bloco de código associado ao "else" será executado.

L: Java
S: Estruturas condicionais em Java (if, else if, else, switch)
Q: Como funciona a estrutura condicional "switch" em Java?
A: O "switch" é uma estrutura condicional que permite avaliar uma expressão e compará-la com várias opções de caso. Se a expressão coincidir com um dos casos, o bloco de código associado a esse caso será executado. Caso contrário, o bloco de código associado ao caso "default", se houver, será executado.
A: O "switch" é usado para executar múltiplas condições do tipo "if-else" em sequência.
A: O "switch" é uma estrutura condicional que só pode ser usado sozinho, sem "if" ou "else" associados.
CA: O "switch" é uma estrutura condicional que permite avaliar uma expressão e compará-la com várias opções de caso. Se a expressão coincidir com um dos casos, o bloco de código associado a esse caso será executado. Caso contrário, o bloco de código associado ao caso "default", se houver, será executado.

L: Java
S: Estruturas condicionais em Java (if, else if, else, switch)
Q: Qual é a palavra-chave usada para definir a estrutura condicional "switch" em Java?
A: choice
A: choose
A: select
CA: switch

L: Java
S: Estruturas condicionais em Java (if, else if, else, switch)
Q: É obrigatório usar a cláusula "default" ao usar a estrutura condicional "switch" em Java?
A: Sim, é obrigatório incluir a cláusula "default" após os casos em uma estrutura "switch".
A: Não, a cláusula "default" é opcional e só deve ser usada se houver um bloco de código específico para ser executado quando nenhuma das opções de caso for correspondida.
A: A cláusula "default" não é permitida em uma estrutura "switch" em Java.
CA: Não, a cláusula "default" é opcional e só deve ser usada se houver um bloco de código específico para ser executado quando nenhuma das opções de caso for correspondida.

L: Java
S: Estruturas de repetição em Java (for, while, do-while)
Q: Como funciona a estrutura de repetição "for" em Java?
A: O "for" é uma estrutura de repetição que permite executar um bloco de código repetidamente enquanto uma condição for verdadeira. Ele é composto por três partes: a inicialização de uma variável de controle, a condição que deve ser avaliada a cada iteração e o incremento ou decremento dessa variável de controle. O bloco de código dentro do "for" será executado repetidamente até que a condição seja falsa.
A: O "for" é uma estrutura de repetição que executa um bloco de código uma vez e depois termina a execução, independente da condição.
A: O "for" é uma estrutura de repetição que executa um bloco de código repetidamente até que a condição especificada seja verdadeira, mas não permite a modificação da variável de controle dentro do próprio "for".
CA: O "for" é uma estrutura de repetição que permite executar um bloco de código repetidamente enquanto uma condição for verdadeira. Ele é composto por três partes: a inicialização de uma variável de controle, a condição que deve ser avaliada a cada iteração e o incremento ou decremento dessa variável de controle. O bloco de código dentro do "for" será executado repetidamente até que a condição seja falsa.

L: Java
S: Estruturas de repetição em Java (for, while, do-while)
Q: Como funciona a estrutura de repetição "while" em Java?
A: O "while" é uma estrutura de repetição que permite executar um bloco de código repetidamente enquanto uma condição for verdadeira. A condição é verificada antes da execução do bloco de código, e se for verdadeira, o bloco é executado. A verificação da condição ocorre a cada iteração do loop.
A: O "while" é uma estrutura de repetição que executa um bloco de código uma vez e depois termina a execução, independente da condição.
A: O "while" é uma estrutura de repetição que executa um bloco de código repetidamente até que a condição especificada seja verdadeira, mas não permite a modificação da variável de controle dentro do próprio "while".
CA: O "while" é uma estrutura de repetição que permite executar um bloco de código repetidamente enquanto uma condição for verdadeira. A condição é verificada antes da execução do bloco de código, e se for verdadeira, o bloco é executado. A verificação da condição ocorre a cada iteração do loop.

L: Java
S: Estruturas de repetição em Java (for, while, do-while)
Q: Como funciona a estrutura de repetição "do-while" em Java?
A: O "do-while" é uma estrutura de repetição similar ao "while", mas com uma diferença fundamental: o bloco de código é executado pelo menos uma vez antes de verificar a condição. Após a primeira execução do bloco, a condição é verificada, e se for verdadeira, o bloco será executado novamente. A verificação da condição ocorre a cada iteração do loop.
A: O "do-while" é uma estrutura de repetição que executa um bloco de código uma vez e depois termina a execução, independente da condição.
A: O "do-while" é uma estrutura de repetição que executa um bloco de código repetidamente até que a condição especificada seja verdadeira, mas não permite a modificação da variável de controle dentro do próprio "do-while".
CA: O "do-while" é uma estrutura de repetição similar ao "while", mas com uma diferença fundamental: o bloco de código é executado pelo menos uma vez antes de verificar a condição. Após a primeira execução do bloco, a condição é verificada, e se for verdadeira, o bloco será executado novamente. A verificação da condição ocorre a cada iteração do loop.

L: Java
S: Estruturas de repetição em Java (for, while, do-while)
Q: Qual é a palavra-chave usada para definir a estrutura de repetição "for" em Java?
A: loop
A: repeat
A: for
CA: for

L: Java
S: Estruturas de repetição em Java (for, while, do-while)
Q: Qual é a palavra-chave usada para definir a estrutura de repetição "while" em Java?
A: do
A: until
A: while
CA: while

L: Java
S: Estruturas de repetição em Java (for, while, do-while)
Q: Qual é a palavra-chave usada para definir a estrutura de repetição "do-while" em Java?
A: while
A: do
A: until
CA: do

L: Java
S: Estruturas de repetição em Java (for, while, do-while)
Q: Como sair de uma estrutura de repetição antes de sua condição se tornar falsa em Java?
A: Utilizando a palavra-chave "break" dentro do bloco de código da estrutura de repetição.
A: Utilizando a palavra-chave "exit" dentro do bloco de código da estrutura de repetição.
A: Utilizando a palavra-chave "continue" dentro do bloco de código da estrutura de repetição.
CA: Utilizando a palavra-chave "break" dentro do bloco de código da estrutura de repetição, o loop será interrompido e a execução continuará após o fim do loop.

L: Java
S: Estruturas de repetição em Java (for, while, do-while)
Q: Qual é a diferença entre a estrutura de repetição "while" e a estrutura de repetição "do-while" em Java?
A: A diferença entre o "while" e o "do-while" é que o "while" verifica a condição antes de executar o bloco de código, o que significa que o bloco pode não ser executado nenhuma vez se a condição for falsa desde o início. Já o "do-while" executa o bloco de código pelo menos uma vez antes de verificar a condição, garantindo que o bloco seja executado pelo menos uma vez, mesmo que a condição seja falsa.
A: Não há diferença entre o "while" e o "do-while", ambos funcionam da mesma forma e executam o bloco de código enquanto a condição for verdadeira.
A: O "while" só pode ser usado com um incremento de variável no final do loop, enquanto o "do-while" permite o uso de decremento.
CA: A diferença entre o "while" e o "do-while" é que o "while" verifica a condição antes de executar o bloco de código, o que significa que o bloco pode não ser executado nenhuma vez se a condição for falsa desde o início. Já o "do-while" executa o bloco de código pelo menos uma vez antes de verificar a condição, garantindo que o bloco seja executado pelo menos uma vez, mesmo que a condição seja falsa.

L: Java
S: Arrays e ArrayLists em Java
Q: O que é um array em Java?
A: Um array em Java é uma estrutura de dados que permite armazenar um conjunto de elementos do mesmo tipo em uma única variável. Os elementos do array são acessados por meio de um índice, que começa em 0 para o primeiro elemento, 1 para o segundo elemento e assim por diante.
A: Um array em Java é uma lista ordenada de elementos de tipos diferentes.
A: Um array em Java é uma coleção de métodos e variáveis que podem ser acessados diretamente.
CA: Um array em Java é uma estrutura de dados que permite armazenar um conjunto de elementos do mesmo tipo em uma única variável. Os elementos do array são acessados por meio de um índice numérico, começando por 0.

L: Java
S: Arrays e ArrayLists em Java
Q: Como declarar e inicializar um array de inteiros em Java?
A: int[] numbers = {1, 2, 3, 4, 5};
A: int numbers = {1, 2, 3, 4, 5};
A: array numbers = [1, 2, 3, 4, 5];
CA: int[] numbers = {1, 2, 3, 4, 5};

L: Java
S: Arrays e ArrayLists em Java
Q: Como acessar o terceiro elemento (índice 2) de um array em Java?
A: array[3];
A: array[2];
A: array(3);
CA: array[2];

L: Java
S: Arrays e ArrayLists em Java
Q: É possível alterar o tamanho de um array depois de declarado em Java?
A: Sim, é possível aumentar ou diminuir o tamanho de um array após a declaração.
A: Não, o tamanho de um array é fixo e não pode ser alterado depois de declarado.
A: Sim, mas apenas é possível aumentar o tamanho de um array, não diminuir.
CA: Não, o tamanho de um array é fixo e não pode ser alterado após a declaração. Para alterar o tamanho, é necessário criar um novo array com o tamanho desejado e copiar os elementos do array original para o novo array.

L: Java
S: Arrays e ArrayLists em Java
Q: O que é um ArrayList em Java?
A: Um ArrayList em Java é uma coleção que armazena elementos em ordem sequencial e permite adicionar, remover e acessar elementos de forma dinâmica. Diferente de um array tradicional, o ArrayList pode aumentar ou diminuir de tamanho automaticamente conforme elementos são adicionados ou removidos.
A: Um ArrayList em Java é uma matriz multidimensional que armazena elementos do mesmo tipo.
A: Um ArrayList em Java é uma estrutura de dados que armazena apenas valores numéricos.
CA: Um ArrayList em Java é uma coleção que armazena elementos em ordem sequencial e permite adicionar, remover e acessar elementos de forma dinâmica. Diferente de um array tradicional, o ArrayList pode aumentar ou diminuir de tamanho automaticamente conforme elementos são adicionados ou removidos.

L: Java
S: Arrays e ArrayLists em Java
Q: Como declarar e inicializar um ArrayList de strings em Java?
A: ArrayList strings = {"one", "two", "three"};
A: ArrayList<String> strings = ["one", "two", "three"];
A: ArrayList strings = new ArrayList("one", "two", "three");
CA: ArrayList<String> strings = new ArrayList<>(Arrays.asList("one", "two", "three"));

L: Java
S: Arrays e ArrayLists em Java
Q: Como adicionar um elemento ao final de um ArrayList em Java?
A: arrayList.add(element);
A: arrayList.insert(element);
A: arrayList.append(element);
CA: arrayList.add(element);

L: Java
S: Arrays e ArrayLists em Java
Q: Como remover um elemento específico de um ArrayList em Java?
A: arrayList.remove(element);
A: arrayList.delete(element);
A: arrayList.removeAt(index);
CA: arrayList.remove(element);

L: Java
S: Arrays e ArrayLists em Java
Q: Como percorrer todos os elementos de um array ou ArrayList em Java?
A: Utilizando um loop "for" com um contador que percorre os índices do array ou ArrayList.
A: Utilizando um loop "while" que verifica se o próximo elemento é nulo (no caso de arrays) ou se a lista chegou ao final (no caso de ArrayList).
A: Utilizando o método "foreach" que percorre diretamente os elementos do array ou ArrayList sem a necessidade de um contador.
CA: Utilizando um loop "for" com um contador que percorre os índices do array ou ArrayList ou utilizando o método "foreach" que percorre diretamente os elementos sem a necessidade de um contador.

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: O que é uma List em Java?
A: Uma List em Java é uma interface que representa uma coleção ordenada de elementos, onde elementos duplicados são permitidos. Ela permite adicionar, remover e acessar elementos pelo índice. Algumas implementações comuns de List em Java são ArrayList e LinkedList.
A: Uma List em Java é uma coleção de elementos não ordenados, onde elementos duplicados são permitidos.
A: Uma List em Java é uma interface que representa uma coleção ordenada de elementos, mas onde elementos duplicados não são permitidos.
CA: Uma List em Java é uma interface que representa uma coleção ordenada de elementos, onde elementos duplicados são permitidos.

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: O que é um Set em Java?
A: Um Set em Java é uma interface que representa uma coleção não ordenada de elementos únicos, onde elementos duplicados não são permitidos. Ele garante que cada elemento seja único na coleção.
A: Um Set em Java é uma interface que representa uma coleção ordenada de elementos, onde elementos duplicados não são permitidos.
A: Um Set em Java é uma interface que representa uma coleção não ordenada de elementos, onde elementos duplicados são permitidos.
CA: Um Set em Java é uma interface que representa uma coleção não ordenada de elementos únicos, onde elementos duplicados não são permitidos. Ele garante que cada elemento seja único na coleção.

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: O que é um Map em Java?
A: Um Map em Java é uma interface que representa uma coleção de pares chave-valor, onde cada chave é única e associada a um valor. Ele permite recuperar rapidamente o valor associado a uma chave específica.
A: Um Map em Java é uma interface que representa uma coleção de elementos não ordenados, onde cada elemento é associado a uma chave única.
A: Um Map em Java é uma interface que representa uma coleção de elementos ordenados, onde cada elemento é associado a uma chave única.
CA: Um Map em Java é uma interface que representa uma coleção de pares chave-valor, onde cada chave é única e associada a um valor. Ele permite recuperar rapidamente o valor associado a uma chave específica.

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: Quais são algumas implementações comuns de List em Java?
A: ArrayList e HashSet
A: HashSet e TreeMap
A: LinkedList e TreeSet
CA: ArrayList e LinkedList

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: Quais são algumas implementações comuns de Set em Java?
A: TreeSet e LinkedHashMap
A: HashSet e TreeMap
A: ArrayList e HashSet
CA: HashSet e TreeSet

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: Quais são algumas implementações comuns de Map em Java?
A: HashMap e TreeSet
A: TreeMap e LinkedHashMap
A: ArrayList e HashMap
CA: HashMap e TreeMap

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: Como adicionar elementos a uma List em Java?
A: Utilizando o método add(element) da List.
A: Utilizando o método insert(element) da List.
A: Utilizando o método append(element) da List.
CA: Utilizando o método add(element) da List.

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: Como adicionar elementos a um Set em Java?
A: Utilizando o método add(element) do Set.
A: Utilizando o método insert(element) do Set.
A: Utilizando o método append(element) do Set.
CA: Utilizando o método add(element) do Set.

L: Java
S: Coleções e Mapas (List, Set, Map) em Java
Q: Como adicionar pares chave-valor a um Map em Java?
A: Utilizando o método add(key, value) do Map.
A: Utilizando o método put(key, value) do Map.
A: Utilizando o método insert(key, value) do Map.
CA: Utilizando o método put(key, value) do Map.

L: Java
S: Métodos e funções em Java
Q: O que é um método em Java?
A: Um método em Java é um bloco de código que realiza uma tarefa específica e pode ser chamado/executado a partir de outras partes do programa. Ele pode ter parâmetros de entrada e pode retornar um valor como resultado. Métodos são usados para organizar e reutilizar código, tornando o programa mais modular e legível.
A: Um método em Java é um tipo especial de variável que armazena um valor específico.
A: Um método em Java é uma estrutura de controle que permite repetir a execução de um bloco de código várias vezes.
CA: Um método em Java é um bloco de código que realiza uma tarefa específica e pode ser chamado/executado a partir de outras partes do programa. Ele pode ter parâmetros de entrada e pode retornar um valor como resultado. Métodos são usados para organizar e reutilizar código, tornando o programa mais modular e legível.

L: Java
S: Métodos e funções em Java
Q: Como declarar um método em Java?
A: public void myMethod() {
// Código do método aqui
}
A: void myMethod() {
// Código do método aqui
}
A: public myMethod() {
// Código do método aqui
}
CA: public void myMethod() {
// Código do método aqui
}

L: Java
S: Métodos e funções em Java
Q: Como chamar um método em Java?
A: myMethod();
A: call myMethod();
A: run myMethod();
CA: myMethod();

L: Java
S: Métodos e funções em Java
Q: O que é um parâmetro de um método em Java?
A: Um parâmetro de um método em Java é uma variável que permite que valores sejam passados para o método quando ele é chamado. Esses valores são usados dentro do método para realizar as operações desejadas.
A: Um parâmetro de um método em Java é uma instrução condicional que controla se o método será executado ou não.
A: Um parâmetro de um método em Java é uma instrução que indica o tipo de dado que o método deve retornar.
CA: Um parâmetro de um método em Java é uma variável que permite que valores sejam passados para o método quando ele é chamado. Esses valores são usados dentro do método para realizar as operações desejadas.

L: Java
S: Métodos e funções em Java
Q: Como definir parâmetros em um método em Java?
A: Os parâmetros são definidos na declaração do método, entre parênteses e separados por vírgulas. Por exemplo: public void myMethod(int param1, double param2, String param3) { // Código do método aqui }
A: Os parâmetros são definidos na chamada do método, passando os valores diretamente. Por exemplo: myMethod(param1, param2, param3);
A: Os parâmetros são definidos no início do método, usando a palavra-chave "param". Por exemplo: param param1, param param2, param param3;
CA: Os parâmetros são definidos na declaração do método, entre parênteses e separados por vírgulas. Por exemplo: public void myMethod(int param1, double param2, String param3) { // Código do método aqui }

L: Java
S: Métodos e funções em Java
Q: O que é o valor de retorno de um método em Java?
A: O valor de retorno de um método em Java é o resultado que o método retorna após a sua execução. Ele é especificado na declaração do método usando o tipo de dado que será retornado. Se o método não retornar nenhum valor, o tipo de retorno deve ser declarado como "void".
A: O valor de retorno de um método em Java é o valor que é passado como parâmetro para o método.
A: O valor de retorno de um método em Java é sempre do tipo "void".
CA: O valor de retorno de um método em Java é o resultado que o método retorna após a sua execução. Ele é especificado na declaração do método usando o tipo de dado que será retornado. Se o método não retornar nenhum valor, o tipo de retorno deve ser declarado como "void".

L: Java
S: Métodos e funções em Java
Q: Como definir o valor de retorno de um método em Java?
A: O valor de retorno é definido usando a palavra-chave "return" seguida pelo valor que será retornado. Por exemplo: public int myMethod() { return 10; }
A: O valor de retorno é definido no início do método, usando a palavra-chave "result". Por exemplo: result = 10;
A: O valor de retorno é definido usando a palavra-chave "return" seguida pelo tipo de dado que será retornado. Por exemplo: public int myMethod() { return int; }
CA: O valor de retorno é definido usando a palavra-chave "return" seguida pelo valor que será retornado. Por exemplo: public int myMethod() { return 10; }

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é a função principal do HTML5?
A: Facilitar a estilização de páginas da web.
A: Permitir a criação de aplicações desktop.
A: Controlar a lógica de programação em um site.
CA: Estruturar e apresentar conteúdo na web.

Q: L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: O que torna o HTML5 diferente de suas versões anteriores, como o HTML 4?
A: O HTML5 introduziu suporte para aplicativos de desktop.
A: O HTML5 não precisa mais de estilos CSS para formatação.
A: O HTML5 inclui elementos de semântica aprimorada.
CA: O HTML5 possui recursos nativos para áudio e vídeo.

Q: L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual foi o objetivo principal ao desenvolver o HTML5?
A: Substituir o CSS para estilos mais avançados.
A: Unificar todas as linguagens de programação web em uma só.
A: Fornecer recursos para criação de jogos em 3D.
CA: Tornar a web mais poderosa com novos recursos e melhor semântica.

Q: L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Além da marcação, o que mais o HTML5 oferece?
A: Suporte para animações Flash.
A: Capacidade de executar código PHP.
A: Bibliotecas para manipulação de banco de dados.
CA: APIs para recursos avançados, como geolocalização e armazenamento local.

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o elemento usado para definir o conteúdo principal de uma página HTML5?
A: <header>
A: <content>
A: <main>
CA: <body>

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o elemento HTML5 usado para agrupar conteúdo relacionado, como cabeçalhos, parágrafos e listas?
A: <section>
A: <div>
A: <group>
CA: <article>

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o atributo usado em um campo de formulário para especificar um texto de ajuda que é exibido quando o usuário passa o mouse sobre o campo?
A: placeholder
A: tooltip
A: info
CA: title

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o formato de arquivo de áudio amplamente suportado pelo elemento <audio> em HTML5?
A: .mp3
A: .wav
A: .ogg
CA: .mp4

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o atributo usado para especificar uma descrição de texto para uma imagem em HTML5?
A: alt
A: title
A: caption
CA: alt-text

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o elemento HTML5 usado para incluir folhas de estilo CSS em uma página?
A: <link>
A: <style>
A: <css>
CA: <link>

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o elemento HTML5 usado para criar um hyperlink em uma página?
A: <a>
A: <link>
A: <href>
CA: <a>

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o elemento HTML5 usado para criar uma lista ordenada?
A: <ol>
A: <ul>
A: <dl>
CA: <ol>

L: HTML5
S: Introdução ao HTML5 e sua evolução
Q: Qual é o elemento HTML5 usado para criar uma célula de cabeçalho em uma tabela?
A: <th>
A: <td>
A: <head>
CA: <th>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é a API em HTML5 usada para armazenar dados no navegador de forma persistente?
A: localStorage
A: sessionStorage
A: cacheStorage
CA: localStorage

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para definir o título de uma página HTML5?
A: <header>
A: <title>
A: <h1>
CA: <title>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para incluir metadados sobre a página, como codificação de caracteres e descrição?
A: <meta>
A: <head>
A: <link>
CA: <meta>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para vincular um arquivo de estilo CSS externo a uma página HTML5?
A: <style>
A: <link>
A: <css>
CA: <link>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para agrupar o conteúdo de navegação, como links e menus, em uma página HTML5?
A: <nav>
A: <header>
A: <footer>
CA: <nav>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar uma seção de cabeçalho em uma página HTML5?
A: <head>
A: <header>
A: <top>
CA: <header>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar um parágrafo em uma página HTML5?
A: <p>
A: <para>
A: <text>
CA: <p>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar uma lista não ordenada em uma página HTML5?
A: <ul>
A: <ol>
A: <li>
CA: <ul>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar um link para outra página ou recurso em uma página HTML5?
A: <a>
A: <link>
A: <href>
CA: <a>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar uma imagem em uma página HTML5?
A: <img>
A: <image>
A: <picture>
CA: <img>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar uma tabela em uma página HTML5?
A: <table>
A: <tab>
A: <tabel>
CA: <table>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar uma célula de cabeçalho em uma tabela em HTML5?
A: <th>
A: <td>
A: <head>
CA: <th>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar um formulário em uma página HTML5?
A: <form>
A: <input>
A: <fieldset>
CA: <form>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar um campo de entrada de texto em uma página HTML5?
A: <text>
A: <input>
A: <textfield>
CA: <input>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar um botão em uma página HTML5?
A: <button>
A: <submit>
A: <input>
CA: <button>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar um rodapé em uma página HTML5?
A: <footer>
A: <bottom>
A: <foot>
CA: <footer>

L: HTML5
S: Estrutura básica de uma página HTML5
Q: Qual é o elemento usado para criar um elemento de destaque ou ênfase em uma página HTML5?
A: <strong>
A: <em>
A: <highlight>
CA: <strong>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um cabeçalho de nível 1 em uma página HTML5?
A: <heading>
A: <h1>
A: <header>
CA: <h1>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um parágrafo em uma página HTML5?
A: <paragraph>
A: <para>
A: <p>
CA: <p>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para enfatizar o texto, aplicando estilo de ênfase em uma página HTML5?
A: <italic>
A: <emphasize>
A: <em>
CA: <em>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um texto forte, aplicando um estilo de maior destaque em uma página HTML5?
A: <strong>
A: <bold>
A: <b>
CA: <strong>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar uma lista não ordenada em uma página HTML5?
A: <unordered>
A: <list>
A: <ul>
CA: <ul>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar uma lista ordenada em uma página HTML5?
A: <ordered>
A: <ol>
A: <list>
CA: <ol>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um item de lista em uma página HTML5?
A: <li>
A: <list-item>
A: <item>
CA: <li>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar uma linha horizontal (linha divisória) em uma página HTML5?
A: <hr>
A: <line>
A: <divider>
CA: <hr>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um link para outra página ou recurso em uma página HTML5?
A: <a>
A: <link>
A: <href>
CA: <a>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um link para um endereço de email em uma página HTML5?
A: <mail>
A: <email>
A: <mailto>
CA: <mailto>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar uma citação em uma página HTML5?
A: <cite>
A: <quote>
A: <quotation>
CA: <cite>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um trecho de código em uma página HTML5?
A: <code>
A: <coding>
A: <program>
CA: <code>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um texto pré-formatado em uma página HTML5?
A: <pre>
A: <formatted>
A: <fixed>
CA: <pre>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um texto suprimido (tachado) em uma página HTML5?
A: <strike>
A: <strikethrough>
A: <s>
CA: <s>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um texto subscrito em uma página HTML5?
A: <sub>
A: <lower>
A: <small>
CA: <sub>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um texto sobrescrito em uma página HTML5?
A: <sup>
A: <upper>
A: <big>
CA: <sup>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar um texto entre aspas em uma página HTML5?
A: <q>
A: <quote>
A: <quoted>
CA: <q>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar uma abreviação ou acrônimo em uma página HTML5?
A: <abbr>
A: <abbrev>
A: <acronym>
CA: <abbr>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar uma legenda para uma tabela em uma página HTML5?
A: <caption>
A: <legend>
A: <table-caption>
CA: <caption>

L: HTML5
S: Tags de texto em HTML5
Q: Qual é a tag usada para criar uma área de texto de várias linhas em uma página HTML5?
A: <textarea>
A: <text>
A: <multiline>
CA: <textarea>

L: HTML5
S: Listas ordenadas e não ordenadas em HTML5
Q: Qual é a tag usada para criar uma lista não ordenada em uma página HTML5?
A: <unordered>
A: <ul>
A: <list>
CA: <ul>

L: HTML5
S: Listas ordenadas e não ordenadas em HTML5
Q: Qual é a tag usada para criar uma lista ordenada em uma página HTML5?
A: <ordered>
A: <ol>
A: <list>
CA: <ol>

L: HTML5
S: Listas ordenadas e não ordenadas em HTML5
Q: Qual é a tag usada para criar um item de lista em uma lista não ordenada ou ordenada em HTML5?
A: <item>
A: <li>
A: <list-item>
CA: <li>

L: HTML5
S: Listas ordenadas e não ordenadas em HTML5
Q: Como você pode especificar o estilo de marcadores em uma lista não ordenada em HTML5?
A: Usando o atributo marker na tag <ul>.
A: Usando o atributo style na tag <li>.
A: Usando o atributo bullet na tag <ul>.
CA: Usando o atributo type na tag <ul>.

L: HTML5
S: Listas ordenadas e não ordenadas em HTML5
Q: Como você pode criar uma lista dentro de outra lista em HTML5?
A: Usando a tag <nested-list>.
A: Usando a tag <ul> dentro da tag <ol>.
A: Usando a tag <sub-list> dentro da tag <li>.
CA: Usando a tag <ul> ou <ol> dentro da tag <li>.

L: HTML5
S: Listas ordenadas e não ordenadas em HTML5
Q: Qual é a tag usada para criar uma lista de definição (lista de descrição) em HTML5?
A: <dl>
A: <def>
A: <description-list>
CA: <dl>

L: HTML5
S: Listas ordenadas e não ordenadas em HTML5
Q: Qual é a tag usada para criar um termo ou item de descrição em uma lista de definição em HTML5?
A: <item>
A: <def>
A: <term>
CA: <dt>

L: HTML5
S: Listas ordenadas e não ordenadas em HTML5
Q: Qual é a tag usada para criar uma descrição de um termo ou item em uma lista de definição em HTML5?
A: <description>
A: <desc>
A: <dd>
CA: <dd>

L: HTML5
S: Links e ancoras em HTML5
Q: Qual é a tag usada para criar um link para outra página ou recurso em uma página HTML5?
A: <link>
A: <url>
A: <a>
CA: <a>

L: HTML5
S: Links e ancoras em HTML5
Q: Qual é o atributo usado na tag <a> para especificar o URL de destino do link?
A: href
A: src
A: link
CA: href

L: HTML5
S: Links e ancoras em HTML5
Q: Como você pode abrir o link em uma nova janela do navegador quando o usuário clicar nele?
A: Usando o atributo new na tag <a>.
A: Usando o atributo target="_blank" na tag <a>.
A: Usando o atributo window na tag <a>.
CA: Usando o atributo target="_blank" na tag <a>.

L: HTML5
S: Links e ancoras em HTML5
Q: Como criar um link para enviar um e-mail em HTML5?
A: Usando o atributo email na tag <a>.
A: Usando o atributo mailto na tag <a>.
A: Usando o atributo href="mailto:email@example.com" na tag <a>.
CA: Usando o atributo href="mailto:email@example.com" na tag <a>.

L: HTML5
S: Links e ancoras em HTML5
Q: Qual é o atributo usado na tag <a> para especificar um texto alternativo que será exibido quando o link não pode ser carregado ou lido pelo leitor de tela?
A: alt
A: alt-text
A: text
CA: alt

L: HTML5
S: Links e ancoras em HTML5
Q: Como criar um link para uma seção específica dentro da mesma página em HTML5?
A: Usando o atributo anchor na tag <a> com o nome da âncora como valor.
A: Usando a tag <anchor> para envolver a seção de destino.
A: Usando o atributo href="#nome-da-secao" na tag <a>.
CA: Usando o atributo href="#nome-da-secao" na tag <a>.

L: HTML5
S: Imagens em HTML5
Q: Qual é a tag usada para inserir uma imagem em uma página HTML5?
A: <img>
A: <image>
A: <picture>
CA: <img>

L: HTML5
S: Imagens em HTML5
Q: Qual é o atributo usado para especificar o caminho ou URL da imagem a ser exibida?
A: source
A: url
A: link
CA: src

L: HTML5
S: Imagens em HTML5
Q: Qual é o atributo usado para especificar um texto alternativo para a imagem, que é exibido caso a imagem não possa ser carregada ou lida pelo leitor de tela?
A: alt
A: text
A: description
CA: alt

L: HTML5
S: Imagens em HTML5
Q: Qual é o atributo usado para especificar a largura da imagem em pixels?
A: width
A: height
A: size
CA: width

L: HTML5
S: Imagens em HTML5
Q: Qual é o atributo usado para especificar a altura da imagem em pixels?
A: width
A: height
A: size
CA: height

L: HTML5
S: Imagens em HTML5
Q: Como fazer uma imagem funcionar como um link em HTML5?
A: Envolver a tag <img> com a tag <a> e definir o atributo href na tag <a> com o URL de destino.
A: Adicionar o atributo link na tag <img> com o URL de destino.
A: Adicionar o atributo target na tag <img> com o URL de destino.
CA: Envolver a tag <img> com a tag <a> e definir o atributo href na tag <a> com o URL de destino.

L: HTML5
S: Imagens em HTML5
Q: Como fazer uma imagem ser carregada a partir de um arquivo local no seu computador em HTML5?
A: Definir o atributo local na tag <img> com o caminho do arquivo local.
A: É impossível carregar imagens de um arquivo local devido a restrições de segurança.
A: Definir o atributo src na tag <img> com o caminho do arquivo local.
CA: Definir o atributo src na tag <img> com o caminho do arquivo local.

L: HTML5
S: Imagens em HTML5
Q: Qual é o atributo usado para adicionar uma descrição que é exibida quando o usuário passa o mouse sobre a imagem em HTML5?
A: description
A: title
A: tooltip
CA: title

L: HTML5
S: Imagens em HTML5
Q: Qual é o atributo usado para especificar a largura e altura de uma imagem de forma mais simples em HTML5?
A: size
A: dimensions
A: scale
CA: width e height

L: HTML5
S: Tabelas em HTML5
Q: Qual é a tag usada para criar uma tabela em uma página HTML5?
A: <table>
A: <tab>
A: <grid>
CA: <table>

L: HTML5
S: Tabelas em HTML5
Q: Qual é a tag usada para criar uma linha em uma tabela em HTML5?
A: <line>
A: <row>
A: <tr>
CA: <tr>

L: HTML5
S: Tabelas em HTML5
Q: Qual é a tag usada para criar uma célula de cabeçalho em uma tabela em HTML5?
A: <cell>
A: <th>
A: <td>
CA: <th>

L: HTML5
S: Tabelas em HTML5
Q: Qual é a tag usada para criar uma célula de dados em uma tabela em HTML5?
A: <td>
A: <cell>
A: <data>
CA: <td>

L: HTML5
S: Tabelas em HTML5
Q: Como fazer uma célula de dados se estender por várias colunas em uma tabela em HTML5?
A: Usando o atributo colspan na tag <td> com o número de colunas que a célula deve se estender.
A: Usando o atributo rowspan na tag <td> com o número de colunas que a célula deve se estender.
A: É impossível fazer uma célula de dados se estender por várias colunas em HTML5.
CA: Usando o atributo colspan na tag <td> com o número de colunas que a célula deve se estender.

L: HTML5
S: Tabelas em HTML5
Q: Como fazer uma célula de dados se estender por várias linhas em uma tabela em HTML5?
A: Usando o atributo colspan na tag <td> com o número de linhas que a célula deve se estender.
A: Usando o atributo rowspan na tag <td> com o número de linhas que a célula deve se estender.
A: É impossível fazer uma célula de dados se estender por várias linhas em HTML5.
CA: Usando o atributo rowspan na tag <td> com o número de linhas que a célula deve se estender.

L: HTML5
S: Tabelas em HTML5
Q: Como criar uma célula de cabeçalho que se estende por várias colunas em uma tabela em HTML5?
A: Usando o atributo colspan na tag <th> com o número de colunas que a célula deve se estender.
A: Usando o atributo rowspan na tag <th> com o número de colunas que a célula deve se estender.
A: É impossível fazer uma célula de cabeçalho se estender por várias colunas em HTML5.
CA: Usando o atributo colspan na tag <th> com o número de colunas que a célula deve se estender.

L: HTML5
S: Tabelas em HTML5
Q: Como criar uma célula de cabeçalho que se estende por várias linhas em uma tabela em HTML5?
A: Usando o atributo colspan na tag <th> com o número de linhas que a célula deve se estender.
A: Usando o atributo rowspan na tag <th> com o número de linhas que a célula deve se estender.
A: É impossível fazer uma célula de cabeçalho se estender por várias linhas em HTML5.
CA: Usando o atributo rowspan na tag <th> com o número de linhas que a célula deve se estender.

L: HTML5
S: Tabelas em HTML5
Q: Como definir uma borda para uma tabela em HTML5?
A: Usando o atributo border na tag <table> e definindo um valor para a largura da borda em pixels.
A: Usando o atributo border na tag <table> e definindo o nome de uma classe CSS que contém as configurações de borda.
A: Não é possível definir borda para tabelas em HTML5.
CA: Usando o atributo border na tag <table> e definindo um valor para a largura da borda em pixels.

L: HTML5
S: Tabelas em HTML5
Q: Qual é a tag usada para criar uma legenda para uma tabela em HTML5?
A: <caption>
A: <legend>
A: <table-caption>
CA: <caption>

L: HTML5
S: Tabelas em HTML5
Q: Como fazer uma tabela ser responsiva, adaptando-se a diferentes tamanhos de tela, em HTML5?
A: Usando o atributo responsive na tag <table>.
A: Usando CSS para definir a largura das células em porcentagem em vez de pixels.
A: É impossível fazer uma tabela ser responsiva em HTML5.
CA: Usando CSS para definir a largura das células em porcentagem em vez de pixels.

L: HTML5
S: Formulários em HTML5
Q: Qual é a tag usada para criar um formulário em uma página HTML5?
A: <form>
A: <input>
A: <fieldset>
CA: <form>

L: HTML5
S: Formulários em HTML5
Q: Qual é a tag usada para criar um campo de entrada de texto em uma página HTML5?
A: <text>
A: <input>
A: <textfield>
CA: <input>

L: HTML5
S: Formulários em HTML5
Q: Qual é o atributo usado para especificar o tipo de campo em um elemento <input> em HTML5?
A: type
A: field
A: input-type
CA: type

L: HTML5
S: Formulários em HTML5
Q: Qual é o tipo de campo usado para criar uma caixa de seleção (checkbox) em HTML5?
A: checkbox
A: select
A: check
CA: checkbox

L: HTML5
S: Formulários em HTML5
Q: Qual é o tipo de campo usado para criar um botão de envio de formulário em HTML5?
A: submit
A: button
A: send
CA: submit

L: HTML5
S: Formulários em HTML5
Q: Qual é o tipo de campo usado para criar um campo de senha (password) em HTML5?
A: password
A: text
A: secure
CA: password

L: HTML5
S: Formulários em HTML5
Q: Qual é o tipo de campo usado para criar um campo de entrada numérica (número) em HTML5?
A: number
A: numeric
A: integer
CA: number

L: HTML5
S: Formulários em HTML5
Q: Qual é o atributo usado para especificar um texto de ajuda que é exibido quando o usuário passa o mouse sobre o campo de formulário?
A: tooltip
A: help
A: info
CA: title

L: HTML5
S: Formulários em HTML5
Q: Qual é o atributo usado para especificar o URL do script que será executado quando o formulário for submetido?
A: action
A: url
A: submit
CA: action

L: HTML5
S: Elementos de formulário avançados em HTML5
Q: Qual é o tipo de campo usado para criar um campo de entrada de data em HTML5, onde o usuário pode selecionar uma data em um calendário?
A: date
A: calendar
A: datetime
CA: date

L: HTML5
S: Elementos de formulário avançados em HTML5
Q: Qual é o tipo de campo usado para criar um campo de entrada de hora em HTML5, onde o usuário pode selecionar um horário?
A: time
A: hour
A: clock
CA: time

L: HTML5
S: Elementos de formulário avançados em HTML5
Q: Qual é o tipo de campo usado para criar um controle deslizante (slider) em HTML5, onde o usuário pode selecionar um valor em um intervalo específico?
A: range
A: slider
A: slide
CA: range

L: HTML5
S: Elementos de formulário avançados em HTML5
Q: Qual é o tipo de campo usado para criar um campo de busca (search) em HTML5, onde o usuário pode inserir termos de pesquisa?
A: search
A: find
A: lookup
CA: search

L: HTML5
S: Áudio e vídeo em HTML5
Q: Qual é a tag usada para incorporar um elemento de áudio em uma página HTML5?
A: <audio>
A: <sound>
A: <music>
CA: <audio>

L: HTML5
S: Áudio e vídeo em HTML5
Q: Qual é o atributo usado na tag <audio> para especificar a URL do arquivo de áudio a ser reproduzido?
A: source
A: url
A: audio-src
CA: src

L: HTML5
S: Áudio e vídeo em HTML5
Q: Qual é a tag usada para incorporar um elemento de vídeo em uma página HTML5?
A: <video>
A: <movie>
A: <media>
CA: <video>

L: HTML5
S: Áudio e vídeo em HTML5
Q: Qual é o atributo usado na tag <video> para especificar a URL do arquivo de vídeo a ser reproduzido?
A: source
A: url
A: video-src
CA: src

L: HTML5
S: Áudio e vídeo em HTML5
Q: Como fazer um vídeo ser reproduzido automaticamente quando a página é carregada em HTML5?
A: Definindo o atributo autoplay na tag <video>.
A: Adicionando um script JavaScript para reproduzir o vídeo automaticamente.
A: Não é possível fazer um vídeo ser reproduzido automaticamente em HTML5 devido a restrições de segurança.
CA: Definindo o atributo autoplay na tag <video>.

L: HTML5
S: Semântica em HTML5
Q: Qual é a principal vantagem de usar elementos semânticos em HTML5?
A: Tornar o código HTML mais curto.
A: Melhorar o desempenho do site.
A: Facilitar a indexação e a compreensão do conteúdo pelos mecanismos de busca.
CA: Facilitar a indexação e a compreensão do conteúdo pelos mecanismos de busca.

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para representar um cabeçalho de nível 1 em HTML5?
A: <header>
A: <h1>
A: <heading>
CA: <h1>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para representar um parágrafo em HTML5?
A: <paragraph>
A: <p>
A: <para>
CA: <p>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para representar uma seção de destaque ou ênfase em HTML5?
A: <strong>
A: <highlight>
A: <em>
CA: <em>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para representar um link de navegação em HTML5?
A: <nav>
A: <navigation>
A: <link>
CA: <nav>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para representar uma citação em HTML5?
A: <cite>
A: <quote>
A: <quotation>
CA: <cite>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para agrupar conteúdo relacionado, como uma lista de itens ou uma seção de perguntas frequentes, em HTML5?
A: <section>
A: <group>
A: <div>
CA: <section>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para representar o conteúdo principal de uma página em HTML5?
A: <main>
A: <content>
A: <body>
CA: <main>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para representar o rodapé de uma página ou de uma seção em HTML5?
A: <footer>
A: <foot>
A: <bottom>
CA: <footer>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para criar uma lista de definição (lista de descrição) em HTML5?
A: <dl>
A: <ul>
A: <list>
CA: <dl>

L: HTML5
S: Semântica em HTML5
Q: Qual é o elemento usado para criar uma legenda para uma tabela em HTML5?
A: <caption>
A: <legend>
A: <table-caption>
CA: <caption>

L: HTML5
S: Elementos interativos em HTML5
Q: Qual é o elemento usado para criar um botão clicável em HTML5?
A: <btn>
A: <button>
A: <clickable>
CA: <button>

L: HTML5
S: Elementos interativos em HTML5
Q: Qual é o elemento usado para criar um campo de entrada de texto que permite ao usuário selecionar uma data em um calendário em HTML5?
A: <date>
A: <calendar>
A: <datepicker>
CA: <input type="date">

L: HTML5
S: Elementos interativos em HTML5
Q: Qual é o elemento usado para criar um menu suspenso (dropdown) em HTML5?
A: <dropdown>
A: <menu>
A: <select>
CA: <select>

L: HTML5
S: Elementos interativos em HTML5
Q: Qual é o elemento usado para criar um campo de entrada numérica em HTML5, onde o usuário pode inserir apenas números?
A: <number>
A: <numeric>
A: <input type="number">
CA: <input type="number">

L: HTML5
S: Elementos interativos em HTML5
Q: Qual é o elemento usado para criar uma caixa de seleção (checkbox) em HTML5?
A: <check>
A: <checkbox>
A: <input type="checkbox">
CA: <input type="checkbox">

L: HTML5
S: Elementos interativos em HTML5
Q: Qual é o elemento usado para criar um campo de entrada de texto em HTML5 que permite ao usuário inserir múltiplas linhas de texto?
A: <textarea>
A: <textfield>
A: <input type="textarea">
CA: <textarea>

L: HTML5
S: Elementos interativos em HTML5
Q: Qual é o elemento usado para criar uma área de imagem clicável em HTML5, onde o usuário pode clicar em diferentes partes da imagem para executar ações diferentes?
A: <area>
A: <clickable>
A: <map>
CA: <map>

L: HTML5
S: Estruturação de layout com HTML5
Q: Qual é o elemento usado para criar um cabeçalho em HTML5, que geralmente contém o logotipo e o menu de navegação?
A: <header>
A: <nav>
A: <h1>
CA: <header>

L: HTML5
S: Estruturação de layout com HTML5
Q: Qual é o elemento usado para criar uma barra lateral em HTML5, que geralmente contém informações adicionais ou widgets?
A: <sidebar>
A: <aside>
A: <section>
CA: <aside>

L: HTML5
S: Estruturação de layout com HTML5
Q: Qual é o elemento usado para criar um rodapé em HTML5, que geralmente contém informações de contato ou links importantes?
A: <footer>
A: <bottom>
A: <end>
CA: <footer>

L: HTML5
S: Estruturação de layout com HTML5
Q: Qual é o elemento usado para criar uma seção de conteúdo em HTML5, que representa um tema ou tópico distinto?
A: <section>
A: <content>
A: <article>
CA: <section>

L: HTML5
S: Estruturação de layout com HTML5
Q: Qual é o elemento usado para criar uma área de navegação em HTML5, que contém links de navegação?
A: <navigation>
A: <nav>
A: <menu>
CA: <nav>

L: HTML5
S: Estruturação de layout com HTML5
Q: Qual é o elemento usado para criar um contêiner de layout em HTML5, que agrupa conteúdos relacionados ou áreas do site?
A: <container>
A: <wrap>
A: <div>
CA: <div>

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para especificar o título da página em HTML5, que é exibido na barra de título do navegador?
A: <header>
A: <title>
A: <h1>
CA: <title>

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para adicionar um autor à página em HTML5, fornecendo informações sobre o criador do conteúdo?
A: <author>
A: <meta author="">
A: <meta name="author" content="">
CA: <meta name="author" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para adicionar uma descrição do conteúdo da página em HTML5, que é exibida nos resultados de busca?
A: <description>
A: <meta description="">
A: <meta name="description" content="">
CA: <meta name="description" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para definir as palavras-chave relacionadas ao conteúdo da página em HTML5, que ajudam nos mecanismos de busca?
A: <meta keywords="">
A: <meta name="keywords" content="">
A: <keywords>
CA: <meta name="keywords" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para especificar o idioma da página em HTML5?
A: <meta name="language" content="">
A: <meta language="">
A: <lang>
CA: <meta name="language" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para redirecionar o navegador para outra página em HTML5?
A: <redirect>
A: <location>
A: <meta http-equiv="refresh" content="0; URL=">
CA: <meta http-equiv="refresh" content="0; URL=">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para especificar uma imagem que será exibida quando a página não pode ser carregada?
A: <fallback>
A: <notfound>
A: <meta name="fallback" content="">
CA: <meta name="fallback" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para especificar a URL de uma imagem que representa a página em HTML5, quando compartilhada em redes sociais?
A: <image>
A: <meta image="">
A: <meta property="og:image" content="">
CA: <meta property="og:image" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para especificar o título que será exibido quando a página é compartilhada em redes sociais em HTML5?
A: <meta title="">
A: <meta property="og:title" content="">
A: <share>
CA: <meta property="og:title" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para especificar o tipo de conteúdo da página em HTML5?
A: <meta content-type="">
A: <content-type>
A: <meta http-equiv="content-type" content="">
CA: <meta http-equiv="content-type" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para especificar o autor da página em HTML5, fornecendo informações sobre o proprietário do site?
A: <meta name="owner" content="">
A: <meta owner="">
A: <author>
CA: <meta name="owner" content="">

L: HTML5
S: Metadados e otimização para buscadores
Q: Qual é o elemento usado para definir o comportamento de indexação do mecanismo de busca em HTML5, instruindo-os a não indexar a página?
A: <meta name="index" content="no">
A: <meta index="no">
A: <noindex>
CA: <meta name="index" content="no">

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o elemento usado para incluir um arquivo CSS externo em uma página HTML5?
A: <style>
A: <link>
A: <css>
CA: <link>

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o atributo usado no elemento <link> para especificar o arquivo CSS a ser incluído em HTML5?
A: url
A: href
A: source
CA: href

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o elemento usado para incluir código CSS diretamente na página HTML5?
A: <style>
A: <link>
A: <css>
CA: <style>

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o elemento usado para incluir um arquivo JavaScript externo em uma página HTML5?
A: <js>
A: <script>
A: <javascript>
CA: <script>

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o atributo usado no elemento <script> para especificar o arquivo JavaScript a ser incluído em HTML5?
A: file
A: source
A: src
CA: src

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é a tag usada para incluir código JavaScript diretamente na página HTML5?
A: <js>
A: <javascript>
A: <script>
CA: <script>

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é a tag usada para definir uma área reservada para renderização de gráficos gerados por JavaScript em HTML5?
A: <drawing>
A: <canvas>
A: <graphic>
CA: <canvas>

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o método usado para chamar uma função JavaScript quando um botão é clicado em HTML5?
A: onclick
A: onaction
A: ontrigger
CA: onclick

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o método usado para chamar uma função JavaScript quando um formulário é enviado em HTML5?
A: onsubmit
A: onaction
A: ontrigger
CA: onsubmit

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o método usado para chamar uma função JavaScript quando o conteúdo de um campo de formulário é alterado em HTML5?
A: onchange
A: oninput
A: onupdate
CA: onchange

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o método usado para chamar uma função JavaScript quando o usuário passa o mouse sobre um elemento em HTML5?
A: onhover
A: onmouse
A: onmouseover
CA: onmouseover

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o método usado para chamar uma função JavaScript repetidamente em intervalos regulares em HTML5?
A: setInterval()
A: setTimer()
A: repeat()
CA: setInterval()

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o método usado para chamar uma função JavaScript após um determinado atraso em HTML5?
A: setTimeout()
A: setDelay()
A: delay()
CA: setTimeout()

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o método usado para alterar o conteúdo HTML de um elemento usando JavaScript em HTML5?
A: setHTML()
A: changeHTML()
A: innerHTML()
CA: innerHTML()

L: HTML5
S: Integração com CSS e JavaScript em HTML5
Q: Qual é o método usado para alterar o estilo CSS de um elemento usando JavaScript em HTML5?
A: style()
A: setStyle()
A: changeStyle()
CA: style()

L: JavaScript
S: Introdução ao JavaScript
Q: Qual é a forma correta de declarar uma variável em JavaScript?
A: variable nomeVariavel;
A: var nomeVariavel;
A: v nomeVariavel;
CA: var nomeVariavel;

L: JavaScript
S: Introdução ao JavaScript
Q: Como exibir uma mensagem "Olá, mundo!" no console usando JavaScript?
A: print("Olá, mundo!");
A: console.log("Olá, mundo!");
A: alert("Olá, mundo!");
CA: console.log("Olá, mundo!");

L: JavaScript
S: Introdução ao JavaScript
Q: Como adicionar um comentário de linha em JavaScript?
A: // Este é um comentário de linha.
A: /* Este é um comentário de linha. */
A: # Este é um comentário de linha.
CA: // Este é um comentário de linha.

L: JavaScript
S: Introdução ao JavaScript
Q: Qual é a forma correta de declarar uma função em JavaScript?
A: function minhaFuncao() {}
A: fun minhaFuncao() {}
A: def minhaFuncao() {}
CA: function minhaFuncao() {}

L: JavaScript
S: Introdução ao JavaScript
Q: Como acessar o elemento de um array em JavaScript?
A: array.elemento;
A: array[elemento];
A: array.elemento();
CA: array[elemento];

L: JavaScript
S: Condicionais em JavaScript
Q: Qual é a estrutura correta de uma instrução "if" em JavaScript?
A: se (condicao) { // código aqui }
A: if (condicao) { // código aqui }
A: caso (condicao) { // código aqui }
CA: if (condicao) { // código aqui }

L: JavaScript
S: Condicionais em JavaScript
Q: Como escrever uma instrução "if" com uma condição e uma alternativa "else" em JavaScript?
A: se (condicao) { // código se verdadeiro } casoContrario { // código se falso }
A: if (condicao) { // código se verdadeiro } else { // código se falso }
A: if (condicao) { // código se verdadeiro } ou { // código se falso }
CA: if (condicao) { // código se verdadeiro } else { // código se falso }

L: JavaScript
S: Condicionais em JavaScript
Q: Qual é a estrutura correta de uma instrução "switch" em JavaScript?
A: selecionar (opcao) { caso valor: // código aqui break; }
A: switch (opcao) { caso valor: // código aqui break; }
A: escolher (opcao) { caso valor: // código aqui break; }
CA: switch (opcao) { caso valor: // código aqui break; }

L: JavaScript
S: Condicionais em JavaScript
Q: Como escrever uma estrutura "if-else" com várias condições em JavaScript?
A: se (condicao1) { // código se verdadeiro } casoContrario se (condicao2) { // código se verdadeiro } casoContrario { // código se falso }
A: if (condicao1) { // código se verdadeiro } elseif (condicao2) { // código se verdadeiro } else { // código se falso }
A: if (condicao1) { // código se verdadeiro } else if (condicao2) { // código se verdadeiro } else { // código se falso }
CA: if (condicao1) { // código se verdadeiro } else if (condicao2) { // código se verdadeiro } else { // código se falso }

L: JavaScript
S: Loops em JavaScript
Q: Qual é a estrutura correta de um loop "for" em JavaScript?
A: para (inicializacao; condicao; incremento) { // código aqui }
A: loop (inicializacao; condicao; incremento) { // código aqui }
A: enquanto (inicializacao; condicao; incremento) { // código aqui }
CA: for (inicializacao; condicao; incremento) { // código aqui }

L: JavaScript
S: Loops em JavaScript
Q: Como escrever um loop "while" em JavaScript?
A: enquanto (condicao) { // código aqui }
A: enquanto (condicao) // código aqui
A: loop (condicao) { // código aqui }
CA: enquanto (condicao) { // código aqui }

L: JavaScript
S: Loops em JavaScript
Q: Como escrever um loop "do-while" em JavaScript?
A: faca { // código aqui } enquanto (condicao);
A: enquanto (condicao) { // código aqui } faca;
A: enquanto (condicao) faca { // código aqui }
CA: faca { // código aqui } enquanto (condicao);

L: JavaScript
S: Loops em JavaScript
Q: Como usar a instrução "break" em um loop em JavaScript?
A: parar;
A: sair;
A: quebrar;
CA: break;

L: JavaScript
S: Loops em JavaScript
Q: Como usar a instrução "continue" em um loop em JavaScript?
A: continuar;
A: proximo;
A: continuarProximaIteracao;
CA: continue;

L: JavaScript
S: Funções em JavaScript
Q: Qual é a forma correta de declarar uma função anônima em JavaScript?
A: funcao() { // código aqui }
A: function anonima() { // código aqui }
A: function() { // código aqui }
CA: function() { // código aqui }

L: JavaScript
S: Funções em JavaScript
Q: Como chamar uma função em JavaScript?
A: chamar minhaFuncao();
A: minhaFuncao();
A: executar minhaFuncao();
CA: minhaFuncao();

L: JavaScript
S: Funções em JavaScript
Q: Como passar argumentos para uma função em JavaScript?
A: minhaFuncao(argumento1, argumento2);
A: minhaFuncao[argumento1, argumento2];
A: minhaFuncao{argumento1, argumento2};
CA: minhaFuncao(argumento1, argumento2);

L: JavaScript
S: Funções em JavaScript
Q: Como retornar um valor de uma função em JavaScript?
A: retornar valor;
A: valor;
A: retornar(valor);
CA: return valor;

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Qual é o principal ambiente de execução para JavaScript no lado do cliente, comumente usado para interatividade em páginas da web?
A: Node.js
A: Navegadores web
A: Servidores web
CA: Navegadores web

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Qual ambiente de execução JavaScript é baseado no mecanismo V8 do Google e permite que o código JavaScript seja executado fora de um navegador?
A: Navegadores web
A: Node.js
A: Servidores web
CA: Node.js

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Qual ambiente de execução JavaScript permite o uso de módulos, que permite dividir o código em arquivos diferentes para melhor organização?
A: Node.js
A: Navegadores web
A: Servidores web
CA: Node.js

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: No ambiente de execução do Node.js, como é possível ler e escrever arquivos no sistema de arquivos local?
A: Usando a API window.filesystem do Node.js.
A: Não é possível ler e escrever arquivos no ambiente do Node.js.
A: Usando a API fs (File System) do Node.js.
CA: Usando a API fs (File System) do Node.js.

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Quais são algumas das principais funcionalidades adicionadas pelo ambiente de execução do Node.js em comparação com o ambiente de execução em navegadores web?
A: Manipulação de DOM (Document Object Model) e execução de JavaScript no cliente.
A: Suporte a módulos, acesso ao sistema de arquivos local, e capacidade de criar servidores web.
A: Suporte a animações e transições CSS3 no cliente.
CA: Suporte a módulos, acesso ao sistema de arquivos local, e capacidade de criar servidores web.

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Qual ambiente de execução JavaScript é mais adequado para lidar com operações de entrada/saída (I/O) assíncronas, como chamadas de API e leitura/gravação de arquivos?
A: Navegadores web
A: Node.js
A: Ambos (Navegadores web e Node.js)
CA: Node.js

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Qual é a forma correta de exibir uma mensagem no console no ambiente de execução do Node.js?
A: print("Mensagem");
A: console.log("Mensagem");
A: alert("Mensagem");
CA: console.log("Mensagem");

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Como é possível acessar e manipular o DOM (Document Object Model) em navegadores web?
A: Usando a API window.document.
A: Não é possível acessar o DOM em navegadores web.
A: Usando a API dom.access do navegador.
CA: Usando a API window.document.

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Qual ambiente de execução permite o uso de módulos externos que podem ser instalados via gerenciador de pacotes, como o npm (Node Package Manager)?
A: Navegadores web
A: Node.js
A: Ambos (Navegadores web e Node.js)
CA: Node.js

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Qual ambiente de execução é mais adequado para executar scripts do lado do servidor, como a construção de APIs RESTful e manipulação de banco de dados?
A: Node.js
A: Navegadores web
A: Ambos (Navegadores web e Node.js)
CA: Node.js

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: O que significa a sigla "V8" em referência ao ambiente de execução do Node.js?
A: É uma versão do JavaScript usada apenas em Node.js.
A: É o nome do criador original do Node.js.
A: É o mecanismo de JavaScript de código aberto desenvolvido pelo Google que é usado no Node.js.
CA: É o mecanismo de JavaScript de código aberto desenvolvido pelo Google que é usado no Node.js.

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Qual ambiente de execução é mais adequado para desenvolver aplicações de página única (SPA - Single Page Application)?
A: Navegadores web
A: Node.js
A: Ambos (Navegadores web e Node.js)
CA: Navegadores web

L: JavaScript
S: Ambiente de execução JavaScript (navegadores, Node.js)
Q: Como é possível gerenciar dependências externas em um projeto Node.js?
A: Usando a API import do Node.js.
A: Não é possível gerenciar dependências externas em Node.js.
A: Usando um gerenciador de pacotes, como o npm (Node Package Manager).
CA: Usando um gerenciador de pacotes, como o npm (Node Package Manager).

L: JavaScript
S: Variáveis e tipos de dados em JavaScript
Q: Qual é a forma correta de declarar uma variável em JavaScript usando a palavra-chave "let"?
A: variavel nomeVariavel;
A: let nomeVariavel;
A: const nomeVariavel;
CA: let nomeVariavel;

L: JavaScript
S: Variáveis e tipos de dados em JavaScript
Q: Como declarar uma variável em JavaScript e atribuir o valor "10" a ela?
A: variable valor = 10;
A: let valor = 10;
A: const valor = 10;
CA: let valor = 10;

L: JavaScript
S: Variáveis e tipos de dados em JavaScript
Q: Qual é o tipo de dado retornado pelo operador "typeof" em JavaScript quando aplicado a uma variável que contém um número?
A: number
A: int
A: numeric
CA: number

L: JavaScript
S: Variáveis e tipos de dados em JavaScript
Q: Como verificar se o valor de uma variável é do tipo "string" em JavaScript?
A: verificar tipo(nomeVariavel, "string");
A: if (tipo(nomeVariavel) === "string") { // código aqui }
A: if (tipo(nomeVariavel) == "string") { // código aqui }
CA: if (typeof nomeVariavel === "string") { // código aqui }

L: JavaScript
S: Variáveis e tipos de dados em JavaScript
Q: Qual é o tipo de dado retornado pelo operador "typeof" em JavaScript quando aplicado a uma variável que contém um valor booleano (verdadeiro ou falso)?
A: boolean
A: bool
A: logical
CA: boolean

L: JavaScript
S: Variáveis e tipos de dados em JavaScript
Q: Como declarar uma constante em JavaScript usando a palavra-chave "const"?
A: let nomeConstante = valor;
A: constant nomeConstante = valor;
A: const nomeConstante = valor;
CA: const nomeConstante = valor;

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Qual é o resultado da expressão: 10 + 5 * 2 ?
A: 30
A: 20
A: 25
CA: 20

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Como verificar se duas variáveis são iguais em valor e tipo em JavaScript?
A: x == y
A: x === y
A: x = y
CA: x === y

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Qual é o operador usado para verificar se duas variáveis são diferentes em valor ou tipo em JavaScript?
A: !=
A: ==
A: !==
CA: !==

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Como incrementar o valor de uma variável "contador" em 1 em JavaScript?
A: contador += 1;
A: contador = contador + 1;
A: contador++;
CA: contador++;

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Qual é o resultado da expressão: 15 / 2 ?
A: 7
A: 7.5
A: 8
CA: 7.5

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Como calcular o resto da divisão de 15 por 2 em JavaScript?
A: 15 % 2
A: 15 / 2
A: resto(15, 2)
CA: 15 % 2

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Qual é o resultado da expressão: "5" + 2 ?
A: "5"
A: "52"
A: 7
CA: "52"

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Como atribuir o valor de uma variável "x" para outra variável "y" em JavaScript?
A: y = x;
A: y := x;
A: y == x;
CA: y = x;

L: JavaScript
S: Operadores e expressões em JavaScript
Q: Qual é o operador usado para retornar o valor verdadeiro se pelo menos uma das duas condições for verdadeira em JavaScript?
A: ||
A: &&
A: !
CA: ||

L: JavaScript
S: Estruturas condicionais (if, else if, else, switch) em JavaScript
Q: Qual é a forma correta de escrever uma estrutura "if" em JavaScript?
A: se { // código aqui }
A: caso { // código aqui }
A: if { // código aqui }
CA: if (condicao) { // código aqui }

L: JavaScript
S: Estruturas condicionais (if, else if, else, switch) em JavaScript
Q: Como escrever uma estrutura "if-else" com várias condições em JavaScript?
A: se (condicao1) { // código se verdadeiro } senao (condicao2) { // código se verdadeiro } senao { // código se falso }
A: se (condicao1) { // código se verdadeiro } casoContrario se (condicao2) { // código se verdadeiro } senao { // código se falso }
A: se (condicao1) { // código se verdadeiro } casoContrario se (condicao2) { // código se verdadeiro } casoContrario { // código se falso }
CA: if (condicao1) { // código se verdadeiro } else if (condicao2) { // código se verdadeiro } else { // código se falso }

L: JavaScript
S: Estruturas condicionais (if, else if, else, switch) em JavaScript
Q: Qual é a forma correta de escrever uma estrutura "else if" em JavaScript?
A: senaoSe { // código aqui }
A: else if { // código aqui }
A: casoContrarioSe { // código aqui }
CA: else if (condicao) { // código aqui }

L: JavaScript
S: Estruturas condicionais (if, else if, else, switch) em JavaScript
Q: Como escrever uma estrutura "switch" em JavaScript?
A: escolher { caso valor: // código aqui break; }
A: selecionar { caso valor: // código aqui break; }
A: caso { valor: // código aqui }
CA: switch (variavel) { case valor: // código aqui break; }

L: JavaScript
S: Estruturas condicionais (if, else if, else, switch) em JavaScript
Q: Como usar a instrução "break" em um bloco "switch" em JavaScript?
A: encerrar;
A: parar;
A: break;
CA: break;

L: JavaScript
S: Estruturas condicionais (if, else if, else, switch) em JavaScript
Q: Qual é a forma correta de escrever uma estrutura "else" em JavaScript?
A: casoContrario { // código aqui }
A: senao { // código aqui }
A: seNao { // código aqui }
CA: else { // código aqui }

L: JavaScript
S: Estruturas condicionais (if, else if, else, switch) em JavaScript
Q: Como escrever uma estrutura "if-else" com várias condições em JavaScript?
A: se (condicao1) { // código se verdadeiro } senao (condicao2) { // código se verdadeiro } senao { // código se falso }
A: se (condicao1) { // código se verdadeiro } casoContrario se (condicao2) { // código se verdadeiro } senao { // código se falso }
A: se (condicao1) { // código se verdadeiro } casoContrario se (condicao2) { // código se verdadeiro } casoContrario { // código se falso }
CA: if (condicao1) { // código se verdadeiro } else if (condicao2) { // código se verdadeiro } else { // código se falso }

L: JavaScript
S: Estruturas condicionais (if, else if, else, switch) em JavaScript
Q: Qual é a estrutura condicional que permite selecionar um dos muitos blocos de código para ser executado em JavaScript?
A: if-else
A: switch
A: if-else if
CA: switch

L: JavaScript
S: Estruturas de repetição (for, while, do-while) em JavaScript
Q: Qual é a forma correta de escrever um loop "for" em JavaScript?
A: para (inicializacao; condicao; incremento) { // código aqui }
A: loop (inicializacao; condicao; incremento) { // código aqui }
A: enquanto (inicializacao; condicao; incremento) { // código aqui }
CA: for (inicializacao; condicao; incremento) { // código aqui }

L: JavaScript
S: Estruturas de repetição (for, while, do-while) em JavaScript
Q: Como escrever um loop "while" em JavaScript?
A: enquanto (condicao) { // código aqui }
A: enquanto (condicao) // código aqui
A: loop (condicao) { // código aqui }
CA: while (condicao) { // código aqui }

L: JavaScript
S: Estruturas de repetição (for, while, do-while) em JavaScript
Q: Qual é a forma correta de escrever um loop "do-while" em JavaScript?
A: faca { // código aqui } enquanto (condicao);
A: enquanto (condicao) { // código aqui } faca;
A: loop { // código aqui } enquanto (condicao);
CA: do { // código aqui } while (condicao);

L: JavaScript
S: Estruturas de repetição (for, while, do-while) em JavaScript
Q: Qual é a estrutura de repetição mais adequada quando queremos executar o código pelo menos uma vez antes de verificar a condição de parada?
A: for
A: while
A: do-while
CA: do-while

L: JavaScript
S: Estruturas de repetição (for, while, do-while) em JavaScript
Q: Como usar a instrução "break" para interromper a execução de um loop em JavaScript?
A: encerrar;
A: parar;
A: break;
CA: break;

L: JavaScript
S: Estruturas de repetição (for, while, do-while) em JavaScript
Q: Como usar a instrução "continue" para pular uma iteração em um loop em JavaScript?
A: continuar;
A: proximo;
A: continue;
CA: continue;

L: JavaScript
S: Estruturas de repetição (for, while, do-while) em JavaScript
Q: Qual é a estrutura de repetição mais adequada quando o número de iterações é conhecido ou definido?
A: for
A: while
A: do-while
CA: for

L: JavaScript
S: Estruturas de repetição (for, while, do-while) em JavaScript
Q: Qual é a estrutura de repetição mais adequada quando o número de iterações depende de uma condição que pode ser verdadeira ou falsa?
A: while
A: for
A: do-while
CA: while

L: JavaScript
S: Arrays e manipulação de arrays em JavaScript
Q: Qual é a forma correta de declarar um array vazio em JavaScript?
A: const meuArray = [];
A: const meuArray = {};
A: const meuArray = ();
CA: const meuArray = [];

L: JavaScript
S: Arrays e manipulação de arrays em JavaScript
Q: Como adicionar um elemento no final de um array existente em JavaScript?
A: array.push(elemento);
A: array.unshift(elemento);
A: array.add(elemento);
CA: array.push(elemento);

L: JavaScript
S: Arrays e manipulação de arrays em JavaScript
Q: Como acessar o primeiro elemento de um array em JavaScript?
A: array[0];
A: array.first;
A: array.getFirst();
CA: array[0];

L: JavaScript
S: Arrays e manipulação de arrays em JavaScript
Q: Qual método é usado para remover o último elemento de um array em JavaScript?
A: array.removeLast();
A: array.pop();
A: array.deleteLast();
CA: array.pop();

L: JavaScript
S: Arrays e manipulação de arrays em JavaScript
Q: Como encontrar o número de elementos em um array em JavaScript?
A: array.count;
A: array.length;
A: array.size();
CA: array.length;

L: JavaScript
S: Arrays e manipulação de arrays em JavaScript
Q: Qual é o método usado para concatenar dois arrays em JavaScript?
A: array.concat(outroArray);
A: array.combine(outroArray);
A: array.join(outroArray);
CA: array.concat(outroArray);

L: JavaScript
S: Objetos em JavaScript (criação, propriedades, métodos)
Q: Como criar um objeto vazio em JavaScript?
A: const meuObjeto = {};
A: const meuObjeto = ();
A: const meuObjeto = new Object();
CA: const meuObjeto = {};

L: JavaScript
S: Objetos em JavaScript (criação, propriedades, métodos)
Q: Qual é a forma correta de adicionar uma propriedade "nome" com valor "João" a um objeto em JavaScript?
A: objeto.nome: "João";
A: objeto["nome"] = "João";
A: objeto.add("nome", "João");
CA: objeto["nome"] = "João";

L: JavaScript
S: Objetos em JavaScript (criação, propriedades, métodos)
Q: Como acessar o valor da propriedade "idade" de um objeto chamado "pessoa" em JavaScript?
A: pessoa(idade);
A: pessoa.idade;
A: pessoa[idade];
CA: pessoa.idade;

L: JavaScript
S: Objetos em JavaScript (criação, propriedades, métodos)
Q: Qual é a forma correta de adicionar um método chamado "dizerOla" a um objeto em JavaScript?
A: objeto.dizerOla = function() { // código aqui };
A: objeto("dizerOla", function() { // código aqui });
A: objeto.add("dizerOla", function() { // código aqui });
CA: objeto.dizerOla = function() { // código aqui };

L: JavaScript
S: Objetos em JavaScript (criação, propriedades, métodos)
Q: Como remover a propriedade "email" de um objeto chamado "contato" em JavaScript?
A: contato.remove("email");
A: contato.delete(email);
A: delete contato.email;
CA: delete contato.email;

L: JavaScript
S: Funções em JavaScript (declaração, expressão, arrow functions)
Q: Qual é a forma correta de declarar uma função chamada "saudacao" em JavaScript?
A: funcao saudacao() { // código aqui }
A: funcao: saudacao() { // código aqui }
A: function saudacao() { // código aqui }
CA: function saudacao() { // código aqui }

L: JavaScript
S: Funções em JavaScript (declaração, expressão, arrow functions)
Q: Como chamar a função "dobro" com um argumento "x" em JavaScript?
A: chamar dobro(x);
A: executar dobro(x);
A: dobro(x);
CA: dobro(x);

L: JavaScript
S: Funções em JavaScript (declaração, expressão, arrow functions)
Q: Qual é a diferença entre uma função declarada e uma função expressada em JavaScript?
A: Não há diferença entre elas.
A: Uma função declarada é criada usando a palavra-chave "function" seguida do nome da função, enquanto uma função expressada é atribuída a uma variável.
A: Uma função declarada é atribuída a uma variável, enquanto uma função expressada é criada usando a palavra-chave "function" seguida do nome da função.
CA: Uma função declarada é criada usando a palavra-chave "function" seguida do nome da função, enquanto uma função expressada é atribuída a uma variável.

L: JavaScript
S: Funções em JavaScript (declaração, expressão, arrow functions)
Q: Qual é a forma correta de criar uma função expressão anônima em JavaScript?
A: function() { // código aqui }
A: funcao() { // código aqui }
A: funcao anonima() { // código aqui }
CA: function() { // código aqui }

L: JavaScript
S: Funções em JavaScript (declaração, expressão, arrow functions)
Q: Qual é a forma correta de escrever uma arrow function que retorna o dobro de um número "x" em JavaScript?
A: const dobro = (x) => { return x * 2; };
A: const dobro = function(x) { return x * 2; };
A: function dobro(x) => { return x * 2; };
CA: const dobro = (x) => { return x * 2; };

L: JavaScript
S: Funções em JavaScript (declaração, expressão, arrow functions)
Q: Como definir um valor padrão de 0 para o parâmetro "y" em uma função em JavaScript?
A: funcao minhaFuncao(x, y = 0) { // código aqui }
A: funcao minhaFuncao(x, y) { y = y || 0; // código aqui }
A: funcao minhaFuncao(x, y = 0) => { // código aqui }
CA: function minhaFuncao(x, y = 0) { // código aqui }

L: JavaScript
S: Funções em JavaScript (declaração, expressão, arrow functions)
Q: Qual é a diferença entre uma arrow function e uma função tradicional em JavaScript?
A: As arrow functions não podem ter parâmetros.
A: As arrow functions são sempre funções expressadas, enquanto as funções tradicionais podem ser declaradas ou expressadas.
CA: As arrow functions não possuem escopo próprio ("this" é herdado do contexto externo), enquanto as funções tradicionais possuem seu próprio escopo ("this" pode variar dependendo de como a função é chamada).

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como selecionar um elemento HTML pelo seu ID em JavaScript?
A: selecionarElemento("#meuId");
A: document.getElement("#meuId");
A: document.getElementById("meuId");
CA: document.getElementById("meuId");

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como selecionar todos os elementos de parágrafo (p) em JavaScript?
A: document.getElements("p");
A: document.getElementsById("p");
A: document.getElementsByTagName("p");
CA: document.getElementsByTagName("p");

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como alterar o conteúdo de um elemento HTML selecionado em JavaScript?
A: elemento.innerHTML = "Novo conteúdo";
A: elemento.textContent = "Novo conteúdo";
A: elemento.value = "Novo conteúdo";
CA: elemento.innerHTML = "Novo conteúdo";

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como adicionar uma classe CSS "ativo" a um elemento HTML selecionado em JavaScript?
A: elemento.classList.add("ativo");
A: elemento.className = "ativo";
A: elemento.addClass("ativo");
CA: elemento.classList.add("ativo");

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como criar um novo elemento de parágrafo (p) em JavaScript?
A: document.createElement("p");
A: document.create("p");
A: createElement("p");
CA: document.createElement("p");

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como inserir um novo elemento de parágrafo (p) dentro de um elemento com ID "container" em JavaScript?
A: document.insert("p", "container");
A: document.appendChild("p", "container");
A: document.getElementById("container").appendChild(document.createElement("p"));
CA: document.getElementById("container").appendChild(document.createElement("p"));

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como remover um elemento HTML selecionado em JavaScript?
A: elemento.remove();
A: elemento.delete();
A: document.remove(elemento);
CA: elemento.remove();

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como verificar se um elemento HTML possui uma determinada classe CSS chamada "destaque" em JavaScript?
A: elemento.hasClass("destaque");
A: elemento.classList.contains("destaque");
A: elemento.hasClass("destaque");
CA: elemento.classList.contains("destaque");

L: JavaScript
S: Manipulação do DOM (Document Object Model) com JavaScript
Q: Como adicionar um novo atributo "src" a uma imagem (elemento img) em JavaScript?
A: imagem.src = "caminho-da-imagem.jpg";
A: imagem.setAtributo("src", "caminho-da-imagem.jpg");
A: imagem.setAttribute("src", "caminho-da-imagem.jpg");
CA: imagem.setAttribute("src", "caminho-da-imagem.jpg");

L: CSS
S: Introdução ao CSS e sua função no desenvolvimento web
Q: O que significa CSS?
A: Creative Style Sheets
A: Cascading Style Sheets
A: Computer Style Sheets
CA: Cascading Style Sheets

L: CSS
S: Introdução ao CSS e sua função no desenvolvimento web
Q: Qual é a função do CSS no desenvolvimento web?
A: Gerar interatividade em páginas web.
A: Definir a estrutura e organização do conteúdo em páginas web.
A: Controlar o comportamento e a lógica das aplicações web.
CA: Estilizar e formatar o layout das páginas web, tornando-as visualmente atraentes e consistentes.

L: CSS
S: Introdução ao CSS e sua função no desenvolvimento web
Q: O que significa "cascading" (cascata) em Cascading Style Sheets (CSS)?
A: Significa que o CSS é usado apenas para estilizar elementos de cabeçalhos em páginas web.
A: Significa que o CSS é usado para definir a estrutura hierárquica dos elementos em páginas web.
A: Significa que o CSS segue uma ordem de prioridade em relação a estilos definidos, onde estilos mais específicos têm maior peso.
CA: Significa que o CSS segue uma ordem de prioridade em relação a estilos definidos, onde estilos mais específicos têm maior peso.

L: CSS
S: Introdução ao CSS e sua função no desenvolvimento web
Q: Qual é a sintaxe básica para selecionar um elemento HTML usando CSS?
A: selecionarElemento { // estilos aqui }
A: selecionarElemento = { // estilos aqui }
A: selecionarElemento: { // estilos aqui }
CA: selecionarElemento { /* estilos aqui */ }

L: CSS
S: Introdução ao CSS e sua função no desenvolvimento web
Q: Onde é recomendado inserir as regras de estilo CSS em um documento HTML?
A: Dentro de um elemento <style> na seção <head> do documento HTML.
A: Dentro de um elemento <style> na seção <body> do documento HTML.
A: Dentro de um elemento <script> na seção <head> do documento HTML.
CA: Dentro de um elemento <style> na seção <head> do documento HTML.

L: CSS
S: Introdução ao CSS e sua função no desenvolvimento web
Q: Como aplicar o estilo CSS a um elemento com a classe "destaque" em um arquivo externo de CSS?
A: .destaque { /* estilos aqui */ }
A: destaque { /* estilos aqui */ }
A: #destaque { /* estilos aqui */ }
CA: .destaque { /* estilos aqui */ }

L: CSS
S: Introdução ao CSS e sua função no desenvolvimento web
Q: Qual é a principal vantagem de usar CSS em relação à estilização diretamente no HTML?
A: Não há vantagem em usar CSS, é apenas uma questão de preferência pessoal.
A: CSS permite estilos mais avançados e complexos do que o HTML.
A: CSS separa a apresentação do conteúdo, o que torna o código mais organizado, facilitando a manutenção e a reutilização dos estilos.
CA: CSS separa a apresentação do conteúdo, o que torna o código mais organizado, facilitando a manutenção e a reutilização dos estilos.

L: CSS
S: Seletores CSS (elementos, classes, IDs, combinações)
Q: Qual é o seletor CSS correto para selecionar todos os elementos <p> em um documento HTML?
A: p { /* estilos aqui */ }
A: .p { /* estilos aqui */ }
A: #p { /* estilos aqui */ }
CA: p { /* estilos aqui */ }

L: CSS
S: Seletores CSS (elementos, classes, IDs, combinações)
Q: Qual é o seletor CSS correto para selecionar um elemento com a classe "destaque" em um documento HTML?
A: .destaque { /* estilos aqui */ }
A: destaque { /* estilos aqui */ }
A: #destaque { /* estilos aqui */ }
CA: .destaque { /* estilos aqui */ }

L: CSS
S: Seletores CSS (elementos, classes, IDs, combinações)
Q: Como selecionar um elemento com o ID "logo" em um documento HTML usando CSS?
A: #logo { /* estilos aqui */ }
A: .logo { /* estilos aqui */ }
A: logo { /* estilos aqui */ }
CA: #logo { /* estilos aqui */ }

L: CSS
S: Seletores CSS (elementos, classes, IDs, combinações)
Q: Qual é o seletor CSS correto para selecionar todos os elementos <li> dentro de uma lista não ordenada (ul) com a classe "menu"?
A: ul { /* estilos aqui */ }
A: .menu li { /* estilos aqui */ }
A: li.menu { /* estilos aqui */ }
CA: .menu li { /* estilos aqui */ }

L: CSS
S: Estilos inline, incorporados e externos
Q: Onde são definidos os estilos inline em um documento HTML?
A: Dentro de um elemento <style> na seção <head> do documento HTML.
A: Dentro de um atributo "style" em um elemento HTML.
A: Dentro de um arquivo CSS externo.
CA: Dentro de um atributo "style" em um elemento HTML.

L: CSS
S: Estilos inline, incorporados e externos
Q: Qual é a principal diferença entre estilos inline e estilos incorporados em um documento HTML?
A: Estilos inline são definidos diretamente nos elementos HTML, enquanto estilos incorporados são definidos em um arquivo CSS externo.
A: Estilos inline são definidos em um arquivo CSS externo, enquanto estilos incorporados são definidos diretamente nos elementos HTML.
A: Estilos inline são aplicados a todos os elementos HTML, enquanto estilos incorporados são aplicados apenas a elementos específicos.
CA: Estilos inline são definidos diretamente nos elementos HTML, enquanto estilos incorporados são definidos em um elemento <style> na seção <head> do documento HTML.

L: CSS
S: Estilos inline, incorporados e externos
Q: Onde são definidos os estilos incorporados em um documento HTML?
A: Dentro de um atributo "style" em um elemento HTML.
A: Dentro de um elemento <style> na seção <head> do documento HTML.
A: Dentro de um arquivo CSS externo.
CA: Dentro de um elemento <style> na seção <head> do documento HTML.

L: CSS
S: Estilos inline, incorporados e externos
Q: Qual é a principal vantagem de usar estilos externos (arquivos CSS separados) em vez de estilos incorporados ou inline em um documento HTML?
A: Estilos externos são mais fáceis de implementar e exigem menos código do que estilos incorporados ou inline.
A: Estilos externos permitem maior controle sobre a apresentação do documento, tornando o código mais organizado e facilitando a reutilização em várias páginas.
A: Estilos externos são suportados apenas em navegadores modernos, o que torna o site mais compatível com diferentes dispositivos.
CA: Estilos externos permitem maior controle sobre a apresentação do documento, tornando o código mais organizado e facilitando a reutilização em várias páginas.

L: CSS
S: Estilos inline, incorporados e externos
Q: Como vincular um arquivo CSS externo a um documento HTML?
A: <link href="styles.css" rel="stylesheet">
A: <style src="styles.css">
A: <css link="styles.css">
CA: <link href="styles.css" rel="stylesheet">

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Qual propriedade CSS é usada para criar um layout de colunas e linhas em um contêiner?
A: grid-template
A: flexbox
A: grid-columns
CA: display: grid

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Qual é a principal diferença entre float e flexbox em CSS?
A: Flexbox é usado para criar layouts bidimensionais, enquanto float é usado apenas para imagens flutuantes.
A: Float é usado para criar layouts bidimensionais, enquanto flexbox é usado apenas para imagens flutuantes.
A: Flexbox é usado para criar layouts bidimensionais, enquanto float é usado apenas para posicionamento de elementos à esquerda ou à direita.
CA: Flexbox é usado para criar layouts bidimensionais, enquanto float é usado apenas para posicionamento de elementos à esquerda ou à direita.

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Qual propriedade CSS é usada para definir a ordem dos itens flexíveis em um contêiner flexbox?
A: flex-order
A: flex-direction
A: order
CA: order

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Como fazer com que os elementos dentro de um contêiner flexbox sejam alinhados horizontalmente ao centro?
A: align-items: center
A: justify-content: center
A: align-content: center
CA: justify-content: center

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Qual propriedade CSS é usada para criar um layout de colunas em um contêiner?
A: grid-columns
A: flex-direction
A: grid-template-columns
CA: grid-template-columns

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Qual é a principal diferença entre flexbox e grid em CSS?
A: Flexbox é usado para criar layouts bidimensionais, enquanto grid é usado apenas para alinhar elementos horizontalmente.
A: Grid é usado para criar layouts bidimensionais, enquanto flexbox é usado apenas para alinhar elementos horizontalmente.
A: Flexbox é usado para criar layouts unidimensionais, enquanto grid é usado para criar layouts bidimensionais.
CA: Grid é usado para criar layouts bidimensionais, enquanto flexbox é usado para criar layouts unidimensionais.

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Como fazer com que os elementos dentro de um contêiner flexbox sejam alinhados verticalmente ao centro?
A: align-items: center
A: justify-content: center
A: align-content: center
CA: align-items: center

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Qual propriedade CSS é usada para criar um layout de colunas e linhas em um contêiner?
A: grid-template
A: flexbox
A: grid-columns
CA: display: grid

L: CSS
S: Layouts em CSS (float, flexbox, grid)
Q: Como fazer com que os elementos dentro de um contêiner flexbox sejam distribuídos igualmente ao longo do eixo principal?
A: align-items: center
A: justify-content: center
A: justify-content: space-between
CA: justify-content: space-between

L: CSS
S: Estilização de formulários em CSS
Q: Qual propriedade CSS é usada para alterar a cor do texto nos campos de entrada (input) de um formulário?
A: input-color
A: text-color
A: color
CA: color

L: CSS
S: Estilização de formulários em CSS
Q: Como alterar a cor de fundo dos campos de entrada (input) quando estão em foco (quando o usuário está interagindo com eles)?
A: input:focus { background-color: yellow; }
A: input.active { background-color: yellow; }
A: input:hover { background-color: yellow; }
CA: input:focus { background-color: yellow; }

L: CSS
S: Estilização de formulários em CSS
Q: Qual propriedade CSS é usada para definir a cor da borda dos campos de entrada (input) de um formulário?
A: input-border
A: border
A: border-color
CA: border-color

L: CSS
S: Estilização de formulários em CSS
Q: Como definir a margem interna (espaço interno) dos campos de entrada (input) em um formulário?
A: input { padding: 10px; }
A: input { margin: 10px; }
A: input { spacing: 10px; }
CA: input { padding: 10px; }

L: CSS
S: Estilização de formulários em CSS
Q: Qual propriedade CSS é usada para alterar o estilo da borda dos campos de entrada (input) quando estão em foco?
A: input:hover { /* estilos aqui */ }
A: input:active { /* estilos aqui */ }
A: input:focus { /* estilos aqui */ }
CA: input:focus { /* estilos aqui */ }

L: CSS
S: Estilização de formulários em CSS
Q: Como alterar a cor do texto do rótulo (label) associado a um campo de entrada (input) em um formulário?
A: label { color: blue; }
A: input + label { color: blue; }
A: input ~ label { color: blue; }
CA: label { color: blue; }

L: CSS
S: Estilização de formulários em CSS
Q: Como alterar o estilo da caixa de seleção (checkbox) em um formulário?
A: input[type=checkbox] { /* estilos aqui */ }
A: input[type=checkbox]:checked { /* estilos aqui */ }
A: input[type=checkbox]:active { /* estilos aqui */ }
CA: input[type=checkbox] { /* estilos aqui */ }

L: CSS
S: Estilização de formulários em CSS
Q: Como alterar o estilo de um campo de entrada (input) de tipo "submit" quando o usuário coloca o mouse sobre ele?
A: input[type=submit]:hover { /* estilos aqui */ }
A: input[type=submit]:active { /* estilos aqui */ }
A: input[type=submit]:focus { /* estilos aqui */ }
CA: input[type=submit]:hover { /* estilos aqui */ }

L: CSS
S: Estilização de formulários em CSS
Q: Como alterar o estilo de um campo de entrada (input) de tipo "text" quando o usuário coloca o mouse sobre ele?
A: input[type=text]:hover { /* estilos aqui */ }
A: input[type=text]:active { /* estilos aqui */ }
A: input[type=text]:focus { /* estilos aqui */ }
CA: input[type=text]:hover { /* estilos aqui */ }

L: CSS
S: Estilização de formulários em CSS
Q: Qual é a propriedade CSS usada para alterar o estilo da caixa de seleção (checkbox) quando está marcada?
A: input:checked { /* estilos aqui */ }
A: input:marked { /* estilos aqui */ }
A: input:selected { /* estilos aqui */ }
CA: input:checked { /* estilos aqui */ }

L: CSS
S: Estilização de formulários em CSS
Q: Como alterar a cor de fundo de um campo de entrada (input) quando o usuário coloca o cursor sobre ele?
A: input:hover { background-color: yellow; }
A: input:active { background-color: yellow; }
A: input:focus { background-color: yellow; }
CA: input:hover { background-color: yellow; }

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: O que é o Bootstrap?
A: Um pré-processador CSS.
A: Um framework CSS desenvolvido pela Google.
A: Um framework CSS de código aberto que facilita o desenvolvimento de sites e aplicações responsivas.
CA: Um framework CSS de código aberto que facilita o desenvolvimento de sites e aplicações responsivas.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: O que o Bootstrap oferece aos desenvolvedores?
A: Uma linguagem de programação para criação de sites e aplicações.
A: Uma biblioteca de estilos e componentes reutilizáveis para agilizar o desenvolvimento.
A: Uma plataforma para criação de jogos em HTML5.
CA: Uma biblioteca de estilos e componentes reutilizáveis para agilizar o desenvolvimento.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Qual é a principal vantagem de usar um framework CSS como o Bootstrap?
A: A possibilidade de criar animações avançadas em CSS.
A: A compatibilidade com todos os navegadores modernos.
A: A aceleração do desenvolvimento, pois oferece uma série de componentes e estilos pré-definidos.
CA: A aceleração do desenvolvimento, pois oferece uma série de componentes e estilos pré-definidos.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: O que é um pré-processador CSS?
A: Um tipo de software que verifica a compatibilidade do código CSS com os navegadores.
A: Uma ferramenta que permite aos desenvolvedores escrever CSS de forma mais eficiente, utilizando recursos como variáveis, funções e aninhamento.
A: Um módulo do navegador responsável por renderizar o CSS em uma página web.
CA: Uma ferramenta que permite aos desenvolvedores escrever CSS de forma mais eficiente, utilizando recursos como variáveis, funções e aninhamento.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Quais pré-processadores CSS são populares no desenvolvimento web?
A: Bootstrap e Materialize.
A: Sass e Less.
A: Foundation e Semantic UI.
CA: Sass e Less.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: O que é o Sass?
A: Um framework CSS para criação de layouts complexos.
A: Um pré-processador CSS que estende a sintaxe do CSS e adiciona funcionalidades poderosas, como variáveis, mixins e funções.
A: Uma biblioteca de estilos de design prontos para uso.
CA: Um pré-processador CSS que estende a sintaxe do CSS e adiciona funcionalidades poderosas, como variáveis, mixins e funções.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Como os pré-processadores CSS ajudam a organizar e reutilizar estilos?
A: Através da inclusão de arquivos CSS externos em páginas web.
A: Através da criação de funções e mixins que podem ser reutilizados em diferentes partes do código.
A: Através da utilização de frameworks CSS como o Bootstrap.
CA: Através da criação de funções e mixins que podem ser reutilizados em diferentes partes do código.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Como os pré-processadores CSS tratam as variáveis?
A: As variáveis não são suportadas pelos pré-processadores CSS.
A: As variáveis são definidas usando a sintaxe $nomeDaVariavel no caso do Sass, ou @nomeDaVariavel no caso do Less.
A: As variáveis são definidas usando a sintaxe var(nomeDaVariavel) no caso do Sass, ou var(--nomeDaVariavel) no caso do Less.
CA: As variáveis são definidas usando a sintaxe $nomeDaVariavel no caso do Sass, ou @nomeDaVariavel no caso do Less.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: O que é o Less?
A: Um framework CSS para criação de layouts responsivos.
A: Um pré-processador CSS que estende a sintaxe do CSS e adiciona funcionalidades como variáveis, mixins e funções.
A: Uma biblioteca de estilos de design prontos para uso.
CA: Um pré-processador CSS que estende a sintaxe do CSS e adiciona funcionalidades como variáveis, mixins e funções.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Como os pré-processadores CSS permitem o uso de mixins?
A: Através da criação de funções que podem ser reutilizadas em diferentes partes do código CSS.
A: Através da declaração de estilos de design prontos para uso.
A: Através da utilização de frameworks CSS como o Bootstrap.
CA: Através da criação de funções que podem ser reutilizadas em diferentes partes do código CSS.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Qual é a diferença entre um framework CSS e um pré-processador CSS?
A: Frameworks CSS são bibliotecas de estilos prontos para uso, enquanto pré-processadores CSS são ferramentas que estendem a sintaxe do CSS.
A: Frameworks CSS são utilizados para definir layouts complexos, enquanto pré-processadores CSS são utilizados para criar animações em CSS.
A: Frameworks CSS são uma forma avançada de codificar em CSS, enquanto pré-processadores CSS são projetos colaborativos para desenvolvimento web.
CA: Frameworks CSS são bibliotecas de estilos prontos para uso, enquanto pré-processadores CSS são ferramentas que estendem a sintaxe do CSS.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Como os pré-processadores CSS permitem a aninhamento de estilos?
A: Através da criação de seletores complexos em CSS.
A: Através da inclusão de arquivos CSS externos em páginas web.
A: Através da escrita de estilos aninhados, o que ajuda a organizar e modularizar o código.
CA: Através da escrita de estilos aninhados, o que ajuda a organizar e modularizar o código.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: O que o Bootstrap oferece aos desenvolvedores?
A: Uma plataforma para criação de jogos em HTML5.
A: Uma biblioteca de estilos e componentes reutilizáveis para agilizar o desenvolvimento.
A: Uma linguagem de programação para criação de sites e aplicações.
CA: Uma biblioteca de estilos e componentes reutilizáveis para agilizar o desenvolvimento.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Como os pré-processadores CSS tratam as variáveis?
A: As variáveis não são suportadas pelos pré-processadores CSS.
A: As variáveis são definidas usando a sintaxe var(nomeDaVariavel) no caso do Sass, ou var(--nomeDaVariavel) no caso do Less.
A: As variáveis são definidas usando a sintaxe $nomeDaVariavel no caso do Sass, ou @nomeDaVariavel no caso do Less.
CA: As variáveis são definidas usando a sintaxe $nomeDaVariavel no caso do Sass, ou @nomeDaVariavel no caso do Less.

L: CSS
S: Frameworks CSS (por exemplo, Bootstrap) e pré-processadores (Sass, Less)
Q: Qual é a principal vantagem de usar um framework CSS como o Bootstrap?
A: A possibilidade de criar animações avançadas em CSS.
A: A aceleração do desenvolvimento, pois oferece uma série de componentes e estilos pré-definidos.
A: A compatibilidade com todos os navegadores modernos.
CA: A aceleração do desenvolvimento, pois oferece uma série de componentes e estilos pré-definidos.
